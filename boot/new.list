
new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006824  08006824  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08006824  08006824  00016824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800682c  0800682c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08006834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001284  200000c0  080068f4  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001344  080068f4  00021344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023870  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040fc  00000000  00000000  00043960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00047a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a64c  00000000  00000000  00048940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020c1d  00000000  00000000  00062f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a1505  00000000  00000000  00083ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001250ae  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00016179  00000000  00000000  00125101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002198  00000000  00000000  0013b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c08  00000000  00000000  0013d418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e74 	.word	0x08005e74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08005e74 	.word	0x08005e74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <crc32>:
uint32_t cr = ~orig;
const uint8_t *p;
uint32_t n;
uint8_t i;

  	for (n = size, p = buf; n != 0;) {
 8000588:	b31a      	cbz	r2, 80005d2 <crc32+0x4a>
{
 800058a:	b470      	push	{r4, r5, r6}
 800058c:	4d11      	ldr	r5, [pc, #68]	; (80005d4 <crc32+0x4c>)
 800058e:	43c4      	mvns	r4, r0
    	if (n >= 8) {
 8000590:	2a07      	cmp	r2, #7
 8000592:	d80d      	bhi.n	80005b0 <crc32+0x28>
    		for (i = 0; i < 8; i++) CRC32(cr, *(p + i));
    		p += 8;
    		n -= 8;
    	} else {
    		CRC32(cr, *p);
 8000594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000598:	4063      	eors	r3, r4
 800059a:	b2db      	uxtb	r3, r3
    		p++;
    		n--;
 800059c:	3a01      	subs	r2, #1
    		CRC32(cr, *p);
 800059e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80005a2:	ea83 2414 	eor.w	r4, r3, r4, lsr #8
  	for (n = size, p = buf; n != 0;) {
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d1f2      	bne.n	8000590 <crc32+0x8>
 80005aa:	43e0      	mvns	r0, r4
    	}
  	}

  	return ~cr;
}
 80005ac:	bc70      	pop	{r4, r5, r6}
 80005ae:	4770      	bx	lr
 80005b0:	1e48      	subs	r0, r1, #1
 80005b2:	1dce      	adds	r6, r1, #7
    		for (i = 0; i < 8; i++) CRC32(cr, *(p + i));
 80005b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80005b8:	4063      	eors	r3, r4
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4286      	cmp	r6, r0
 80005be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80005c2:	ea83 2414 	eor.w	r4, r3, r4, lsr #8
 80005c6:	d1f5      	bne.n	80005b4 <crc32+0x2c>
    		n -= 8;
 80005c8:	3a08      	subs	r2, #8
    		p += 8;
 80005ca:	3108      	adds	r1, #8
  	for (n = size, p = buf; n != 0;) {
 80005cc:	2a00      	cmp	r2, #0
 80005ce:	d1df      	bne.n	8000590 <crc32+0x8>
 80005d0:	e7eb      	b.n	80005aa <crc32+0x22>
}
 80005d2:	4770      	bx	lr
 80005d4:	080060e4 	.word	0x080060e4

080005d8 <Logger>:
//----------------------------------------------------------------------
//----------------------------------------------------------------------
#ifdef SET_LOGGER

void Logger(const char *tag, bool addTime, const char *fmt, ...)
{
 80005d8:	b40c      	push	{r2, r3}
 80005da:	b570      	push	{r4, r5, r6, lr}
	va_list args;
	size_t len = MAX_UART_BUF;
	int dl = 0;
	char *buff = &logBuf[0];

	*buff = '\0';
 80005dc:	4e24      	ldr	r6, [pc, #144]	; (8000670 <Logger+0x98>)
 80005de:	2300      	movs	r3, #0
{
 80005e0:	b082      	sub	sp, #8
 80005e2:	4605      	mov	r5, r0
	*buff = '\0';
 80005e4:	7033      	strb	r3, [r6, #0]
	if (addTime) dl = sec_to_str(buff);
 80005e6:	2900      	cmp	r1, #0
 80005e8:	d13d      	bne.n	8000666 <Logger+0x8e>
	int dl = 0;
 80005ea:	460c      	mov	r4, r1

	if (tag) dl += sprintf(buff+strlen(buff), "[%s] ", tag);
 80005ec:	b145      	cbz	r5, 8000600 <Logger+0x28>
 80005ee:	4820      	ldr	r0, [pc, #128]	; (8000670 <Logger+0x98>)
 80005f0:	f7ff fdf6 	bl	80001e0 <strlen>
 80005f4:	491f      	ldr	r1, [pc, #124]	; (8000674 <Logger+0x9c>)
 80005f6:	462a      	mov	r2, r5
 80005f8:	4430      	add	r0, r6
 80005fa:	f004 ffe9 	bl	80055d0 <siprintf>
 80005fe:	4404      	add	r4, r0
	va_start(args, fmt);
	vsnprintf(buff + dl, len - dl, fmt, args);
 8000600:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
 8000604:	9a06      	ldr	r2, [sp, #24]
	logReady = false;
 8000606:	4d1c      	ldr	r5, [pc, #112]	; (8000678 <Logger+0xa0>)
	va_start(args, fmt);
 8000608:	ab07      	add	r3, sp, #28
	vsnprintf(buff + dl, len - dl, fmt, args);
 800060a:	1930      	adds	r0, r6, r4
	va_start(args, fmt);
 800060c:	9301      	str	r3, [sp, #4]
	vsnprintf(buff + dl, len - dl, fmt, args);
 800060e:	f005 f8dd 	bl	80057cc <vsniprintf>
	logReady = false;
 8000612:	2300      	movs	r3, #0
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buff, strlen(buff)) != HAL_OK) {
 8000614:	4816      	ldr	r0, [pc, #88]	; (8000670 <Logger+0x98>)
	logReady = false;
 8000616:	702b      	strb	r3, [r5, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buff, strlen(buff)) != HAL_OK) {
 8000618:	f7ff fde2 	bl	80001e0 <strlen>
 800061c:	4c17      	ldr	r4, [pc, #92]	; (800067c <Logger+0xa4>)
 800061e:	4914      	ldr	r1, [pc, #80]	; (8000670 <Logger+0x98>)
 8000620:	b282      	uxth	r2, r0
 8000622:	6820      	ldr	r0, [r4, #0]
 8000624:	f004 fb28 	bl	8004c78 <HAL_UART_Transmit_DMA>
 8000628:	b198      	cbz	r0, 8000652 <Logger+0x7a>
		devError |= devUART;
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <Logger+0xa8>)
 800062c:	6813      	ldr	r3, [r2, #0]
		logReady = true;
 800062e:	2101      	movs	r1, #1
		devError |= devUART;
 8000630:	430b      	orrs	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
		logReady = true;
 8000634:	7029      	strb	r1, [r5, #0]
	}

	va_end(args);

#endif
}
 8000636:	b002      	add	sp, #8
 8000638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800063c:	b002      	add	sp, #8
 800063e:	4770      	bx	lr
			if (HAL_UART_GetState(logPort) == HAL_UART_STATE_BUSY_RX) break;
 8000640:	6820      	ldr	r0, [r4, #0]
 8000642:	f004 fe35 	bl	80052b0 <HAL_UART_GetState>
 8000646:	2822      	cmp	r0, #34	; 0x22
			HAL_Delay(1);
 8000648:	f04f 0001 	mov.w	r0, #1
			if (HAL_UART_GetState(logPort) == HAL_UART_STATE_BUSY_RX) break;
 800064c:	d0f3      	beq.n	8000636 <Logger+0x5e>
			HAL_Delay(1);
 800064e:	f001 fe55 	bl	80022fc <HAL_Delay>
		while (HAL_UART_GetState(logPort) != HAL_UART_STATE_READY) {
 8000652:	6820      	ldr	r0, [r4, #0]
 8000654:	f004 fe2c 	bl	80052b0 <HAL_UART_GetState>
 8000658:	2820      	cmp	r0, #32
 800065a:	d1f1      	bne.n	8000640 <Logger+0x68>
}
 800065c:	b002      	add	sp, #8
 800065e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000662:	b002      	add	sp, #8
 8000664:	4770      	bx	lr
	if (addTime) dl = sec_to_str(buff);
 8000666:	4630      	mov	r0, r6
 8000668:	f001 f984 	bl	8001974 <sec_to_str>
 800066c:	4604      	mov	r4, r0
 800066e:	e7bd      	b.n	80005ec <Logger+0x14>
 8000670:	20000110 	.word	0x20000110
 8000674:	08005e8c 	.word	0x08005e8c
 8000678:	2000002d 	.word	0x2000002d
 800067c:	20000044 	.word	0x20000044
 8000680:	20000564 	.word	0x20000564

08000684 <HAL_FLASH_EndOfOperationCallback>:
	return ret;
}
//----------------------------------------------------------------------
void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
	if (bootMode) progDone = true;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <HAL_FLASH_EndOfOperationCallback+0x10>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b113      	cbz	r3, 8000690 <HAL_FLASH_EndOfOperationCallback+0xc>
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_FLASH_EndOfOperationCallback+0x14>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	2000097c 	.word	0x2000097c
 8000698:	20000518 	.word	0x20000518

0800069c <dmaCB>:
//----------------------------------------------------------------------
void dmaCB(DMA_HandleTypeDef *dmem)
{
	if (dmem == dmaMem) dmaDone = true;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <dmaCB+0x14>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4283      	cmp	r3, r0
 80006a2:	d000      	beq.n	80006a6 <dmaCB+0xa>
}
 80006a4:	4770      	bx	lr
	if (dmem == dmaMem) dmaDone = true;
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <dmaCB+0x18>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000003c 	.word	0x2000003c
 80006b4:	20000100 	.word	0x20000100

080006b8 <flash_erase>:
//----------------------------------------------------------------------
void flash_erase(uint8_t sector)
{
 80006b8:	b500      	push	{lr}
uint32_t error = 0;
 80006ba:	2300      	movs	r3, #0
{
 80006bc:	b087      	sub	sp, #28

FLASH_EraseInitTypeDef FLASH_EraseInitStruct =
 80006be:	2101      	movs	r1, #1
 80006c0:	2202      	movs	r2, #2
 80006c2:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80006c6:	e9cd 3300 	strd	r3, r3, [sp]
 80006ca:	e9cd 1204 	strd	r1, r2, [sp, #16]
	.Sector = (uint32_t)sector,
	.NbSectors = 1,
	.VoltageRange = FLASH_VOLTAGE_RANGE_3
};

    if (HAL_FLASH_Unlock() != HAL_OK) {
 80006ce:	f002 fa77 	bl	8002bc0 <HAL_FLASH_Unlock>
 80006d2:	b138      	cbz	r0, 80006e4 <flash_erase+0x2c>
    	devError |= devFlash;
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <flash_erase+0x4c>)
 80006d6:	6813      	ldr	r3, [r2, #0]
 80006d8:	f043 030c 	orr.w	r3, r3, #12
 80006dc:	6013      	str	r3, [r2, #0]
    }

    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error) != HAL_OK) devError |= devFlash;

    HAL_FLASH_Lock();
}
 80006de:	b007      	add	sp, #28
 80006e0:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error) != HAL_OK) devError |= devFlash;
 80006e4:	a801      	add	r0, sp, #4
 80006e6:	4669      	mov	r1, sp
 80006e8:	f002 fb64 	bl	8002db4 <HAL_FLASHEx_Erase>
 80006ec:	b120      	cbz	r0, 80006f8 <flash_erase+0x40>
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <flash_erase+0x4c>)
 80006f0:	6813      	ldr	r3, [r2, #0]
 80006f2:	f043 030c 	orr.w	r3, r3, #12
 80006f6:	6013      	str	r3, [r2, #0]
    HAL_FLASH_Lock();
 80006f8:	f002 fa76 	bl	8002be8 <HAL_FLASH_Lock>
}
 80006fc:	b007      	add	sp, #28
 80006fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000702:	bf00      	nop
 8000704:	20000564 	.word	0x20000564

08000708 <flash_write>:
//----------------------------------------------------------------------
uint8_t flash_write(volatile uint32_t *address, uint32_t *data, uint16_t size)
{
 8000708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800070c:	4607      	mov	r7, r0
 800070e:	460d      	mov	r5, r1
 8000710:	4616      	mov	r6, r2
	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000712:	f002 fa55 	bl	8002bc0 <HAL_FLASH_Unlock>
 8000716:	b9f0      	cbnz	r0, 8000756 <flash_write+0x4e>
		devError |= devFlash;
		return 1;
	}

	for (int i = 0; i < size; i++) {
 8000718:	4680      	mov	r8, r0
 800071a:	b336      	cbz	r6, 800076a <flash_write+0x62>
 800071c:	3d04      	subs	r5, #4
 800071e:	4604      	mov	r4, r0
 8000720:	e001      	b.n	8000726 <flash_write+0x1e>
 8000722:	42b4      	cmp	r4, r6
 8000724:	d021      	beq.n	800076a <flash_write+0x62>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (*address) + (i * 4), data[i]) != HAL_OK) {
 8000726:	6839      	ldr	r1, [r7, #0]
 8000728:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800072c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8000730:	2300      	movs	r3, #0
 8000732:	2002      	movs	r0, #2
	for (int i = 0; i < size; i++) {
 8000734:	3401      	adds	r4, #1
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (*address) + (i * 4), data[i]) != HAL_OK) {
 8000736:	f002 fa8b 	bl	8002c50 <HAL_FLASH_Program>
 800073a:	2800      	cmp	r0, #0
 800073c:	d0f1      	beq.n	8000722 <flash_write+0x1a>
			devError |= devFlash;
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <flash_write+0x6c>)
 8000740:	6813      	ldr	r3, [r2, #0]
			HAL_FLASH_Lock();
 8000742:	f04f 0801 	mov.w	r8, #1
			devError |= devFlash;
 8000746:	f043 030c 	orr.w	r3, r3, #12
 800074a:	6013      	str	r3, [r2, #0]
			HAL_FLASH_Lock();
 800074c:	f002 fa4c 	bl	8002be8 <HAL_FLASH_Lock>
	}

	HAL_FLASH_Lock();

	return 0;
}
 8000750:	4640      	mov	r0, r8
 8000752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		devError |= devFlash;
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <flash_write+0x6c>)
 8000758:	6813      	ldr	r3, [r2, #0]
		return 1;
 800075a:	f04f 0801 	mov.w	r8, #1
		devError |= devFlash;
 800075e:	f043 030c 	orr.w	r3, r3, #12
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	4640      	mov	r0, r8
 8000766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	HAL_FLASH_Lock();
 800076a:	f002 fa3d 	bl	8002be8 <HAL_FLASH_Lock>
}
 800076e:	4640      	mov	r0, r8
 8000770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000774:	20000564 	.word	0x20000564

08000778 <progBlk>:
//----------------------------------------------------------------------
uint8_t progBlk(uint32_t faddr, const uint8_t *buf, int len)
{
 8000778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8000878 <progBlk+0x100>
 8000782:	9005      	str	r0, [sp, #20]
 8000784:	4617      	mov	r7, r2
uint8_t ret = 1;

	int8_t sector = addr2Sector(faddr);
 8000786:	4603      	mov	r3, r0
 8000788:	2100      	movs	r1, #0
 800078a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 800078e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8000792:	e003      	b.n	800079c <progBlk+0x24>
 8000794:	f8d4 6001 	ldr.w	r6, [r4, #1]
 8000798:	f8d4 4005 	ldr.w	r4, [r4, #5]
	for (i = 0; i < MAX_FLASH_SECTOR; i++) {
 800079c:	fa4f f881 	sxtb.w	r8, r1
		if ( (adr >= sadr) && (adr < eadr) ) {
 80007a0:	3101      	adds	r1, #1
		uint32_t eadr = sadr + allFlash[i].len;
 80007a2:	19a5      	adds	r5, r4, r6
		if ( (adr >= sadr) && (adr < eadr) ) {
 80007a4:	42b3      	cmp	r3, r6
 80007a6:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 80007aa:	4464      	add	r4, ip
 80007ac:	d301      	bcc.n	80007b2 <progBlk+0x3a>
 80007ae:	42ab      	cmp	r3, r5
 80007b0:	d311      	bcc.n	80007d6 <progBlk+0x5e>
	for (i = 0; i < MAX_FLASH_SECTOR; i++) {
 80007b2:	2908      	cmp	r1, #8
 80007b4:	d1ee      	bne.n	8000794 <progBlk+0x1c>
	Logger(__func__, true, "Addr 0x%X location in #%d sector%s", faddr, sector, eol);
 80007b6:	4928      	ldr	r1, [pc, #160]	; (8000858 <progBlk+0xe0>)
 80007b8:	4a28      	ldr	r2, [pc, #160]	; (800085c <progBlk+0xe4>)
 80007ba:	6809      	ldr	r1, [r1, #0]
 80007bc:	9101      	str	r1, [sp, #4]
 80007be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007c2:	9100      	str	r1, [sp, #0]
 80007c4:	4826      	ldr	r0, [pc, #152]	; (8000860 <progBlk+0xe8>)
 80007c6:	2101      	movs	r1, #1
 80007c8:	f7ff ff06 	bl	80005d8 <Logger>
uint8_t ret = 1;
 80007cc:	2401      	movs	r4, #1
		else
			Logger(NULL, false, "done. ret=%u. %u ms (Err=%d)%s", ret, HAL_GetTick() - ts, devError, eol);
	}

	return ret;
}
 80007ce:	4620      	mov	r0, r4
 80007d0:	b006      	add	sp, #24
 80007d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Logger(__func__, true, "Addr 0x%X location in #%d sector%s", faddr, sector, eol);
 80007d6:	4e20      	ldr	r6, [pc, #128]	; (8000858 <progBlk+0xe0>)
 80007d8:	f8cd 8000 	str.w	r8, [sp]
 80007dc:	6832      	ldr	r2, [r6, #0]
 80007de:	4820      	ldr	r0, [pc, #128]	; (8000860 <progBlk+0xe8>)
 80007e0:	9201      	str	r2, [sp, #4]
 80007e2:	2101      	movs	r1, #1
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <progBlk+0xe4>)
 80007e6:	f7ff fef7 	bl	80005d8 <Logger>
		uint32_t ts = HAL_GetTick();
 80007ea:	f001 fd81 	bl	80022f0 <HAL_GetTick>
		Logger(__func__, true, "Write %u bytes to sector #%d from addr=0x%X...",
 80007ee:	9b05      	ldr	r3, [sp, #20]
 80007f0:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <progBlk+0xec>)
 80007f2:	e9cd 8300 	strd	r8, r3, [sp]
 80007f6:	2101      	movs	r1, #1
 80007f8:	463b      	mov	r3, r7
		uint32_t ts = HAL_GetTick();
 80007fa:	4605      	mov	r5, r0
		Logger(__func__, true, "Write %u bytes to sector #%d from addr=0x%X...",
 80007fc:	4818      	ldr	r0, [pc, #96]	; (8000860 <progBlk+0xe8>)
 80007fe:	f7ff feeb 	bl	80005d8 <Logger>
		if (!flash_write(&faddr, (uint32_t *)vrem, len / sizeof(uint32_t))) ret = 0;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <progBlk+0xf0>)
 8000804:	f3c7 028f 	ubfx	r2, r7, #2, #16
 8000808:	6819      	ldr	r1, [r3, #0]
 800080a:	a805      	add	r0, sp, #20
 800080c:	f7ff ff7c 	bl	8000708 <flash_write>
 8000810:	4604      	mov	r4, r0
 8000812:	b968      	cbnz	r0, 8000830 <progBlk+0xb8>
			Logger(NULL, false, "done. %u ms%s", HAL_GetTick() - ts, eol);
 8000814:	f001 fd6c 	bl	80022f0 <HAL_GetTick>
 8000818:	6833      	ldr	r3, [r6, #0]
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <progBlk+0xf4>)
 800081e:	1b43      	subs	r3, r0, r5
 8000820:	4621      	mov	r1, r4
 8000822:	4620      	mov	r0, r4
 8000824:	f7ff fed8 	bl	80005d8 <Logger>
}
 8000828:	4620      	mov	r0, r4
 800082a:	b006      	add	sp, #24
 800082c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			Logger(NULL, false, "done. ret=%u. %u ms (Err=%d)%s", ret, HAL_GetTick() - ts, devError, eol);
 8000830:	f001 fd5e 	bl	80022f0 <HAL_GetTick>
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <progBlk+0xf8>)
 8000836:	6832      	ldr	r2, [r6, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	9202      	str	r2, [sp, #8]
 800083c:	1b40      	subs	r0, r0, r5
 800083e:	2100      	movs	r1, #0
 8000840:	e9cd 0300 	strd	r0, r3, [sp]
 8000844:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <progBlk+0xfc>)
 8000846:	4608      	mov	r0, r1
 8000848:	2301      	movs	r3, #1
 800084a:	f7ff fec5 	bl	80005d8 <Logger>
uint8_t ret = 1;
 800084e:	2401      	movs	r4, #1
}
 8000850:	4620      	mov	r0, r4
 8000852:	b006      	add	sp, #24
 8000854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000858:	20000040 	.word	0x20000040
 800085c:	08005ec4 	.word	0x08005ec4
 8000860:	0800608c 	.word	0x0800608c
 8000864:	08005ee8 	.word	0x08005ee8
 8000868:	2000055c 	.word	0x2000055c
 800086c:	08005eb4 	.word	0x08005eb4
 8000870:	20000564 	.word	0x20000564
 8000874:	08005e94 	.word	0x08005e94
 8000878:	0800609c 	.word	0x0800609c

0800087c <doAPI>:
//----------------------------------------------------------------------
uint32_t doAPI(uint32_t *aRet)
{
 800087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000880:	ed2d 8b02 	vpush	{d8}
uint32_t tim = 0;
bool loop = true;
bool dstop = false;
uint32_t blk_len = MAX_VREM_BUF;
char *uk = NULL;
unsigned int fsize = hdr.len;
 8000884:	f8df a268 	ldr.w	sl, [pc, #616]	; 8000af0 <doAPI+0x274>
uint32_t ret = 0, txRet = *aRet;
 8000888:	6803      	ldr	r3, [r0, #0]
				}
				else
				if (check_tmr10(tim)) devError |= devTimeout;
			break;
		}
		if (devError) loop = false;
 800088a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8000af4 <doAPI+0x278>
{
 800088e:	b091      	sub	sp, #68	; 0x44
	action = do_none;
 8000890:	2400      	movs	r4, #0
uint32_t ret = 0, txRet = *aRet;
 8000892:	9306      	str	r3, [sp, #24]
unsigned int fsize = hdr.len;
 8000894:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000898:	9307      	str	r3, [sp, #28]
unsigned int fcrc = hdr.crc;
 800089a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800089e:	9308      	str	r3, [sp, #32]
unsigned int fadr = hdr.adr;
 80008a0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80008a4:	9309      	str	r3, [sp, #36]	; 0x24
	action = do_none;
 80008a6:	4b7f      	ldr	r3, [pc, #508]	; (8000aa4 <doAPI+0x228>)
{
 80008a8:	900a      	str	r0, [sp, #40]	; 0x28
				tim = get_tmr10(_30s);
 80008aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
	action = do_none;
 80008ae:	701c      	strb	r4, [r3, #0]
				tim = get_tmr10(_30s);
 80008b0:	f000 fca4 	bl	80011fc <get_tmr10>
		if (devError) loop = false;
 80008b4:	f8d9 3000 	ldr.w	r3, [r9]
 80008b8:	b1a3      	cbz	r3, 80008e4 <doAPI+0x68>
	}

	blkRdy = 1;
 80008ba:	4a7b      	ldr	r2, [pc, #492]	; (8000aa8 <doAPI+0x22c>)
	startAPI = false;
 80008bc:	4b7b      	ldr	r3, [pc, #492]	; (8000aac <doAPI+0x230>)
 80008be:	9404      	str	r4, [sp, #16]
	blkRdy = 1;
 80008c0:	2101      	movs	r1, #1
 80008c2:	7011      	strb	r1, [r2, #0]
	startAPI = false;
 80008c4:	701c      	strb	r4, [r3, #0]
	if (!dstop) {
		HAL_UART_DMAStop(uartPort);
 80008c6:	4c7a      	ldr	r4, [pc, #488]	; (8000ab0 <doAPI+0x234>)
 80008c8:	6820      	ldr	r0, [r4, #0]
 80008ca:	f004 fa17 	bl	8004cfc <HAL_UART_DMAStop>
		HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 80008ce:	6820      	ldr	r0, [r4, #0]
 80008d0:	4978      	ldr	r1, [pc, #480]	; (8000ab4 <doAPI+0x238>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	f004 f9a6 	bl	8004c24 <HAL_UART_Receive_IT>
	}

	return ret;
}
 80008d8:	9804      	ldr	r0, [sp, #16]
 80008da:	b011      	add	sp, #68	; 0x44
 80008dc:	ecbd 8b02 	vpop	{d8}
 80008e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008e4:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8000aa8 <doAPI+0x22c>
		if (devError) loop = false;
 80008e8:	9304      	str	r3, [sp, #16]
 80008ea:	4605      	mov	r5, r0
 80008ec:	930c      	str	r3, [sp, #48]	; 0x30
					if (apiCmd == apiProg) {// 'prog:1024:0x12cdc0a5'
 80008ee:	4e72      	ldr	r6, [pc, #456]	; (8000ab8 <doAPI+0x23c>)
				if (startAPI) {
 80008f0:	4b6e      	ldr	r3, [pc, #440]	; (8000aac <doAPI+0x230>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d072      	beq.n	80009e2 <doAPI+0x166>
					if (apiCmd == apiProg) {// 'prog:1024:0x12cdc0a5'
 80008fc:	f996 3000 	ldrsb.w	r3, [r6]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d15e      	bne.n	80009c2 <doAPI+0x146>
						if (file_size >= MAX_VREM_BUF) {
 8000904:	4b6d      	ldr	r3, [pc, #436]	; (8000abc <doAPI+0x240>)
						action = do_prog;
 8000906:	4967      	ldr	r1, [pc, #412]	; (8000aa4 <doAPI+0x228>)
						if (file_size >= MAX_VREM_BUF) {
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	920d      	str	r2, [sp, #52]	; 0x34
 800090c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
						action = do_prog;
 8000910:	f04f 0201 	mov.w	r2, #1
 8000914:	700a      	strb	r2, [r1, #0]
						if (file_size >= MAX_VREM_BUF) {
 8000916:	f080 8256 	bcs.w	8000dc6 <doAPI+0x54a>
						if (blk_len > 0) {
 800091a:	2b00      	cmp	r3, #0
 800091c:	f000 80ba 	beq.w	8000a94 <doAPI+0x218>
 8000920:	4698      	mov	r8, r3
	if (!file_size || !apiAddr) return;
 8000922:	4a67      	ldr	r2, [pc, #412]	; (8000ac0 <doAPI+0x244>)
 8000924:	6815      	ldr	r5, [r2, #0]
 8000926:	2d00      	cmp	r5, #0
 8000928:	f000 82c2 	beq.w	8000eb0 <doAPI+0x634>
	uint32_t eadr = sadr + file_size - 1;
 800092c:	195f      	adds	r7, r3, r5
 800092e:	2200      	movs	r2, #0
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 8000930:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8000af8 <doAPI+0x27c>
	uint32_t eadr = sadr + file_size - 1;
 8000934:	3f01      	subs	r7, #1
	uint32_t len = 0;
 8000936:	4694      	mov	ip, r2
	uint32_t eadr = sadr + file_size - 1;
 8000938:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800093c:	e00c      	b.n	8000958 <doAPI+0xdc>
				needErase[i] = 1;
 800093e:	4861      	ldr	r0, [pc, #388]	; (8000ac4 <doAPI+0x248>)
 8000940:	f04f 0401 	mov.w	r4, #1
 8000944:	5414      	strb	r4, [r2, r0]
				len += allFlash[i].len;
 8000946:	448c      	add	ip, r1
	for (uint8_t i = 0; i < MAX_FLASH_SECTOR; i++) {
 8000948:	3201      	adds	r2, #1
 800094a:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 800094e:	2a08      	cmp	r2, #8
 8000950:	4471      	add	r1, lr
 8000952:	d014      	beq.n	800097e <doAPI+0x102>
 8000954:	f8d1 0001 	ldr.w	r0, [r1, #1]
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 8000958:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		if (allFlash[i].adr >= sadr) {
 800095c:	4285      	cmp	r5, r0
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 800095e:	4471      	add	r1, lr
 8000960:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
		if (allFlash[i].adr >= sadr) {
 8000964:	d8f0      	bhi.n	8000948 <doAPI+0xcc>
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 8000966:	f8d1 1005 	ldr.w	r1, [r1, #5]
 800096a:	440c      	add	r4, r1
 800096c:	42a7      	cmp	r7, r4
				if (file_size < (len +allFlash[i].len)) {
 800096e:	eb01 000c 	add.w	r0, r1, ip
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 8000972:	d2e4      	bcs.n	800093e <doAPI+0xc2>
				if (file_size < (len +allFlash[i].len)) {
 8000974:	4283      	cmp	r3, r0
 8000976:	d2e7      	bcs.n	8000948 <doAPI+0xcc>
					needErase[i] = 1;
 8000978:	4b52      	ldr	r3, [pc, #328]	; (8000ac4 <doAPI+0x248>)
 800097a:	2101      	movs	r1, #1
 800097c:	5499      	strb	r1, [r3, r2]
					break;
 800097e:	4b52      	ldr	r3, [pc, #328]	; (8000ac8 <doAPI+0x24c>)
	uint32_t eadr = sadr + file_size - 1;
 8000980:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8000984:	2700      	movs	r7, #0
 8000986:	46b8      	mov	r8, r7
 8000988:	4c50      	ldr	r4, [pc, #320]	; (8000acc <doAPI+0x250>)
			Logger(__func__, true, "Erase sector #%u%s", i, eol);
 800098a:	4a51      	ldr	r2, [pc, #324]	; (8000ad0 <doAPI+0x254>)
 800098c:	9305      	str	r3, [sp, #20]
	uint32_t eadr = sadr + file_size - 1;
 800098e:	461f      	mov	r7, r3
 8000990:	e005      	b.n	800099e <doAPI+0x122>
	for (uint8_t i = 0; i < MAX_FLASH_SECTOR; i++) {
 8000992:	f108 0801 	add.w	r8, r8, #1
 8000996:	f1b8 0f08 	cmp.w	r8, #8
 800099a:	f000 823d 	beq.w	8000e18 <doAPI+0x59c>
		if (needErase[i]) {
 800099e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80009a2:	fa5f f588 	uxtb.w	r5, r8
 80009a6:	2900      	cmp	r1, #0
 80009a8:	d0f3      	beq.n	8000992 <doAPI+0x116>
			Logger(__func__, true, "Erase sector #%u%s", i, eol);
 80009aa:	6839      	ldr	r1, [r7, #0]
 80009ac:	4849      	ldr	r0, [pc, #292]	; (8000ad4 <doAPI+0x258>)
 80009ae:	9100      	str	r1, [sp, #0]
 80009b0:	4643      	mov	r3, r8
 80009b2:	2101      	movs	r1, #1
 80009b4:	f7ff fe10 	bl	80005d8 <Logger>
			flash_erase(i);
 80009b8:	4628      	mov	r0, r5
 80009ba:	f7ff fe7d 	bl	80006b8 <flash_erase>
 80009be:	4a44      	ldr	r2, [pc, #272]	; (8000ad0 <doAPI+0x254>)
 80009c0:	e7e7      	b.n	8000992 <doAPI+0x116>
					} else if (apiCmd == apiRead) {
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	f000 809a 	beq.w	8000afc <doAPI+0x280>
					} else if (apiCmd == apiStop) {
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d00f      	beq.n	80009ec <doAPI+0x170>
					} else if (apiCmd == apiSwitch) {
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d056      	beq.n	8000a7e <doAPI+0x202>
				} else if (apiCmd == apiDone) {
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d054      	beq.n	8000a7e <doAPI+0x202>
				} else devError |= devCmd;
 80009d4:	f8d9 3000 	ldr.w	r3, [r9]
 80009d8:	f043 030a 	orr.w	r3, r3, #10
 80009dc:	f8c9 3000 	str.w	r3, [r9]
		if (devError) loop = false;
 80009e0:	e04d      	b.n	8000a7e <doAPI+0x202>
				} else if (check_tmr10(tim)) {
 80009e2:	4628      	mov	r0, r5
 80009e4:	f000 fc10 	bl	8001208 <check_tmr10>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d142      	bne.n	8000a72 <doAPI+0x1f6>
		if (devError) loop = false;
 80009ec:	f8d9 3000 	ldr.w	r3, [r9]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d144      	bne.n	8000a7e <doAPI+0x202>
 80009f4:	e77c      	b.n	80008f0 <doAPI+0x74>
					if (blkRdy) {
 80009f6:	f89b 3000 	ldrb.w	r3, [fp]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 825b 	beq.w	8000eb6 <doAPI+0x63a>
						apiAddrCur += blk_len;
 8000a00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
						apiCrc = crc32(apiCrc, vrem, blk_len);
 8000a02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
						apiAddrCur += blk_len;
 8000a04:	682b      	ldr	r3, [r5, #0]
						apiCrc = crc32(apiCrc, vrem, blk_len);
 8000a06:	6811      	ldr	r1, [r2, #0]
 8000a08:	4a33      	ldr	r2, [pc, #204]	; (8000ad8 <doAPI+0x25c>)
						apiAddrCur += blk_len;
 8000a0a:	4423      	add	r3, r4
						apiCrc = crc32(apiCrc, vrem, blk_len);
 8000a0c:	6810      	ldr	r0, [r2, #0]
						apiAddrCur += blk_len;
 8000a0e:	602b      	str	r3, [r5, #0]
						apiCrc = crc32(apiCrc, vrem, blk_len);
 8000a10:	4622      	mov	r2, r4
						blkRdy = 0;
 8000a12:	f04f 0500 	mov.w	r5, #0
 8000a16:	f88b 5000 	strb.w	r5, [fp]
						apiCrc = crc32(apiCrc, vrem, blk_len);
 8000a1a:	f7ff fdb5 	bl	8000588 <crc32>
 8000a1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ad8 <doAPI+0x25c>)
						if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 8000a20:	492e      	ldr	r1, [pc, #184]	; (8000adc <doAPI+0x260>)
						apiCrc = crc32(apiCrc, vrem, blk_len);
 8000a22:	6010      	str	r0, [r2, #0]
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);
 8000a24:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <doAPI+0x264>)
						if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 8000a26:	482f      	ldr	r0, [pc, #188]	; (8000ae4 <doAPI+0x268>)
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);
 8000a28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a2c:	6193      	str	r3, [r2, #24]
						if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 8000a2e:	f004 fdfc 	bl	800562a <strstr>
						txRet += blk_len;
 8000a32:	44a0      	add	r8, r4
						if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 8000a34:	b100      	cbz	r0, 8000a38 <doAPI+0x1bc>
 8000a36:	7005      	strb	r5, [r0, #0]
						Logger(__func__, true, "Received ack '%s' from client%s", tmp, eol);
 8000a38:	9b05      	ldr	r3, [sp, #20]
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <doAPI+0x26c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <doAPI+0x270>)
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <doAPI+0x268>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	f7ff fdc7 	bl	80005d8 <Logger>
						if (txRet < hdr.len) {
 8000a4a:	f8da 5008 	ldr.w	r5, [sl, #8]
 8000a4e:	4545      	cmp	r5, r8
 8000a50:	f240 8257 	bls.w	8000f02 <doAPI+0x686>
 8000a54:	4643      	mov	r3, r8
							if ((txRet + blk_len) > hdr.len) {
 8000a56:	4423      	add	r3, r4
 8000a58:	429d      	cmp	r5, r3
 8000a5a:	ee08 7a10 	vmov	s16, r7
 8000a5e:	f8cd 8018 	str.w	r8, [sp, #24]
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000a62:	4638      	mov	r0, r7
							if ((txRet + blk_len) > hdr.len) {
 8000a64:	f0c0 8240 	bcc.w	8000ee8 <doAPI+0x66c>
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000a68:	f000 fbce 	bl	8001208 <check_tmr10>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	f000 8097 	beq.w	8000ba0 <doAPI+0x324>
				if (check_tmr10(tim)) devError |= devTimeout;
 8000a72:	f8d9 3000 	ldr.w	r3, [r9]
 8000a76:	f043 0306 	orr.w	r3, r3, #6
 8000a7a:	f8c9 3000 	str.w	r3, [r9]
	blkRdy = 1;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f88b 2000 	strb.w	r2, [fp]
	startAPI = false;
 8000a84:	4a09      	ldr	r2, [pc, #36]	; (8000aac <doAPI+0x230>)
 8000a86:	2300      	movs	r3, #0
 8000a88:	7013      	strb	r3, [r2, #0]
	if (!dstop) {
 8000a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f47f af23 	bne.w	80008d8 <doAPI+0x5c>
 8000a92:	e718      	b.n	80008c6 <doAPI+0x4a>
							devError |= devProg;
 8000a94:	f8d9 3000 	ldr.w	r3, [r9]
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	f8c9 3000 	str.w	r3, [r9]
		if (devError) loop = false;
 8000aa0:	e7ed      	b.n	8000a7e <doAPI+0x202>
 8000aa2:	bf00      	nop
 8000aa4:	200000dc 	.word	0x200000dc
 8000aa8:	20000038 	.word	0x20000038
 8000aac:	2000056e 	.word	0x2000056e
 8000ab0:	20000048 	.word	0x20000048
 8000ab4:	20000982 	.word	0x20000982
 8000ab8:	2000002c 	.word	0x2000002c
 8000abc:	2000010c 	.word	0x2000010c
 8000ac0:	20000024 	.word	0x20000024
 8000ac4:	20000510 	.word	0x20000510
 8000ac8:	20000040 	.word	0x20000040
 8000acc:	2000050f 	.word	0x2000050f
 8000ad0:	08005f18 	.word	0x08005f18
 8000ad4:	0800607c 	.word	0x0800607c
 8000ad8:	200000e0 	.word	0x200000e0
 8000adc:	08006030 	.word	0x08006030
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	2000051c 	.word	0x2000051c
 8000ae8:	08005fc0 	.word	0x08005fc0
 8000aec:	08006094 	.word	0x08006094
 8000af0:	20000d98 	.word	0x20000d98
 8000af4:	20000564 	.word	0x20000564
 8000af8:	0800609c 	.word	0x0800609c
						if (action == do_prog) {
 8000afc:	4bb3      	ldr	r3, [pc, #716]	; (8000dcc <doAPI+0x550>)
 8000afe:	920d      	str	r2, [sp, #52]	; 0x34
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	f000 8219 	beq.w	8000f3a <doAPI+0x6be>
						} else action |= do_read;
 8000b08:	4ab0      	ldr	r2, [pc, #704]	; (8000dcc <doAPI+0x550>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	7013      	strb	r3, [r2, #0]
						sprintf(tmp, "ready:0x%08X:0x%08X%s", fsize, fcrc, eol);
 8000b10:	4baf      	ldr	r3, [pc, #700]	; (8000dd0 <doAPI+0x554>)
 8000b12:	9305      	str	r3, [sp, #20]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	e9dd 7307 	ldrd	r7, r3, [sp, #28]
						apiAddrCur = fadr;
 8000b1c:	4cad      	ldr	r4, [pc, #692]	; (8000dd4 <doAPI+0x558>)
						sprintf(tmp, "ready:0x%08X:0x%08X%s", fsize, fcrc, eol);
 8000b1e:	49ae      	ldr	r1, [pc, #696]	; (8000dd8 <doAPI+0x55c>)
 8000b20:	48ae      	ldr	r0, [pc, #696]	; (8000ddc <doAPI+0x560>)
						apiAddrCur = fadr;
 8000b22:	940b      	str	r4, [sp, #44]	; 0x2c
						sprintf(tmp, "ready:0x%08X:0x%08X%s", fsize, fcrc, eol);
 8000b24:	463a      	mov	r2, r7
 8000b26:	f004 fd53 	bl	80055d0 <siprintf>
						Report(NULL, false, "%s", tmp);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4bab      	ldr	r3, [pc, #684]	; (8000ddc <doAPI+0x560>)
 8000b2e:	4aac      	ldr	r2, [pc, #688]	; (8000de0 <doAPI+0x564>)
 8000b30:	4608      	mov	r0, r1
 8000b32:	f000 ff4f 	bl	80019d4 <Report>
						Logger(__func__, true, "%s", tmp);
 8000b36:	4ba9      	ldr	r3, [pc, #676]	; (8000ddc <doAPI+0x560>)
 8000b38:	4aa9      	ldr	r2, [pc, #676]	; (8000de0 <doAPI+0x564>)
 8000b3a:	48aa      	ldr	r0, [pc, #680]	; (8000de4 <doAPI+0x568>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	f7ff fd4b 	bl	80005d8 <Logger>
						blk_cnt = 0;
 8000b42:	4ba9      	ldr	r3, [pc, #676]	; (8000de8 <doAPI+0x56c>)
						apiLen = fsize;
 8000b44:	4aa9      	ldr	r2, [pc, #676]	; (8000dec <doAPI+0x570>)
						apiAddrCur = fadr;
 8000b46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000b48:	6021      	str	r1, [r4, #0]
						blk_cnt = 0;
 8000b4a:	2500      	movs	r5, #0
						tim = get_tmr10(_5s);
 8000b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
						apiLen = fsize;
 8000b50:	6017      	str	r7, [r2, #0]
						blk_cnt = 0;
 8000b52:	601d      	str	r5, [r3, #0]
						tim = get_tmr10(_5s);
 8000b54:	f000 fb52 	bl	80011fc <get_tmr10>
		if (devError) loop = false;
 8000b58:	f8d9 3000 	ldr.w	r3, [r9]
						apiLen = fsize;
 8000b5c:	463c      	mov	r4, r7
						tim = get_tmr10(_5s);
 8000b5e:	4607      	mov	r7, r0
		if (devError) loop = false;
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f040 819f 	bne.w	8000ea4 <doAPI+0x628>
 8000b66:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000b6a:	bf28      	it	cs
 8000b6c:	f44f 6480 	movcs.w	r4, #1024	; 0x400
						dstop = false;
 8000b70:	930c      	str	r3, [sp, #48]	; 0x30
 8000b72:	46a0      	mov	r8, r4
 8000b74:	ee08 7a10 	vmov	s16, r7
 8000b78:	4644      	mov	r4, r8
				if (apiCmd == apiProg) {
 8000b7a:	f996 5000 	ldrsb.w	r5, [r6]
 8000b7e:	b1c5      	cbz	r5, 8000bb2 <doAPI+0x336>
				} else if (apiCmd == apiRead) {
 8000b80:	2d01      	cmp	r5, #1
 8000b82:	f000 80fa 	beq.w	8000d7a <doAPI+0x4fe>
				} else if (apiCmd == apiStop) {
 8000b86:	2d02      	cmp	r5, #2
 8000b88:	f43f af79 	beq.w	8000a7e <doAPI+0x202>
				} else if (apiCmd == apiDone) {
 8000b8c:	2d04      	cmp	r5, #4
 8000b8e:	f43f af76 	beq.w	8000a7e <doAPI+0x202>
				} else if (check_tmr10(tim)) {
 8000b92:	ee18 0a10 	vmov	r0, s16
 8000b96:	f000 fb37 	bl	8001208 <check_tmr10>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	f47f af69 	bne.w	8000a72 <doAPI+0x1f6>
		if (devError) loop = false;
 8000ba0:	f8d9 3000 	ldr.w	r3, [r9]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f47f af6a 	bne.w	8000a7e <doAPI+0x202>
				if (apiCmd == apiProg) {
 8000baa:	f996 5000 	ldrsb.w	r5, [r6]
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d1e6      	bne.n	8000b80 <doAPI+0x304>
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 8000bb2:	4a8f      	ldr	r2, [pc, #572]	; (8000df0 <doAPI+0x574>)
					memset(vrem, 0xff, MAX_VREM_BUF);
 8000bb4:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8000e14 <doAPI+0x598>
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	6193      	str	r3, [r2, #24]
					Report(NULL, false, "ready%s", eol);
 8000bbe:	9b05      	ldr	r3, [sp, #20]
 8000bc0:	4a8c      	ldr	r2, [pc, #560]	; (8000df4 <doAPI+0x578>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	4628      	mov	r0, r5
 8000bc8:	f000 ff04 	bl	80019d4 <Report>
					memset(vrem, 0xff, MAX_VREM_BUF);
 8000bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd0:	21ff      	movs	r1, #255	; 0xff
 8000bd2:	f8d8 0000 	ldr.w	r0, [r8]
					blkRdy = 0;
 8000bd6:	f88b 5000 	strb.w	r5, [fp]
					memset(vrem, 0xff, MAX_VREM_BUF);
 8000bda:	f004 fc27 	bl	800542c <memset>
					if (blk_len < MAX_VREM_BUF) {
 8000bde:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
						uint32_t plus = blk_len % 4;
 8000be2:	bf3c      	itt	cc
 8000be4:	f004 0303 	andcc.w	r3, r4, #3
						blk_len += plus;
 8000be8:	18e4      	addcc	r4, r4, r3
					if (blk_len > MAX_VREM_BUF) blk_len = MAX_VREM_BUF;
 8000bea:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
					if (HAL_UART_Receive_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 8000bee:	4b82      	ldr	r3, [pc, #520]	; (8000df8 <doAPI+0x57c>)
 8000bf0:	f8d8 1000 	ldr.w	r1, [r8]
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	bf28      	it	cs
 8000bf8:	f44f 6480 	movcs.w	r4, #1024	; 0x400
 8000bfc:	b2a2      	uxth	r2, r4
 8000bfe:	f004 fbab 	bl	8005358 <HAL_UART_Receive_DMA>
 8000c02:	b130      	cbz	r0, 8000c12 <doAPI+0x396>
							devError |= devUART;
 8000c04:	f8d9 3000 	ldr.w	r3, [r9]
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	f8c9 3000 	str.w	r3, [r9]
		if (devError) loop = false;
 8000c10:	e735      	b.n	8000a7e <doAPI+0x202>
						tim = get_tmr10(_10s);
 8000c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c16:	f000 faf1 	bl	80011fc <get_tmr10>
		if (devError) loop = false;
 8000c1a:	f8d9 3000 	ldr.w	r3, [r9]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f47f af2d 	bne.w	8000a7e <doAPI+0x202>
 8000c24:	4607      	mov	r7, r0
				if (apiCmd == apiProg) {
 8000c26:	f996 5000 	ldrsb.w	r5, [r6]
 8000c2a:	bb05      	cbnz	r5, 8000c6e <doAPI+0x3f2>
					if (blkRdy) {
 8000c2c:	f89b 3000 	ldrb.w	r3, [fp]
						if (check_tmr10(tim)) devError |= devTimeout;
 8000c30:	4638      	mov	r0, r7
					if (blkRdy) {
 8000c32:	b32b      	cbz	r3, 8000c80 <doAPI+0x404>
						if (!progBlk(apiAddrCur, vrem, blk_len)) {//prog is OK
 8000c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000c36:	f8d8 1000 	ldr.w	r1, [r8]
 8000c3a:	6818      	ldr	r0, [r3, #0]
						blkRdy = 0;
 8000c3c:	f88b 5000 	strb.w	r5, [fp]
						if (!progBlk(apiAddrCur, vrem, blk_len)) {//prog is OK
 8000c40:	4622      	mov	r2, r4
 8000c42:	f7ff fd99 	bl	8000778 <progBlk>
						ret += blk_len;
 8000c46:	9b04      	ldr	r3, [sp, #16]
 8000c48:	4423      	add	r3, r4
 8000c4a:	ee08 7a10 	vmov	s16, r7
 8000c4e:	9304      	str	r3, [sp, #16]
						if (!progBlk(apiAddrCur, vrem, blk_len)) {//prog is OK
 8000c50:	4605      	mov	r5, r0
 8000c52:	2800      	cmp	r0, #0
 8000c54:	f000 80ff 	beq.w	8000e56 <doAPI+0x5da>
							devError |= devProg;
 8000c58:	f8d9 3000 	ldr.w	r3, [r9]
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);//OFF
 8000c5c:	4a64      	ldr	r2, [pc, #400]	; (8000df0 <doAPI+0x574>)
							devError |= devProg;
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	f8c9 3000 	str.w	r3, [r9]
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);//OFF
 8000c66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c6a:	6193      	str	r3, [r2, #24]
		if (devError) loop = false;
 8000c6c:	e707      	b.n	8000a7e <doAPI+0x202>
				} else if (apiCmd == apiRead) {
 8000c6e:	2d01      	cmp	r5, #1
 8000c70:	d011      	beq.n	8000c96 <doAPI+0x41a>
				} else if (apiCmd == apiStop) {
 8000c72:	2d02      	cmp	r5, #2
 8000c74:	f43f af03 	beq.w	8000a7e <doAPI+0x202>
				} else if (apiCmd == apiDone) {
 8000c78:	2d04      	cmp	r5, #4
 8000c7a:	f47f aeab 	bne.w	80009d4 <doAPI+0x158>
 8000c7e:	e6fe      	b.n	8000a7e <doAPI+0x202>
						if (check_tmr10(tim)) devError |= devTimeout;
 8000c80:	f000 fac2 	bl	8001208 <check_tmr10>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	f47f aef4 	bne.w	8000a72 <doAPI+0x1f6>
		if (devError) loop = false;
 8000c8a:	f8d9 3000 	ldr.w	r3, [r9]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f47f aef5 	bne.w	8000a7e <doAPI+0x202>
 8000c94:	e7c7      	b.n	8000c26 <doAPI+0x3aa>
					if (dmaDone) {
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <doAPI+0x580>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
						if (check_tmr10(tim)) devError |= devTimeout;
 8000c9a:	4638      	mov	r0, r7
					if (dmaDone) {
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0ef      	beq.n	8000c80 <doAPI+0x404>
						uartReady = false;
 8000ca0:	4f57      	ldr	r7, [pc, #348]	; (8000e00 <doAPI+0x584>)
						if (HAL_UART_Transmit_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 8000ca2:	4a55      	ldr	r2, [pc, #340]	; (8000df8 <doAPI+0x57c>)
 8000ca4:	f8d8 1000 	ldr.w	r1, [r8]
 8000ca8:	6810      	ldr	r0, [r2, #0]
						dmaDone = 0;
 8000caa:	2300      	movs	r3, #0
						uartReady = false;
 8000cac:	703b      	strb	r3, [r7, #0]
						dmaDone = 0;
 8000cae:	4f53      	ldr	r7, [pc, #332]	; (8000dfc <doAPI+0x580>)
						if (HAL_UART_Transmit_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 8000cb0:	b2a2      	uxth	r2, r4
						dmaDone = 0;
 8000cb2:	703b      	strb	r3, [r7, #0]
						if (HAL_UART_Transmit_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 8000cb4:	f003 ffe0 	bl	8004c78 <HAL_UART_Transmit_DMA>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d1a3      	bne.n	8000c04 <doAPI+0x388>
							blk_cnt++;
 8000cbc:	4f4a      	ldr	r7, [pc, #296]	; (8000de8 <doAPI+0x56c>)
							Logger(__func__, true, "send_to_client: addr=0x%X len=%u blk=%u%s",
 8000cbe:	9b05      	ldr	r3, [sp, #20]
							blk_cnt++;
 8000cc0:	6838      	ldr	r0, [r7, #0]
							Logger(__func__, true, "send_to_client: addr=0x%X len=%u blk=%u%s",
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	9400      	str	r4, [sp, #0]
							blk_cnt++;
 8000cc6:	3001      	adds	r0, #1
							Logger(__func__, true, "send_to_client: addr=0x%X len=%u blk=%u%s",
 8000cc8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8000ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000cce:	4a4d      	ldr	r2, [pc, #308]	; (8000e04 <doAPI+0x588>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
							blk_cnt++;
 8000cd2:	6038      	str	r0, [r7, #0]
							Logger(__func__, true, "send_to_client: addr=0x%X len=%u blk=%u%s",
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	4843      	ldr	r0, [pc, #268]	; (8000de4 <doAPI+0x568>)
 8000cd8:	f7ff fc7e 	bl	80005d8 <Logger>
							tim = get_tmr10(_10s);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce0:	f000 fa8c 	bl	80011fc <get_tmr10>
		if (devError) loop = false;
 8000ce4:	f8d9 3000 	ldr.w	r3, [r9]
							tim = get_tmr10(_10s);
 8000ce8:	4605      	mov	r5, r0
		if (devError) loop = false;
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f47f aec7 	bne.w	8000a7e <doAPI+0x202>
				if (apiCmd == apiRead) {
 8000cf0:	f996 3000 	ldrsb.w	r3, [r6]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	f47f ae6b 	bne.w	80009d0 <doAPI+0x154>
					if (uartReady) {
 8000cfa:	4f41      	ldr	r7, [pc, #260]	; (8000e00 <doAPI+0x584>)
 8000cfc:	783b      	ldrb	r3, [r7, #0]
						if (check_tmr10(tim)) devError |= devTimeout;
 8000cfe:	4628      	mov	r0, r5
					if (uartReady) {
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80e4 	beq.w	8000ece <doAPI+0x652>
						uartReady = false;
 8000d06:	2100      	movs	r1, #0
						memset(tmp, 0, sizeof(tmp));
 8000d08:	2240      	movs	r2, #64	; 0x40
 8000d0a:	4834      	ldr	r0, [pc, #208]	; (8000ddc <doAPI+0x560>)
						uartReady = false;
 8000d0c:	7039      	strb	r1, [r7, #0]
						blkRdy = 0;
 8000d0e:	f88b 1000 	strb.w	r1, [fp]
						memset(tmp, 0, sizeof(tmp));
 8000d12:	930e      	str	r3, [sp, #56]	; 0x38
 8000d14:	f004 fb8a 	bl	800542c <memset>
						if (HAL_UART_Receive_DMA(uartPort, (uint8_t *)tmp, (uint16_t)strlen(_next)) != HAL_OK) {
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <doAPI+0x58c>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f7ff fa60 	bl	80001e0 <strlen>
 8000d20:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <doAPI+0x57c>)
 8000d22:	492e      	ldr	r1, [pc, #184]	; (8000ddc <doAPI+0x560>)
 8000d24:	b282      	uxth	r2, r0
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	f004 fb16 	bl	8005358 <HAL_UART_Receive_DMA>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	f47f af69 	bne.w	8000c04 <doAPI+0x388>
							tim = get_tmr10(_10s);
 8000d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d36:	f000 fa61 	bl	80011fc <get_tmr10>
		if (devError) loop = false;
 8000d3a:	f8d9 3000 	ldr.w	r3, [r9]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f47f ae9d 	bne.w	8000a7e <doAPI+0x202>
 8000d44:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8000d48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8000d4c:	4607      	mov	r7, r0
				if (apiCmd == apiRead) {
 8000d4e:	f996 5000 	ldrsb.w	r5, [r6]
 8000d52:	2d01      	cmp	r5, #1
 8000d54:	f43f ae4f 	beq.w	80009f6 <doAPI+0x17a>
				} else if (apiCmd == apiDone) {
 8000d58:	3d04      	subs	r5, #4
 8000d5a:	bf18      	it	ne
 8000d5c:	2501      	movne	r5, #1
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000d5e:	4638      	mov	r0, r7
 8000d60:	f000 fa52 	bl	8001208 <check_tmr10>
 8000d64:	f8d9 3000 	ldr.w	r3, [r9]
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	f47f ae84 	bne.w	8000a76 <doAPI+0x1fa>
		if (devError) loop = false;
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f47f ae85 	bne.w	8000a7e <doAPI+0x202>
	while (loop) {
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d1ea      	bne.n	8000d4e <doAPI+0x4d2>
 8000d78:	e681      	b.n	8000a7e <doAPI+0x202>
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 8000d7a:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <doAPI+0x574>)
					Logger(__func__, true, "read_from_flash: addr=0x%X len=%u%s", (unsigned int)apiAddrCur, blk_len, eol);
 8000d7c:	4819      	ldr	r0, [pc, #100]	; (8000de4 <doAPI+0x568>)
					if (HAL_DMA_Start_IT(dmaMem, apiAddrCur, (uint32_t)vrem, blk_len) != HAL_OK) {
 8000d7e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000e14 <doAPI+0x598>
					dmaDone = 0;
 8000d82:	4f1e      	ldr	r7, [pc, #120]	; (8000dfc <doAPI+0x580>)
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	6193      	str	r3, [r2, #24]
					Logger(__func__, true, "read_from_flash: addr=0x%X len=%u%s", (unsigned int)apiAddrCur, blk_len, eol);
 8000d8a:	9b05      	ldr	r3, [sp, #20]
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	9400      	str	r4, [sp, #0]
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	9201      	str	r2, [sp, #4]
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <doAPI+0x590>)
 8000d9a:	f7ff fc1d 	bl	80005d8 <Logger>
					if (HAL_DMA_Start_IT(dmaMem, apiAddrCur, (uint32_t)vrem, blk_len) != HAL_OK) {
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <doAPI+0x594>)
 8000da0:	6829      	ldr	r1, [r5, #0]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	f8d8 2000 	ldr.w	r2, [r8]
					dmaDone = 0;
 8000da8:	2500      	movs	r5, #0
					if (HAL_DMA_Start_IT(dmaMem, apiAddrCur, (uint32_t)vrem, blk_len) != HAL_OK) {
 8000daa:	4623      	mov	r3, r4
					dmaDone = 0;
 8000dac:	703d      	strb	r5, [r7, #0]
					if (HAL_DMA_Start_IT(dmaMem, apiAddrCur, (uint32_t)vrem, blk_len) != HAL_OK) {
 8000dae:	f001 fc63 	bl	8002678 <HAL_DMA_Start_IT>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	f43f af2d 	beq.w	8000c12 <doAPI+0x396>
						devError |= devDma;
 8000db8:	f8d9 3000 	ldr.w	r3, [r9]
 8000dbc:	f043 030b 	orr.w	r3, r3, #11
 8000dc0:	f8c9 3000 	str.w	r3, [r9]
		if (devError) loop = false;
 8000dc4:	e65b      	b.n	8000a7e <doAPI+0x202>
							blk_len = MAX_VREM_BUF;
 8000dc6:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8000dca:	e5aa      	b.n	8000922 <doAPI+0xa6>
 8000dcc:	200000dc 	.word	0x200000dc
 8000dd0:	20000040 	.word	0x20000040
 8000dd4:	20000028 	.word	0x20000028
 8000dd8:	08005f50 	.word	0x08005f50
 8000ddc:	2000051c 	.word	0x2000051c
 8000de0:	080065a4 	.word	0x080065a4
 8000de4:	08006094 	.word	0x08006094
 8000de8:	200000fc 	.word	0x200000fc
 8000dec:	200000f4 	.word	0x200000f4
 8000df0:	40020400 	.word	0x40020400
 8000df4:	08005f68 	.word	0x08005f68
 8000df8:	20000048 	.word	0x20000048
 8000dfc:	20000100 	.word	0x20000100
 8000e00:	2000004c 	.word	0x2000004c
 8000e04:	08005f94 	.word	0x08005f94
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	08005f70 	.word	0x08005f70
 8000e10:	2000003c 	.word	0x2000003c
 8000e14:	2000055c 	.word	0x2000055c
 8000e18:	4b8b      	ldr	r3, [pc, #556]	; (8001048 <doAPI+0x7cc>)
 8000e1a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000e1e:	681d      	ldr	r5, [r3, #0]
 8000e20:	4b8a      	ldr	r3, [pc, #552]	; (800104c <doAPI+0x7d0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
							Logger(__func__, true, "FILE_SIZE: 0x%X  FILE_CRC: 0x%X%s",
 8000e24:	4a8a      	ldr	r2, [pc, #552]	; (8001050 <doAPI+0x7d4>)
							apiAddrCur = apiAddr;
 8000e26:	4c8b      	ldr	r4, [pc, #556]	; (8001054 <doAPI+0x7d8>)
							Logger(__func__, true, "FILE_SIZE: 0x%X  FILE_CRC: 0x%X%s",
 8000e28:	6811      	ldr	r1, [r2, #0]
 8000e2a:	9a05      	ldr	r2, [sp, #20]
 8000e2c:	488a      	ldr	r0, [pc, #552]	; (8001058 <doAPI+0x7dc>)
 8000e2e:	6812      	ldr	r2, [r2, #0]
							apiAddrCur = apiAddr;
 8000e30:	940b      	str	r4, [sp, #44]	; 0x2c
							Logger(__func__, true, "FILE_SIZE: 0x%X  FILE_CRC: 0x%X%s",
 8000e32:	e9cd 1200 	strd	r1, r2, [sp]
 8000e36:	4a89      	ldr	r2, [pc, #548]	; (800105c <doAPI+0x7e0>)
							apiAddrCur = apiAddr;
 8000e38:	6025      	str	r5, [r4, #0]
							Logger(__func__, true, "FILE_SIZE: 0x%X  FILE_CRC: 0x%X%s",
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	f7ff fbcc 	bl	80005d8 <Logger>
							tim = get_tmr10(_5s);
 8000e40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e44:	f000 f9da 	bl	80011fc <get_tmr10>
		if (devError) loop = false;
 8000e48:	f8d9 3000 	ldr.w	r3, [r9]
							tim = get_tmr10(_5s);
 8000e4c:	4607      	mov	r7, r0
		if (devError) loop = false;
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f47f ae15 	bne.w	8000a7e <doAPI+0x202>
 8000e54:	e68e      	b.n	8000b74 <doAPI+0x2f8>
							apiAddrCur += blk_len;
 8000e56:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
							api_crc = crc32(api_crc, vrem, blk_len);
 8000e58:	4a81      	ldr	r2, [pc, #516]	; (8001060 <doAPI+0x7e4>)
							apiAddrCur += blk_len;
 8000e5a:	683b      	ldr	r3, [r7, #0]
							api_crc = crc32(api_crc, vrem, blk_len);
 8000e5c:	6810      	ldr	r0, [r2, #0]
 8000e5e:	f8d8 1000 	ldr.w	r1, [r8]
							apiAddrCur += blk_len;
 8000e62:	eb03 0c04 	add.w	ip, r3, r4
							api_crc = crc32(api_crc, vrem, blk_len);
 8000e66:	4622      	mov	r2, r4
							apiAddrCur += blk_len;
 8000e68:	f8c7 c000 	str.w	ip, [r7]
							api_crc = crc32(api_crc, vrem, blk_len);
 8000e6c:	f7ff fb8c 	bl	8000588 <crc32>
							if (ret < file_size) {
 8000e70:	4b76      	ldr	r3, [pc, #472]	; (800104c <doAPI+0x7d0>)
 8000e72:	9904      	ldr	r1, [sp, #16]
 8000e74:	681b      	ldr	r3, [r3, #0]
							api_crc = crc32(api_crc, vrem, blk_len);
 8000e76:	4a7a      	ldr	r2, [pc, #488]	; (8001060 <doAPI+0x7e4>)
							if (ret < file_size) {
 8000e78:	428b      	cmp	r3, r1
							api_crc = crc32(api_crc, vrem, blk_len);
 8000e7a:	6010      	str	r0, [r2, #0]
							if (ret < file_size) {
 8000e7c:	d967      	bls.n	8000f4e <doAPI+0x6d2>
								if ((ret + blk_len) > file_size) {
 8000e7e:	190a      	adds	r2, r1, r4
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d200      	bcs.n	8000e86 <doAPI+0x60a>
									blk_len = file_size - ret;
 8000e84:	1a5c      	subs	r4, r3, r1
								Report(NULL, false, "ready%s", eol);
 8000e86:	9b05      	ldr	r3, [sp, #20]
								startAPI = true;
 8000e88:	4f76      	ldr	r7, [pc, #472]	; (8001064 <doAPI+0x7e8>)
								Report(NULL, false, "ready%s", eol);
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a76      	ldr	r2, [pc, #472]	; (8001068 <doAPI+0x7ec>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4608      	mov	r0, r1
								startAPI = true;
 8000e92:	2501      	movs	r5, #1
 8000e94:	703d      	strb	r5, [r7, #0]
								Report(NULL, false, "ready%s", eol);
 8000e96:	f000 fd9d 	bl	80019d4 <Report>
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);//OFF
 8000e9a:	4a74      	ldr	r2, [pc, #464]	; (800106c <doAPI+0x7f0>)
 8000e9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	e67d      	b.n	8000ba0 <doAPI+0x324>
	startAPI = false;
 8000ea4:	4a6f      	ldr	r2, [pc, #444]	; (8001064 <doAPI+0x7e8>)
	blkRdy = 1;
 8000ea6:	2301      	movs	r3, #1
	startAPI = false;
 8000ea8:	7015      	strb	r5, [r2, #0]
	blkRdy = 1;
 8000eaa:	f88b 3000 	strb.w	r3, [fp]
	if (!dstop) {
 8000eae:	e50a      	b.n	80008c6 <doAPI+0x4a>
 8000eb0:	4a6f      	ldr	r2, [pc, #444]	; (8001070 <doAPI+0x7f4>)
 8000eb2:	9205      	str	r2, [sp, #20]
 8000eb4:	e7b6      	b.n	8000e24 <doAPI+0x5a8>
						if (check_tmr10(tim)) devError |= devTimeout;
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	f000 f9a6 	bl	8001208 <check_tmr10>
 8000ebc:	4605      	mov	r5, r0
 8000ebe:	b188      	cbz	r0, 8000ee4 <doAPI+0x668>
 8000ec0:	f8d9 3000 	ldr.w	r3, [r9]
 8000ec4:	f043 0306 	orr.w	r3, r3, #6
 8000ec8:	f8c9 3000 	str.w	r3, [r9]
 8000ecc:	e747      	b.n	8000d5e <doAPI+0x4e2>
						if (check_tmr10(tim)) devError |= devTimeout;
 8000ece:	f000 f99b 	bl	8001208 <check_tmr10>
 8000ed2:	f8d9 3000 	ldr.w	r3, [r9]
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	f47f adcd 	bne.w	8000a76 <doAPI+0x1fa>
		if (devError) loop = false;
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f47f adce 	bne.w	8000a7e <doAPI+0x202>
 8000ee2:	e705      	b.n	8000cf0 <doAPI+0x474>
 8000ee4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000ee6:	e73a      	b.n	8000d5e <doAPI+0x4e2>
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000ee8:	f000 f98e 	bl	8001208 <check_tmr10>
 8000eec:	f8d9 3000 	ldr.w	r3, [r9]
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	f47f adc0 	bne.w	8000a76 <doAPI+0x1fa>
		if (devError) loop = false;
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f47f adc1 	bne.w	8000a7e <doAPI+0x202>
								blk_len = hdr.len - txRet;
 8000efc:	9b06      	ldr	r3, [sp, #24]
 8000efe:	1aec      	subs	r4, r5, r3
 8000f00:	e63b      	b.n	8000b7a <doAPI+0x2fe>
							*aRet = txRet;
 8000f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
							memset(tmp, 0, sizeof(tmp));
 8000f04:	485b      	ldr	r0, [pc, #364]	; (8001074 <doAPI+0x7f8>)
							*aRet = txRet;
 8000f06:	f8c3 8000 	str.w	r8, [r3]
							memset(tmp, 0, sizeof(tmp));
 8000f0a:	2240      	movs	r2, #64	; 0x40
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f004 fa8d 	bl	800542c <memset>
							if (HAL_UART_Receive_DMA(uartPort, (uint8_t *)tmp, (uint16_t)strlen(_done)) != HAL_OK) {
 8000f12:	4b59      	ldr	r3, [pc, #356]	; (8001078 <doAPI+0x7fc>)
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	f7ff f963 	bl	80001e0 <strlen>
 8000f1a:	4b58      	ldr	r3, [pc, #352]	; (800107c <doAPI+0x800>)
 8000f1c:	4955      	ldr	r1, [pc, #340]	; (8001074 <doAPI+0x7f8>)
 8000f1e:	b282      	uxth	r2, r0
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	f004 fa19 	bl	8005358 <HAL_UART_Receive_DMA>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d02d      	beq.n	8000f86 <doAPI+0x70a>
								devError |= devUART;
 8000f2a:	f8d9 3000 	ldr.w	r3, [r9]
 8000f2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	f8c9 3000 	str.w	r3, [r9]
 8000f38:	e711      	b.n	8000d5e <doAPI+0x4e2>
							fsize = file_size;
 8000f3a:	4944      	ldr	r1, [pc, #272]	; (800104c <doAPI+0x7d0>)
							fcrc = file_crc;
 8000f3c:	4a44      	ldr	r2, [pc, #272]	; (8001050 <doAPI+0x7d4>)
							fadr = apiAddr;
 8000f3e:	4b42      	ldr	r3, [pc, #264]	; (8001048 <doAPI+0x7cc>)
							fsize = file_size;
 8000f40:	6809      	ldr	r1, [r1, #0]
							fcrc = file_crc;
 8000f42:	6812      	ldr	r2, [r2, #0]
							fadr = apiAddr;
 8000f44:	681b      	ldr	r3, [r3, #0]
							fsize = file_size;
 8000f46:	9107      	str	r1, [sp, #28]
							fcrc = file_crc;
 8000f48:	9208      	str	r2, [sp, #32]
							fadr = apiAddr;
 8000f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f4c:	e5e0      	b.n	8000b10 <doAPI+0x294>
								HAL_UART_DMAStop(uartPort);
 8000f4e:	462c      	mov	r4, r5
 8000f50:	4d4a      	ldr	r5, [pc, #296]	; (800107c <doAPI+0x800>)
 8000f52:	6828      	ldr	r0, [r5, #0]
 8000f54:	f003 fed2 	bl	8004cfc <HAL_UART_DMAStop>
								startAPI = false;
 8000f58:	4b42      	ldr	r3, [pc, #264]	; (8001064 <doAPI+0x7e8>)
								HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8000f5a:	6828      	ldr	r0, [r5, #0]
 8000f5c:	4948      	ldr	r1, [pc, #288]	; (8001080 <doAPI+0x804>)
								startAPI = false;
 8000f5e:	701c      	strb	r4, [r3, #0]
								HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f003 fe5f 	bl	8004c24 <HAL_UART_Receive_IT>
								tim = get_tmr10(_10s);
 8000f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6a:	f000 f947 	bl	80011fc <get_tmr10>
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);//OFF
 8000f6e:	4a3f      	ldr	r2, [pc, #252]	; (800106c <doAPI+0x7f0>)
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	6193      	str	r3, [r2, #24]
		if (devError) loop = false;
 8000f76:	f8d9 3000 	ldr.w	r3, [r9]
								tim = get_tmr10(_10s);
 8000f7a:	4605      	mov	r5, r0
		if (devError) loop = false;
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d15c      	bne.n	800103a <doAPI+0x7be>
								dstop = true;
 8000f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f82:	930c      	str	r3, [sp, #48]	; 0x30
 8000f84:	e4b3      	b.n	80008ee <doAPI+0x72>
								tim = get_tmr10(_6s);
 8000f86:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000f8a:	f000 f937 	bl	80011fc <get_tmr10>
 8000f8e:	4604      	mov	r4, r0
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000f90:	f000 f93a 	bl	8001208 <check_tmr10>
 8000f94:	f8d9 3000 	ldr.w	r3, [r9]
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	f47f ad6c 	bne.w	8000a76 <doAPI+0x1fa>
		if (devError) loop = false;
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f47f ad6d 	bne.w	8000a7e <doAPI+0x202>
				if (blkRdy) {
 8000fa4:	f89b 3000 	ldrb.w	r3, [fp]
				if (check_tmr10(tim)) devError |= devTimeout;
 8000fa8:	4620      	mov	r0, r4
				if (blkRdy) {
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d032      	beq.n	8001014 <doAPI+0x798>
					HAL_UART_DMAStop(uartPort);
 8000fae:	4d33      	ldr	r5, [pc, #204]	; (800107c <doAPI+0x800>)
					uartReady = false;
 8000fb0:	4b34      	ldr	r3, [pc, #208]	; (8001084 <doAPI+0x808>)
					HAL_UART_DMAStop(uartPort);
 8000fb2:	6828      	ldr	r0, [r5, #0]
					blkRdy = 0;
 8000fb4:	2400      	movs	r4, #0
					uartReady = false;
 8000fb6:	701c      	strb	r4, [r3, #0]
					blkRdy = 0;
 8000fb8:	f88b 4000 	strb.w	r4, [fp]
					HAL_UART_DMAStop(uartPort);
 8000fbc:	f003 fe9e 	bl	8004cfc <HAL_UART_DMAStop>
					startAPI = false;
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <doAPI+0x7e8>)
					HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8000fc2:	492f      	ldr	r1, [pc, #188]	; (8001080 <doAPI+0x804>)
 8000fc4:	6828      	ldr	r0, [r5, #0]
					startAPI = false;
 8000fc6:	701c      	strb	r4, [r3, #0]
					HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f003 fe2b 	bl	8004c24 <HAL_UART_Receive_IT>
					if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 8000fce:	492e      	ldr	r1, [pc, #184]	; (8001088 <doAPI+0x80c>)
 8000fd0:	4828      	ldr	r0, [pc, #160]	; (8001074 <doAPI+0x7f8>)
 8000fd2:	f004 fb2a 	bl	800562a <strstr>
 8000fd6:	b100      	cbz	r0, 8000fda <doAPI+0x75e>
 8000fd8:	7004      	strb	r4, [r0, #0]
					Logger(__func__, true, "Received ack '%s' from client. Aciton '%s' done.%s",
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <doAPI+0x810>)
 8000fdc:	9a05      	ldr	r2, [sp, #20]
 8000fde:	7819      	ldrb	r1, [r3, #0]
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <doAPI+0x814>)
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fe8:	481b      	ldr	r0, [pc, #108]	; (8001058 <doAPI+0x7dc>)
 8000fea:	e9cd 3200 	strd	r3, r2, [sp]
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <doAPI+0x7f8>)
 8000ff2:	4a28      	ldr	r2, [pc, #160]	; (8001094 <doAPI+0x818>)
 8000ff4:	f7ff faf0 	bl	80005d8 <Logger>
		if (devError) loop = false;
 8000ff8:	f8d9 3000 	ldr.w	r3, [r9]
	blkRdy = 1;
 8000ffc:	2201      	movs	r2, #1
		if (devError) loop = false;
 8000ffe:	b98b      	cbnz	r3, 8001024 <doAPI+0x7a8>
	startAPI = false;
 8001000:	4918      	ldr	r1, [pc, #96]	; (8001064 <doAPI+0x7e8>)
}
 8001002:	9804      	ldr	r0, [sp, #16]
	startAPI = false;
 8001004:	700b      	strb	r3, [r1, #0]
	blkRdy = 1;
 8001006:	f88b 2000 	strb.w	r2, [fp]
}
 800100a:	b011      	add	sp, #68	; 0x44
 800100c:	ecbd 8b02 	vpop	{d8}
 8001010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (check_tmr10(tim)) devError |= devTimeout;
 8001014:	f000 f8f8 	bl	8001208 <check_tmr10>
 8001018:	2800      	cmp	r0, #0
 800101a:	f47f ad2a 	bne.w	8000a72 <doAPI+0x1f6>
		if (devError) loop = false;
 800101e:	f8d9 3000 	ldr.w	r3, [r9]
 8001022:	e7bc      	b.n	8000f9e <doAPI+0x722>
}
 8001024:	9804      	ldr	r0, [sp, #16]
	blkRdy = 1;
 8001026:	f88b 2000 	strb.w	r2, [fp]
	startAPI = false;
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <doAPI+0x7e8>)
 800102c:	2300      	movs	r3, #0
 800102e:	7013      	strb	r3, [r2, #0]
}
 8001030:	b011      	add	sp, #68	; 0x44
 8001032:	ecbd 8b02 	vpop	{d8}
 8001036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	startAPI = false;
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <doAPI+0x7e8>)
	blkRdy = 1;
 800103c:	2301      	movs	r3, #1
	startAPI = false;
 800103e:	7014      	strb	r4, [r2, #0]
	blkRdy = 1;
 8001040:	f88b 3000 	strb.w	r3, [fp]
	if (!dstop) {
 8001044:	e448      	b.n	80008d8 <doAPI+0x5c>
 8001046:	bf00      	nop
 8001048:	20000024 	.word	0x20000024
 800104c:	2000010c 	.word	0x2000010c
 8001050:	20000108 	.word	0x20000108
 8001054:	20000028 	.word	0x20000028
 8001058:	08006094 	.word	0x08006094
 800105c:	08005f2c 	.word	0x08005f2c
 8001060:	200000f8 	.word	0x200000f8
 8001064:	2000056e 	.word	0x2000056e
 8001068:	08005f68 	.word	0x08005f68
 800106c:	40020400 	.word	0x40020400
 8001070:	20000040 	.word	0x20000040
 8001074:	2000051c 	.word	0x2000051c
 8001078:	20000004 	.word	0x20000004
 800107c:	20000048 	.word	0x20000048
 8001080:	20000982 	.word	0x20000982
 8001084:	2000004c 	.word	0x2000004c
 8001088:	08006030 	.word	0x08006030
 800108c:	200000dc 	.word	0x200000dc
 8001090:	20000018 	.word	0x20000018
 8001094:	08005fe0 	.word	0x08005fe0

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	2300      	movs	r3, #0
{
 800109c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80010a2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80010aa:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4920      	ldr	r1, [pc, #128]	; (8001130 <SystemClock_Config+0x98>)
 80010b0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b2:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b6:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80010bc:	6408      	str	r0, [r1, #64]	; 0x40
 80010be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010c0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80010c4:	9101      	str	r1, [sp, #4]
 80010c6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010da:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 12;
 80010e4:	200c      	movs	r0, #12
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e8:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ec:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ee:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010f0:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010f2:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80010f4:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLM = 12;
 80010f6:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010fa:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001100:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f002 ff91 	bl	8004028 <HAL_RCC_OscConfig>
 8001106:	b108      	cbz	r0, 800110c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110a:	e7fe      	b.n	800110a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	4603      	mov	r3, r0
 800110e:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001114:	a803      	add	r0, sp, #12
 8001116:	2103      	movs	r1, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	e9cd 4304 	strd	r4, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001120:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001122:	f003 f99d 	bl	8004460 <HAL_RCC_ClockConfig>
 8001126:	b108      	cbz	r0, 800112c <SystemClock_Config+0x94>
 8001128:	b672      	cpsid	i
  while (1)
 800112a:	e7fe      	b.n	800112a <SystemClock_Config+0x92>
}
 800112c:	b015      	add	sp, #84	; 0x54
 800112e:	bd30      	pop	{r4, r5, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <hex2bin>:
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b085      	sub	sp, #20
uint8_t mas[8] = {0x30}, bt[2] = {0};
 800113c:	2400      	movs	r4, #0
 800113e:	2330      	movs	r3, #48	; 0x30
 8001140:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001144:	f8ad 4004 	strh.w	r4, [sp, #4]
    if (!len || !buf) return ret;
 8001148:	2900      	cmp	r1, #0
 800114a:	d053      	beq.n	80011f4 <hex2bin+0xbc>
 800114c:	b3c0      	cbz	r0, 80011c0 <hex2bin+0x88>
    if (len > 8) len = 8;
 800114e:	2908      	cmp	r1, #8
 8001150:	460a      	mov	r2, r1
 8001152:	bf28      	it	cs
 8001154:	2208      	movcs	r2, #8
    k = 8 - len;
 8001156:	f1c2 0308 	rsb	r3, r2, #8
    memcpy(&mas[k], buf, len);
 800115a:	4601      	mov	r1, r0
 800115c:	a802      	add	r0, sp, #8
 800115e:	fa50 f083 	uxtab	r0, r0, r3
 8001162:	f004 f955 	bl	8005410 <memcpy>
    k = j = 0;
 8001166:	4627      	mov	r7, r4
uint32_t dword, ret = 0;
 8001168:	4620      	mov	r0, r4
 800116a:	aa02      	add	r2, sp, #8
    memcpy(&mas[k], buf, len);
 800116c:	2118      	movs	r1, #24
        jk = j + 2;
 800116e:	1cbc      	adds	r4, r7, #2
 8001170:	463b      	mov	r3, r7
 8001172:	4694      	mov	ip, r2
 8001174:	b2e7      	uxtb	r7, r4
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8001176:	f81c 6b01 	ldrb.w	r6, [ip], #1
 800117a:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
 800117e:	b2ed      	uxtb	r5, r5
 8001180:	f10d 0e10 	add.w	lr, sp, #16
 8001184:	f003 0401 	and.w	r4, r3, #1
 8001188:	2d09      	cmp	r5, #9
 800118a:	4474      	add	r4, lr
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 800118c:	f1a6 0e61 	sub.w	lr, r6, #97	; 0x61
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8001190:	d818      	bhi.n	80011c4 <hex2bin+0x8c>
 8001192:	f804 5c0c 	strb.w	r5, [r4, #-12]
        for (i = j; i < jk; i++) {
 8001196:	3301      	adds	r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	42bb      	cmp	r3, r7
 800119c:	d1eb      	bne.n	8001176 <hex2bin+0x3e>
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 800119e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80011a2:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
        ret |= (dword << 8*(4 - k - 1));
 80011ae:	408b      	lsls	r3, r1
    while (k < 4) {
 80011b0:	2f08      	cmp	r7, #8
 80011b2:	f102 0202 	add.w	r2, r2, #2
        ret |= (dword << 8*(4 - k - 1));
 80011b6:	ea40 0003 	orr.w	r0, r0, r3
    while (k < 4) {
 80011ba:	f1a1 0108 	sub.w	r1, r1, #8
 80011be:	d1d6      	bne.n	800116e <hex2bin+0x36>
}
 80011c0:	b005      	add	sp, #20
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 80011c4:	ad04      	add	r5, sp, #16
 80011c6:	f003 0401 	and.w	r4, r3, #1
 80011ca:	f1be 0f05 	cmp.w	lr, #5
 80011ce:	442c      	add	r4, r5
 80011d0:	f1a6 0e57 	sub.w	lr, r6, #87	; 0x57
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 80011d4:	f1a6 0541 	sub.w	r5, r6, #65	; 0x41
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 80011d8:	d802      	bhi.n	80011e0 <hex2bin+0xa8>
 80011da:	f804 ec0c 	strb.w	lr, [r4, #-12]
 80011de:	e7da      	b.n	8001196 <hex2bin+0x5e>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 80011e0:	2d05      	cmp	r5, #5
 80011e2:	f003 0401 	and.w	r4, r3, #1
 80011e6:	d8d6      	bhi.n	8001196 <hex2bin+0x5e>
 80011e8:	ad04      	add	r5, sp, #16
 80011ea:	442c      	add	r4, r5
 80011ec:	3e37      	subs	r6, #55	; 0x37
 80011ee:	f804 6c0c 	strb.w	r6, [r4, #-12]
 80011f2:	e7d0      	b.n	8001196 <hex2bin+0x5e>
    if (!len || !buf) return ret;
 80011f4:	4608      	mov	r0, r1
}
 80011f6:	b005      	add	sp, #20
 80011f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fa:	bf00      	nop

080011fc <get_tmr10>:
	return mSecCounter;
 80011fc:	4b01      	ldr	r3, [pc, #4]	; (8001204 <get_tmr10+0x8>)
	return (get_mSecCounter() + ms);
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4418      	add	r0, r3
 8001202:	4770      	bx	lr
 8001204:	20000568 	.word	0x20000568

08001208 <check_tmr10>:
	return mSecCounter;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <check_tmr10+0x10>)
	return (get_mSecCounter() >= ms ? true : false);
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4283      	cmp	r3, r0
 800120e:	bf34      	ite	cc
 8001210:	2000      	movcc	r0, #0
 8001212:	2001      	movcs	r0, #1
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000568 	.word	0x20000568

0800121c <errLedOn>:
{
 800121c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_SET);//LED OFF
 800121e:	2201      	movs	r2, #1
{
 8001220:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_SET);//LED OFF
 8001222:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001226:	4808      	ldr	r0, [pc, #32]	; (8001248 <errLedOn+0x2c>)
 8001228:	f001 ff18 	bl	800305c <HAL_GPIO_WritePin>
	HAL_Delay(25);
 800122c:	2019      	movs	r0, #25
 800122e:	f001 f865 	bl	80022fc <HAL_Delay>
	if (on) HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_RESET);//LED ON
 8001232:	b904      	cbnz	r4, 8001236 <errLedOn+0x1a>
}
 8001234:	bd10      	pop	{r4, pc}
 8001236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (on) HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_RESET);//LED ON
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <errLedOn+0x2c>)
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001242:	f001 bf0b 	b.w	800305c <HAL_GPIO_WritePin>
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400

0800124c <main>:
{
 800124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	2400      	movs	r4, #0
{
 8001252:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8001254:	f001 f826 	bl	80022a4 <HAL_Init>
  SystemClock_Config();
 8001258:	f7ff ff1e 	bl	8001098 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8001260:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	4eae      	ldr	r6, [pc, #696]	; (8001520 <main+0x2d4>)
 8001266:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	9413      	str	r4, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|MQ_ALARM_Pin, GPIO_PIN_RESET);
 800126c:	4fad      	ldr	r7, [pc, #692]	; (8001524 <main+0x2d8>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800126e:	48ae      	ldr	r0, [pc, #696]	; (8001528 <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6333      	str	r3, [r6, #48]	; 0x30
 8001276:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	9309      	str	r3, [sp, #36]	; 0x24
 800127e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001280:	940a      	str	r4, [sp, #40]	; 0x28
 8001282:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6333      	str	r3, [r6, #48]	; 0x30
 800128a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800128c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001290:	930a      	str	r3, [sp, #40]	; 0x28
 8001292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	940b      	str	r4, [sp, #44]	; 0x2c
 8001296:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6333      	str	r3, [r6, #48]	; 0x30
 800129e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80012a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	940c      	str	r4, [sp, #48]	; 0x30
 80012aa:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6333      	str	r3, [r6, #48]	; 0x30
 80012b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012ba:	4622      	mov	r2, r4
 80012bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012c2:	f001 fecb 	bl	800305c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|MQ_ALARM_Pin, GPIO_PIN_RESET);
 80012c6:	4622      	mov	r2, r4
 80012c8:	4638      	mov	r0, r7
 80012ca:	f241 0102 	movw	r1, #4098	; 0x1002
 80012ce:	f001 fec5 	bl	800305c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ERR_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 80012d2:	4638      	mov	r0, r7
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80012da:	f001 febf 	bl	800305c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	4892      	ldr	r0, [pc, #584]	; (800152c <main+0x2e0>)
 80012e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e6:	f001 feb9 	bl	800305c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = LED_Pin;
 80012ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012f0:	488d      	ldr	r0, [pc, #564]	; (8001528 <main+0x2dc>)
 80012f2:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f001 fdbc 	bl	8002e78 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 8001300:	488a      	ldr	r0, [pc, #552]	; (800152c <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001302:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 8001304:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001306:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 800130e:	f001 fdb3 	bl	8002e78 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001312:	a90f      	add	r1, sp, #60	; 0x3c
 8001314:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = digMQ_Pin;
 8001316:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001320:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001324:	f001 fda8 	bl	8002e78 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001328:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(digMQ_GPIO_Port, &GPIO_InitStruct);
 800132c:	a90f      	add	r1, sp, #60	; 0x3c
 800132e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001330:	e9cd 930f 	strd	r9, r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001334:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(digMQ_GPIO_Port, &GPIO_InitStruct);
 8001336:	f001 fd9f 	bl	8002e78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ERR_Pin|LCD_DC_Pin;
 800133a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	a90f      	add	r1, sp, #60	; 0x3c
 8001340:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ERR_Pin|LCD_DC_Pin;
 8001342:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001348:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = MQ_ALARM_Pin;
 800134a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f001 fd93 	bl	8002e78 <HAL_GPIO_Init>
  HAL_GPIO_Init(MQ_ALARM_GPIO_Port, &GPIO_InitStruct);
 8001352:	a90f      	add	r1, sp, #60	; 0x3c
 8001354:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	e9cd 5a10 	strd	r5, sl, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = MQ_ALARM_Pin;
 800135c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MQ_ALARM_GPIO_Port, &GPIO_InitStruct);
 8001360:	f001 fd8a 	bl	8002e78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001364:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001368:	4870      	ldr	r0, [pc, #448]	; (800152c <main+0x2e0>)
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800136a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800136c:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001372:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001374:	f001 fd80 	bl	8002e78 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001378:	4622      	mov	r2, r4
 800137a:	4621      	mov	r1, r4
 800137c:	2008      	movs	r0, #8
 800137e:	f001 f881 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001382:	2008      	movs	r0, #8
 8001384:	f001 f8b6 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001388:	9407      	str	r4, [sp, #28]
 800138a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800138c:	4868      	ldr	r0, [pc, #416]	; (8001530 <main+0x2e4>)
 800138e:	4a69      	ldr	r2, [pc, #420]	; (8001534 <main+0x2e8>)
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8001390:	6044      	str	r4, [r0, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001396:	6333      	str	r3, [r6, #48]	; 0x30
 8001398:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139a:	6144      	str	r4, [r0, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800139c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a0:	9307      	str	r3, [sp, #28]
 80013a2:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a4:	9408      	str	r4, [sp, #32]
 80013a6:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a8:	6184      	str	r4, [r0, #24]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ae:	6333      	str	r3, [r6, #48]	; 0x30
 80013b0:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80013b2:	61c4      	str	r4, [r0, #28]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80013b8:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ba:	9308      	str	r3, [sp, #32]
 80013bc:	9b08      	ldr	r3, [sp, #32]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80013be:	6086      	str	r6, [r0, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80013c0:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80013c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80013c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013cc:	2603      	movs	r6, #3
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013ce:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	e9c0 c103 	strd	ip, r1, [r0, #12]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013d6:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80013da:	6002      	str	r2, [r0, #0]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80013dc:	6203      	str	r3, [r0, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013de:	6286      	str	r6, [r0, #40]	; 0x28
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80013e0:	f001 f8b0 	bl	8002544 <HAL_DMA_Init>
 80013e4:	b108      	cbz	r0, 80013ea <main+0x19e>
 80013e6:	b672      	cpsid	i
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <main+0x19c>
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80013ea:	4604      	mov	r4, r0
 80013ec:	4602      	mov	r2, r0
 80013ee:	4629      	mov	r1, r5
 80013f0:	200b      	movs	r0, #11
 80013f2:	f001 f847 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013f6:	200b      	movs	r0, #11
 80013f8:	f001 f87c 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80013fc:	4622      	mov	r2, r4
 80013fe:	4629      	mov	r1, r5
 8001400:	200c      	movs	r0, #12
 8001402:	f001 f83f 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001406:	200c      	movs	r0, #12
 8001408:	f001 f874 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800140c:	4622      	mov	r2, r4
 800140e:	2105      	movs	r1, #5
 8001410:	200f      	movs	r0, #15
 8001412:	f001 f837 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001416:	200f      	movs	r0, #15
 8001418:	f001 f86c 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 800141c:	4631      	mov	r1, r6
 800141e:	4622      	mov	r2, r4
 8001420:	2011      	movs	r0, #17
 8001422:	f001 f82f 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001426:	2011      	movs	r0, #17
 8001428:	f001 f864 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 4, 0);
 800142c:	4622      	mov	r2, r4
 800142e:	4649      	mov	r1, r9
 8001430:	2038      	movs	r0, #56	; 0x38
 8001432:	f001 f827 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001436:	2038      	movs	r0, #56	; 0x38
 8001438:	f001 f85c 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 3, 0);
 800143c:	4631      	mov	r1, r6
 800143e:	4622      	mov	r2, r4
 8001440:	203a      	movs	r0, #58	; 0x3a
 8001442:	f001 f81f 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001446:	203a      	movs	r0, #58	; 0x3a
 8001448:	f001 f854 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 3, 0);
 800144c:	4631      	mov	r1, r6
 800144e:	4622      	mov	r2, r4
 8001450:	2046      	movs	r0, #70	; 0x46
  htim3.Instance = TIM3;
 8001452:	4e39      	ldr	r6, [pc, #228]	; (8001538 <main+0x2ec>)
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 3, 0);
 8001454:	f001 f816 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001458:	2046      	movs	r0, #70	; 0x46
 800145a:	f001 f84b 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 800145e:	4937      	ldr	r1, [pc, #220]	; (800153c <main+0x2f0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001460:	940f      	str	r4, [sp, #60]	; 0x3c
  htim3.Init.Prescaler = 9999;
 8001462:	f242 720f 	movw	r2, #9999	; 0x270f
  htim3.Init.Period = 99;
 8001466:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001468:	4630      	mov	r0, r6
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim3.Init.Prescaler = 9999;
 800146e:	e9c6 1200 	strd	r1, r2, [r6]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	940d      	str	r4, [sp, #52]	; 0x34
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	60b4      	str	r4, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	61b4      	str	r4, [r6, #24]
  htim3.Init.Period = 99;
 800147c:	60f3      	str	r3, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001480:	f003 fa94 	bl	80049ac <HAL_TIM_Base_Init>
 8001484:	b108      	cbz	r0, 800148a <main+0x23e>
 8001486:	b672      	cpsid	i
  while (1)
 8001488:	e7fe      	b.n	8001488 <main+0x23c>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800148a:	a90f      	add	r1, sp, #60	; 0x3c
 800148c:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001492:	f003 f8d7 	bl	8004644 <HAL_TIM_ConfigClockSource>
 8001496:	4603      	mov	r3, r0
 8001498:	b108      	cbz	r0, 800149e <main+0x252>
 800149a:	b672      	cpsid	i
  while (1)
 800149c:	e7fe      	b.n	800149c <main+0x250>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149e:	a90d      	add	r1, sp, #52	; 0x34
 80014a0:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a6:	f003 faaf 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4602      	mov	r2, r0
 80014ac:	b108      	cbz	r0, 80014b2 <main+0x266>
 80014ae:	b672      	cpsid	i
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <main+0x264>
  huart1.Instance = USART1;
 80014b2:	4823      	ldr	r0, [pc, #140]	; (8001540 <main+0x2f4>)
 80014b4:	4923      	ldr	r1, [pc, #140]	; (8001544 <main+0x2f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	6082      	str	r2, [r0, #8]
  huart1.Init.BaudRate = 230400;
 80014b8:	f44f 3961 	mov.w	r9, #230400	; 0x38400
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014bc:	240c      	movs	r4, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80014be:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c2:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart1.Init.BaudRate = 230400;
 80014c6:	e9c0 1900 	strd	r1, r9, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ca:	6144      	str	r4, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014cc:	f003 fb7a 	bl	8004bc4 <HAL_UART_Init>
 80014d0:	4602      	mov	r2, r0
 80014d2:	b108      	cbz	r0, 80014d8 <main+0x28c>
 80014d4:	b672      	cpsid	i
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <main+0x28a>
  huart2.Instance = USART2;
 80014d8:	481b      	ldr	r0, [pc, #108]	; (8001548 <main+0x2fc>)
 80014da:	491c      	ldr	r1, [pc, #112]	; (800154c <main+0x300>)
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	61c2      	str	r2, [r0, #28]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	e9c0 9201 	strd	r9, r2, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	e9c0 4205 	strd	r4, r2, [r0, #20]
  huart2.Instance = USART2;
 80014ea:	6001      	str	r1, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ec:	f003 fb6a 	bl	8004bc4 <HAL_UART_Init>
 80014f0:	b108      	cbz	r0, 80014f6 <main+0x2aa>
 80014f2:	b672      	cpsid	i
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <main+0x2a8>
  hi2c1.Instance = I2C1;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <main+0x304>)
 80014f8:	4a16      	ldr	r2, [pc, #88]	; (8001554 <main+0x308>)
  hi2c1.Init.ClockSpeed = 400000;
 80014fa:	4917      	ldr	r1, [pc, #92]	; (8001558 <main+0x30c>)
  hi2c1.Instance = I2C1;
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.OwnAddress1 = 0;
 80014fe:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001502:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001506:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150e:	4618      	mov	r0, r3
  hi2c1.Init.ClockSpeed = 400000;
 8001510:	6059      	str	r1, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001512:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001514:	f001 fdbe 	bl	8003094 <HAL_I2C_Init>
 8001518:	4604      	mov	r4, r0
 800151a:	b1f8      	cbz	r0, 800155c <main+0x310>
 800151c:	b672      	cpsid	i
  while (1)
 800151e:	e7fe      	b.n	800151e <main+0x2d2>
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020000 	.word	0x40020000
 8001530:	20000e04 	.word	0x20000e04
 8001534:	40026410 	.word	0x40026410
 8001538:	20000f18 	.word	0x20000f18
 800153c:	40000400 	.word	0x40000400
 8001540:	200010c8 	.word	0x200010c8
 8001544:	40011000 	.word	0x40011000
 8001548:	2000126c 	.word	0x2000126c
 800154c:	40004400 	.word	0x40004400
 8001550:	20000ec4 	.word	0x20000ec4
 8001554:	40005400 	.word	0x40005400
 8001558:	00061a80 	.word	0x00061a80
  HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 800155c:	4bbb      	ldr	r3, [pc, #748]	; (800184c <main+0x600>)
 800155e:	49bc      	ldr	r1, [pc, #752]	; (8001850 <main+0x604>)
 8001560:	6818      	ldr	r0, [r3, #0]
  	Logger(NULL, false, "%s", eol);
 8001562:	f8df 9368 	ldr.w	r9, [pc, #872]	; 80018cc <main+0x680>
  	Logger(name, true, "Start %s with BOOT_PIN=%d%s", version, vpin, eol);
 8001566:	f8df a368 	ldr.w	sl, [pc, #872]	; 80018d0 <main+0x684>
  HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 800156a:	462a      	mov	r2, r5
 800156c:	f003 fb5a 	bl	8004c24 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001570:	4630      	mov	r0, r6
 8001572:	f003 f833 	bl	80045dc <HAL_TIM_Base_Start_IT>
  	bootMode = true;
 8001576:	4bb7      	ldr	r3, [pc, #732]	; (8001854 <main+0x608>)
  	HAL_Delay(1000);
 8001578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  	bootMode = true;
 800157c:	701d      	strb	r5, [r3, #0]
  	HAL_Delay(1000);
 800157e:	f000 febd 	bl	80022fc <HAL_Delay>
  	Logger(NULL, false, "%s", eol);
 8001582:	f8d9 3000 	ldr.w	r3, [r9]
 8001586:	4ab4      	ldr	r2, [pc, #720]	; (8001858 <main+0x60c>)
 8001588:	4621      	mov	r1, r4
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff f824 	bl	80005d8 <Logger>
  	int vpin = HAL_GPIO_ReadPin(BOOT_PORT_PIN, BOOT_PIN);
 8001590:	4629      	mov	r1, r5
 8001592:	48b2      	ldr	r0, [pc, #712]	; (800185c <main+0x610>)
 8001594:	f001 fd5c 	bl	8003050 <HAL_GPIO_ReadPin>
  	Logger(name, true, "Start %s with BOOT_PIN=%d%s", version, vpin, eol);
 8001598:	f8d9 2000 	ldr.w	r2, [r9]
 800159c:	4bb0      	ldr	r3, [pc, #704]	; (8001860 <main+0x614>)
 800159e:	9201      	str	r2, [sp, #4]
 80015a0:	9000      	str	r0, [sp, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4aaf      	ldr	r2, [pc, #700]	; (8001864 <main+0x618>)
 80015a6:	4629      	mov	r1, r5
  	int vpin = HAL_GPIO_ReadPin(BOOT_PORT_PIN, BOOT_PIN);
 80015a8:	4606      	mov	r6, r0
  	Logger(name, true, "Start %s with BOOT_PIN=%d%s", version, vpin, eol);
 80015aa:	f8da 0000 	ldr.w	r0, [sl]
 80015ae:	f7ff f813 	bl	80005d8 <Logger>
  	_writePin(GPIOB, ERR_Pin, GPIO_PIN_RESET);
 80015b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015b6:	61bb      	str	r3, [r7, #24]
  		_togglePin(GPIOB, ERR_Pin);
 80015b8:	463d      	mov	r5, r7
  	_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);
 80015ba:	f8c7 8018 	str.w	r8, [r7, #24]
 80015be:	2407      	movs	r4, #7
  		HAL_Delay(250);
 80015c0:	20fa      	movs	r0, #250	; 0xfa
 80015c2:	f000 fe9b 	bl	80022fc <HAL_Delay>
  		_togglePin(GPIOB, ERR_Pin);
 80015c6:	696b      	ldr	r3, [r5, #20]
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	43db      	mvns	r3, r3
 80015cc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61ab      	str	r3, [r5, #24]
  		_togglePin(GPIOB, MQ_ALARM_Pin);
 80015d8:	696b      	ldr	r3, [r5, #20]
 80015da:	041a      	lsls	r2, r3, #16
 80015dc:	43db      	mvns	r3, r3
 80015de:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	4313      	orrs	r3, r2
  	for (int i = 0; i < 7; i++) {
 80015e8:	3c01      	subs	r4, #1
  		_togglePin(GPIOB, MQ_ALARM_Pin);
 80015ea:	61ab      	str	r3, [r5, #24]
  	for (int i = 0; i < 7; i++) {
 80015ec:	d1e8      	bne.n	80015c0 <main+0x374>
  	dstat = HAL_DMA_RegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID, &dmaCB);
 80015ee:	4f9e      	ldr	r7, [pc, #632]	; (8001868 <main+0x61c>)
  	dmaDone = false;
 80015f0:	4d9e      	ldr	r5, [pc, #632]	; (800186c <main+0x620>)
  	uint32_t addr = SPEC_AREA_ADR;
 80015f2:	4b9f      	ldr	r3, [pc, #636]	; (8001870 <main+0x624>)
  	dstat = HAL_DMA_RegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID, &dmaCB);
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	4a9f      	ldr	r2, [pc, #636]	; (8001874 <main+0x628>)
  	dmaDone = false;
 80015f8:	702c      	strb	r4, [r5, #0]
  	dstat = HAL_DMA_RegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID, &dmaCB);
 80015fa:	4621      	mov	r1, r4
  	uint32_t addr = SPEC_AREA_ADR;
 80015fc:	930f      	str	r3, [sp, #60]	; 0x3c
  	dstat = HAL_DMA_RegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID, &dmaCB);
 80015fe:	f001 f9c3 	bl	8002988 <HAL_DMA_RegisterCallback>
  	if (dstat == HAL_OK) {
 8001602:	b320      	cbz	r0, 800164e <main+0x402>
    } else devError |= devDma;
 8001604:	4a9c      	ldr	r2, [pc, #624]	; (8001878 <main+0x62c>)
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	f043 030b 	orr.w	r3, r3, #11
 800160c:	6013      	str	r3, [r2, #0]
    		_togglePin(GPIOB, ERR_Pin);
 800160e:	4c9b      	ldr	r4, [pc, #620]	; (800187c <main+0x630>)
 8001610:	2507      	movs	r5, #7
    		HAL_Delay(150);
 8001612:	2096      	movs	r0, #150	; 0x96
 8001614:	f000 fe72 	bl	80022fc <HAL_Delay>
    		_togglePin(GPIOB, ERR_Pin);
 8001618:	6963      	ldr	r3, [r4, #20]
 800161a:	041a      	lsls	r2, r3, #16
 800161c:	43db      	mvns	r3, r3
 800161e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001626:	4313      	orrs	r3, r2
 8001628:	61a3      	str	r3, [r4, #24]
    		_togglePin(GPIOB, MQ_ALARM_Pin);
 800162a:	6963      	ldr	r3, [r4, #20]
 800162c:	041a      	lsls	r2, r3, #16
 800162e:	43db      	mvns	r3, r3
 8001630:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001638:	4313      	orrs	r3, r2
    	for (int i = 0; i < 7; i++) {
 800163a:	3d01      	subs	r5, #1
    		_togglePin(GPIOB, MQ_ALARM_Pin);
 800163c:	61a3      	str	r3, [r4, #24]
    	for (int i = 0; i < 7; i++) {
 800163e:	d1e8      	bne.n	8001612 <main+0x3c6>
    	LOOP_FOREVER();
 8001640:	2001      	movs	r0, #1
 8001642:	f000 fe5b 	bl	80022fc <HAL_Delay>
 8001646:	2001      	movs	r0, #1
 8001648:	f000 fe58 	bl	80022fc <HAL_Delay>
 800164c:	e7f8      	b.n	8001640 <main+0x3f4>
  		if (HAL_DMA_Start_IT(dmaMem, addr, (uint32_t)&hdr, sizeof(api_hdr_t)) != HAL_OK) devError |= devDma;
 800164e:	4a8c      	ldr	r2, [pc, #560]	; (8001880 <main+0x634>)
 8001650:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001652:	6838      	ldr	r0, [r7, #0]
  		dmaDone = false;
 8001654:	702c      	strb	r4, [r5, #0]
  		if (HAL_DMA_Start_IT(dmaMem, addr, (uint32_t)&hdr, sizeof(api_hdr_t)) != HAL_OK) devError |= devDma;
 8001656:	2310      	movs	r3, #16
 8001658:	f001 f80e 	bl	8002678 <HAL_DMA_Start_IT>
 800165c:	2800      	cmp	r0, #0
 800165e:	f040 808e 	bne.w	800177e <main+0x532>
 8001662:	2464      	movs	r4, #100	; 0x64
 8001664:	e005      	b.n	8001672 <main+0x426>
    		while(!dmaDone && --sch) {
 8001666:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800166a:	f000 8088 	beq.w	800177e <main+0x532>
    			HAL_Delay(1);
 800166e:	f000 fe45 	bl	80022fc <HAL_Delay>
    		while(!dmaDone && --sch) {
 8001672:	782b      	ldrb	r3, [r5, #0]
 8001674:	3c01      	subs	r4, #1
    			HAL_Delay(1);
 8001676:	2001      	movs	r0, #1
    		while(!dmaDone && --sch) {
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f4      	beq.n	8001666 <main+0x41a>
    if (devError) {
 800167c:	4d7e      	ldr	r5, [pc, #504]	; (8001878 <main+0x62c>)
 800167e:	682b      	ldr	r3, [r5, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f040 8081 	bne.w	8001788 <main+0x53c>
    									(unsigned int)hdr.crc,
 8001686:	4c7e      	ldr	r4, [pc, #504]	; (8001880 <main+0x634>)
 8001688:	68e3      	ldr	r3, [r4, #12]
    									(unsigned int)hdr.len,
 800168a:	68a0      	ldr	r0, [r4, #8]
    									(unsigned int)hdr.adr,
 800168c:	6861      	ldr	r1, [r4, #4]
    									(unsigned int)hdr.mark,
 800168e:	6822      	ldr	r2, [r4, #0]
    	Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 8001690:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8001694:	e9cd 2100 	strd	r2, r1, [sp]
 8001698:	f8d9 3000 	ldr.w	r3, [r9]
 800169c:	9304      	str	r3, [sp, #16]
 800169e:	4a79      	ldr	r2, [pc, #484]	; (8001884 <main+0x638>)
 80016a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016a2:	f8da 0000 	ldr.w	r0, [sl]
 80016a6:	2101      	movs	r1, #1
 80016a8:	f7fe ff96 	bl	80005d8 <Logger>
    if (vpin == GPIO_PIN_SET) {
 80016ac:	2e01      	cmp	r6, #1
 80016ae:	d104      	bne.n	80016ba <main+0x46e>
    	if ( (hdr.mark == API_MARKER) && (hdr.adr == API_START_ADR) && hdr.len && hdr.crc ) {
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	4b75      	ldr	r3, [pc, #468]	; (8001888 <main+0x63c>)
 80016b4:	429a      	cmp	r2, r3
 80016b6:	f000 812c 	beq.w	8001912 <main+0x6c6>
    	vrem = (uint8_t *)calloc(1, MAX_VREM_BUF);//get memory for data buffer
 80016ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016be:	2001      	movs	r0, #1
 80016c0:	f003 fe6c 	bl	800539c <calloc>
 80016c4:	4e71      	ldr	r6, [pc, #452]	; (800188c <main+0x640>)
 80016c6:	6030      	str	r0, [r6, #0]
    	if (!vrem) {
 80016c8:	2800      	cmp	r0, #0
 80016ca:	f000 8113 	beq.w	80018f4 <main+0x6a8>
    	uint32_t the_len = doAPI(&fLen);
 80016ce:	4870      	ldr	r0, [pc, #448]	; (8001890 <main+0x644>)
 80016d0:	f7ff f8d4 	bl	800087c <doAPI>
    	if (vrem) free(vrem);
 80016d4:	6833      	ldr	r3, [r6, #0]
    	uint32_t the_len = doAPI(&fLen);
 80016d6:	4606      	mov	r6, r0
    	if (vrem) free(vrem);
 80016d8:	b113      	cbz	r3, 80016e0 <main+0x494>
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 fe90 	bl	8005400 <free>
    	if (the_len || fLen) {
 80016e0:	4b6b      	ldr	r3, [pc, #428]	; (8001890 <main+0x644>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4333      	orrs	r3, r6
 80016e6:	d00c      	beq.n	8001702 <main+0x4b6>
    		if (apiCmd != apiSwitch) HAL_Delay(1500);
 80016e8:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <main+0x648>)
 80016ea:	f993 3000 	ldrsb.w	r3, [r3]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d003      	beq.n	80016fa <main+0x4ae>
 80016f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80016f6:	f000 fe01 	bl	80022fc <HAL_Delay>
    		if (action == do_prog) {
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <main+0x64c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d047      	beq.n	8001792 <main+0x546>
    	errLedOn(devError ? true : false);
 8001702:	6828      	ldr	r0, [r5, #0]
 8001704:	3800      	subs	r0, #0
 8001706:	bf18      	it	ne
 8001708:	2001      	movne	r0, #1
 800170a:	f7ff fd87 	bl	800121c <errLedOn>
    	if (devError) {
 800170e:	682a      	ldr	r2, [r5, #0]
 8001710:	2a00      	cmp	r2, #0
 8001712:	f000 810c 	beq.w	800192e <main+0x6e2>
    		Logger(name, true, "action '%s': Error #%lu '%s'%s", allAction[action], devError, errName(devError), eol);
 8001716:	4960      	ldr	r1, [pc, #384]	; (8001898 <main+0x64c>)
 8001718:	4b60      	ldr	r3, [pc, #384]	; (800189c <main+0x650>)
 800171a:	7809      	ldrb	r1, [r1, #0]
 800171c:	f8da 0000 	ldr.w	r0, [sl]
 8001720:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	switch (err) {
 8001724:	2a10      	cmp	r2, #16
 8001726:	bf96      	itet	ls
 8001728:	495d      	ldrls	r1, [pc, #372]	; (80018a0 <main+0x654>)
    		Logger(name, true, "action '%s': Error #%lu '%s'%s", allAction[action], devError, errName(devError), eol);
 800172a:	4d5e      	ldrhi	r5, [pc, #376]	; (80018a4 <main+0x658>)
 800172c:	f851 5022 	ldrls.w	r5, [r1, r2, lsl #2]
 8001730:	f8d9 1000 	ldr.w	r1, [r9]
 8001734:	9102      	str	r1, [sp, #8]
 8001736:	e9cd 2500 	strd	r2, r5, [sp]
 800173a:	2101      	movs	r1, #1
 800173c:	4a5a      	ldr	r2, [pc, #360]	; (80018a8 <main+0x65c>)
 800173e:	f7fe ff4b 	bl	80005d8 <Logger>
    		HAL_Delay(1000);
 8001742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001746:	f000 fdd9 	bl	80022fc <HAL_Delay>
    if (dstat == HAL_OK) HAL_DMA_UnRegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID);
 800174a:	6838      	ldr	r0, [r7, #0]
 800174c:	2100      	movs	r1, #0
 800174e:	f001 f947 	bl	80029e0 <HAL_DMA_UnRegisterCallback>
    Logger(name, true, "Switch to application by address 0x%X%s", (unsigned int)hdr.adr, eol);
 8001752:	f8d9 3000 	ldr.w	r3, [r9]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	6863      	ldr	r3, [r4, #4]
 800175a:	f8da 0000 	ldr.w	r0, [sl]
 800175e:	4a53      	ldr	r2, [pc, #332]	; (80018ac <main+0x660>)
 8001760:	2101      	movs	r1, #1
 8001762:	f7fe ff39 	bl	80005d8 <Logger>
    uint32_t appJump = *((volatile uint32_t *)(API_START_ADR + 4));
 8001766:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <main+0x664>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b672      	cpsid	i
    __set_MSP(*((volatile uint32_t *)API_START_ADR));
 800176c:	4a51      	ldr	r2, [pc, #324]	; (80018b4 <main+0x668>)
 800176e:	6812      	ldr	r2, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001770:	f382 8808 	msr	MSP, r2
    GoToApp();//switch to API
 8001774:	4798      	blx	r3
}
 8001776:	2000      	movs	r0, #0
 8001778:	b014      	add	sp, #80	; 0x50
 800177a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    		if (!sch && !dmaDone) devError |= devDma;
 800177e:	4a3e      	ldr	r2, [pc, #248]	; (8001878 <main+0x62c>)
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f043 030b 	orr.w	r3, r3, #11
 8001786:	6013      	str	r3, [r2, #0]
    	if (dstat == HAL_OK) HAL_DMA_UnRegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID);
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	2100      	movs	r1, #0
 800178c:	f001 f928 	bl	80029e0 <HAL_DMA_UnRegisterCallback>
 8001790:	e73d      	b.n	800160e <main+0x3c2>
    			apiHdr.len = file_size;
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <main+0x66c>)
    			apiHdr.crc = file_crc;
 8001794:	4a49      	ldr	r2, [pc, #292]	; (80018bc <main+0x670>)
    			apiHdr.len = file_size;
 8001796:	6819      	ldr	r1, [r3, #0]
    			apiHdr.mark = API_MARKER;
 8001798:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <main+0x674>)
    			apiHdr.crc = file_crc;
 800179a:	6812      	ldr	r2, [r2, #0]
    			apiHdr.len = file_size;
 800179c:	6099      	str	r1, [r3, #8]
    			apiHdr.mark = API_MARKER;
 800179e:	200f      	movs	r0, #15
 80017a0:	f06f 060f 	mvn.w	r6, #15
 80017a4:	7018      	strb	r0, [r3, #0]
 80017a6:	f06f 005a 	mvn.w	r0, #90	; 0x5a
 80017aa:	705e      	strb	r6, [r3, #1]
 80017ac:	7098      	strb	r0, [r3, #2]
 80017ae:	265a      	movs	r6, #90	; 0x5a
    			apiHdr.adr = API_START_ADR;
 80017b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    			apiHdr.mark = API_MARKER;
 80017b4:	70de      	strb	r6, [r3, #3]
    			apiHdr.adr = API_START_ADR;
 80017b6:	7158      	strb	r0, [r3, #5]
 80017b8:	2608      	movs	r6, #8
    			apiHdr.mark = API_MARKER;
 80017ba:	2000      	movs	r0, #0
    			apiHdr.adr = API_START_ADR;
 80017bc:	71de      	strb	r6, [r3, #7]
    			apiHdr.crc = file_crc;
 80017be:	60da      	str	r2, [r3, #12]
    			apiHdr.adr = API_START_ADR;
 80017c0:	7118      	strb	r0, [r3, #4]
 80017c2:	7198      	strb	r0, [r3, #6]
    				if (apiHdr.len && apiHdr.crc) {
 80017c4:	2900      	cmp	r1, #0
 80017c6:	f000 808c 	beq.w	80018e2 <main+0x696>
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	f000 8089 	beq.w	80018e2 <main+0x696>
    					if ( (hdr.mark != apiHdr.mark) || (hdr.adr != apiHdr.adr) ||
 80017d0:	6820      	ldr	r0, [r4, #0]
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <main+0x63c>)
 80017d4:	4298      	cmp	r0, r3
 80017d6:	d103      	bne.n	80017e0 <main+0x594>
 80017d8:	6860      	ldr	r0, [r4, #4]
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <main+0x668>)
 80017dc:	4298      	cmp	r0, r3
 80017de:	d079      	beq.n	80018d4 <main+0x688>
    						Logger(name, true, "SPEC_AREA not empty -> erase sector #7...");
 80017e0:	2101      	movs	r1, #1
 80017e2:	4a38      	ldr	r2, [pc, #224]	; (80018c4 <main+0x678>)
 80017e4:	f8da 0000 	ldr.w	r0, [sl]
 80017e8:	f7fe fef6 	bl	80005d8 <Logger>
    						flash_erase(7);
 80017ec:	2007      	movs	r0, #7
 80017ee:	f7fe ff63 	bl	80006b8 <flash_erase>
    						if (!devError)
 80017f2:	6829      	ldr	r1, [r5, #0]
 80017f4:	2900      	cmp	r1, #0
 80017f6:	d076      	beq.n	80018e6 <main+0x69a>
	switch (err) {
 80017f8:	2910      	cmp	r1, #16
 80017fa:	bf98      	it	ls
 80017fc:	4b28      	ldrls	r3, [pc, #160]	; (80018a0 <main+0x654>)
    							Logger(NULL, false, " done.(error:'%s')%s", errName(devError), eol);
 80017fe:	f8d9 2000 	ldr.w	r2, [r9]
 8001802:	bf98      	it	ls
 8001804:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
 8001808:	9200      	str	r2, [sp, #0]
 800180a:	f04f 0100 	mov.w	r1, #0
    						if (!devError)
 800180e:	bf88      	it	hi
 8001810:	4b24      	ldrhi	r3, [pc, #144]	; (80018a4 <main+0x658>)
    							Logger(NULL, false, " done.(error:'%s')%s", errName(devError), eol);
 8001812:	4a2d      	ldr	r2, [pc, #180]	; (80018c8 <main+0x67c>)
 8001814:	4608      	mov	r0, r1
 8001816:	f7fe fedf 	bl	80005d8 <Logger>
    						flash_write(&addr, (uint32_t *)&Hdr->mark, sizeof(api_hdr_t)/sizeof(uint32_t));
 800181a:	4929      	ldr	r1, [pc, #164]	; (80018c0 <main+0x674>)
 800181c:	a80f      	add	r0, sp, #60	; 0x3c
 800181e:	2204      	movs	r2, #4
 8001820:	f7fe ff72 	bl	8000708 <flash_write>
    						Hdr = &apiHdr;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <main+0x674>)
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 8001826:	f8d9 2000 	ldr.w	r2, [r9]
 800182a:	9204      	str	r2, [sp, #16]
									(unsigned int)Hdr->crc,
 800182c:	68da      	ldr	r2, [r3, #12]
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 800182e:	9203      	str	r2, [sp, #12]
									(unsigned int)Hdr->len,
 8001830:	689a      	ldr	r2, [r3, #8]
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 8001832:	9202      	str	r2, [sp, #8]
									(unsigned int)Hdr->adr,
 8001834:	685a      	ldr	r2, [r3, #4]
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 8001836:	9201      	str	r2, [sp, #4]
									(unsigned int)Hdr->mark,
 8001838:	681b      	ldr	r3, [r3, #0]
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <main+0x638>)
 800183e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001840:	f8da 0000 	ldr.w	r0, [sl]
 8001844:	2101      	movs	r1, #1
 8001846:	f7fe fec7 	bl	80005d8 <Logger>
 800184a:	e75a      	b.n	8001702 <main+0x4b6>
 800184c:	20000048 	.word	0x20000048
 8001850:	20000982 	.word	0x20000982
 8001854:	2000097c 	.word	0x2000097c
 8001858:	080065a4 	.word	0x080065a4
 800185c:	40020000 	.word	0x40020000
 8001860:	20000034 	.word	0x20000034
 8001864:	080064e8 	.word	0x080064e8
 8001868:	2000003c 	.word	0x2000003c
 800186c:	20000100 	.word	0x20000100
 8001870:	0807fff0 	.word	0x0807fff0
 8001874:	0800069d 	.word	0x0800069d
 8001878:	20000564 	.word	0x20000564
 800187c:	40020400 	.word	0x40020400
 8001880:	20000d98 	.word	0x20000d98
 8001884:	08006504 	.word	0x08006504
 8001888:	5aa5f00f 	.word	0x5aa5f00f
 800188c:	2000055c 	.word	0x2000055c
 8001890:	20000104 	.word	0x20000104
 8001894:	2000002c 	.word	0x2000002c
 8001898:	200000dc 	.word	0x200000dc
 800189c:	20000018 	.word	0x20000018
 80018a0:	0800668c 	.word	0x0800668c
 80018a4:	080064e4 	.word	0x080064e4
 80018a8:	08006588 	.word	0x08006588
 80018ac:	080065a8 	.word	0x080065a8
 80018b0:	08008004 	.word	0x08008004
 80018b4:	08008000 	.word	0x08008000
 80018b8:	2000010c 	.word	0x2000010c
 80018bc:	20000108 	.word	0x20000108
 80018c0:	200000e4 	.word	0x200000e4
 80018c4:	08006538 	.word	0x08006538
 80018c8:	08006570 	.word	0x08006570
 80018cc:	20000040 	.word	0x20000040
 80018d0:	20000030 	.word	0x20000030
    								(hdr.len != apiHdr.len) || (hdr.crc != apiHdr.crc) ) {
 80018d4:	68a3      	ldr	r3, [r4, #8]
    					if ( (hdr.mark != apiHdr.mark) || (hdr.adr != apiHdr.adr) ||
 80018d6:	4299      	cmp	r1, r3
 80018d8:	d182      	bne.n	80017e0 <main+0x594>
    								(hdr.len != apiHdr.len) || (hdr.crc != apiHdr.crc) ) {
 80018da:	68e3      	ldr	r3, [r4, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f47f af7f 	bne.w	80017e0 <main+0x594>
    			api_hdr_t *Hdr = &hdr;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <main+0x718>)
 80018e4:	e79f      	b.n	8001826 <main+0x5da>
    							Logger(NULL, false, " done.%s", eol);
 80018e6:	f8d9 3000 	ldr.w	r3, [r9]
 80018ea:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <main+0x71c>)
 80018ec:	4608      	mov	r0, r1
 80018ee:	f7fe fe73 	bl	80005d8 <Logger>
 80018f2:	e792      	b.n	800181a <main+0x5ce>
    		devError |= devMem;
 80018f4:	682b      	ldr	r3, [r5, #0]
    		_writePin(GPIOB, ERR_Pin, GPIO_PIN_RESET);
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <main+0x720>)
    		devError |= devMem;
 80018f8:	f043 0305 	orr.w	r3, r3, #5
    		_writePin(GPIOB, ERR_Pin, GPIO_PIN_RESET);
 80018fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    		_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);
 8001900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    		devError |= devMem;
 8001904:	602b      	str	r3, [r5, #0]
    		_writePin(GPIOB, ERR_Pin, GPIO_PIN_RESET);
 8001906:	6190      	str	r0, [r2, #24]
    		_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);
 8001908:	6191      	str	r1, [r2, #24]
    		LOOP_FOREVER();
 800190a:	2001      	movs	r0, #1
 800190c:	f000 fcf6 	bl	80022fc <HAL_Delay>
 8001910:	e7fb      	b.n	800190a <main+0x6be>
    	if ( (hdr.mark == API_MARKER) && (hdr.adr == API_START_ADR) && hdr.len && hdr.crc ) {
 8001912:	6862      	ldr	r2, [r4, #4]
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <main+0x724>)
 8001916:	429a      	cmp	r2, r3
 8001918:	f47f aecf 	bne.w	80016ba <main+0x46e>
 800191c:	68a3      	ldr	r3, [r4, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f43f aecb 	beq.w	80016ba <main+0x46e>
 8001924:	68e3      	ldr	r3, [r4, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f47f af0f 	bne.w	800174a <main+0x4fe>
 800192c:	e6c5      	b.n	80016ba <main+0x46e>
    			_togglePin(GPIOB, ERR_Pin);
 800192e:	4d0f      	ldr	r5, [pc, #60]	; (800196c <main+0x720>)
 8001930:	2606      	movs	r6, #6
    			HAL_Delay(250);
 8001932:	20fa      	movs	r0, #250	; 0xfa
 8001934:	f000 fce2 	bl	80022fc <HAL_Delay>
    			_togglePin(GPIOB, ERR_Pin);
 8001938:	696b      	ldr	r3, [r5, #20]
 800193a:	041a      	lsls	r2, r3, #16
 800193c:	43db      	mvns	r3, r3
 800193e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	4313      	orrs	r3, r2
 8001948:	61ab      	str	r3, [r5, #24]
    			_togglePin(GPIOB, MQ_ALARM_Pin);
 800194a:	696b      	ldr	r3, [r5, #20]
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	43db      	mvns	r3, r3
 8001950:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001958:	4313      	orrs	r3, r2
    		for (int i = 0; i < 6; i++) {
 800195a:	3e01      	subs	r6, #1
    			_togglePin(GPIOB, MQ_ALARM_Pin);
 800195c:	61ab      	str	r3, [r5, #24]
    		for (int i = 0; i < 6; i++) {
 800195e:	d1e8      	bne.n	8001932 <main+0x6e6>
 8001960:	e6f3      	b.n	800174a <main+0x4fe>
 8001962:	bf00      	nop
 8001964:	20000d98 	.word	0x20000d98
 8001968:	08006564 	.word	0x08006564
 800196c:	40020400 	.word	0x40020400
 8001970:	08008000 	.word	0x08008000

08001974 <sec_to_str>:
	return SecCounter;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <sec_to_str+0x48>)
	sec %= (60 * 60 * 24);
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <sec_to_str+0x4c>)
	sec %= 60;
 8001978:	4912      	ldr	r1, [pc, #72]	; (80019c4 <sec_to_str+0x50>)
{
 800197a:	b570      	push	{r4, r5, r6, lr}
	return SecCounter;
 800197c:	681c      	ldr	r4, [r3, #0]
	sec %= (60 * 60 * 24);
 800197e:	4e12      	ldr	r6, [pc, #72]	; (80019c8 <sec_to_str+0x54>)
	sec %= (60 * 60);
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <sec_to_str+0x58>)
	sec %= (60 * 60 * 24);
 8001982:	fba2 5204 	umull	r5, r2, r2, r4
 8001986:	0c15      	lsrs	r5, r2, #16
 8001988:	fb06 4515 	mls	r5, r6, r5, r4
	sec %= (60 * 60);
 800198c:	fba3 4305 	umull	r4, r3, r3, r5
 8001990:	0adc      	lsrs	r4, r3, #11
 8001992:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8001996:	fb06 5414 	mls	r4, r6, r4, r5
	sec %= 60;
 800199a:	fba1 5104 	umull	r5, r1, r1, r4
 800199e:	0949      	lsrs	r1, r1, #5
 80019a0:	ebc1 1501 	rsb	r5, r1, r1, lsl #4
{
 80019a4:	b082      	sub	sp, #8
	sec %= 60;
 80019a6:	eba4 0485 	sub.w	r4, r4, r5, lsl #2
	return (sprintf(stx, "%lu.%02lu:%02lu:%02lu | ", day, hour, min, sec));
 80019aa:	e9cd 1400 	strd	r1, r4, [sp]
 80019ae:	0c12      	lsrs	r2, r2, #16
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <sec_to_str+0x5c>)
 80019b2:	0adb      	lsrs	r3, r3, #11
 80019b4:	f003 fe0c 	bl	80055d0 <siprintf>
}
 80019b8:	b002      	add	sp, #8
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
 80019bc:	20000560 	.word	0x20000560
 80019c0:	c22e4507 	.word	0xc22e4507
 80019c4:	88888889 	.word	0x88888889
 80019c8:	00015180 	.word	0x00015180
 80019cc:	91a2b3c5 	.word	0x91a2b3c5
 80019d0:	080065d0 	.word	0x080065d0

080019d4 <Report>:
{
 80019d4:	b40c      	push	{r2, r3}
 80019d6:	b570      	push	{r4, r5, r6, lr}
	*buff = '\0';
 80019d8:	4e22      	ldr	r6, [pc, #136]	; (8001a64 <Report+0x90>)
 80019da:	2300      	movs	r3, #0
{
 80019dc:	b082      	sub	sp, #8
 80019de:	4605      	mov	r5, r0
	*buff = '\0';
 80019e0:	7033      	strb	r3, [r6, #0]
	if (addTime) dl = sec_to_str(buff);
 80019e2:	2900      	cmp	r1, #0
 80019e4:	d139      	bne.n	8001a5a <Report+0x86>
int dl = 0;
 80019e6:	460c      	mov	r4, r1
	if (tag) dl += sprintf(buff+strlen(buff), "[%s] ", tag);
 80019e8:	b145      	cbz	r5, 80019fc <Report+0x28>
 80019ea:	481e      	ldr	r0, [pc, #120]	; (8001a64 <Report+0x90>)
 80019ec:	f7fe fbf8 	bl	80001e0 <strlen>
 80019f0:	491d      	ldr	r1, [pc, #116]	; (8001a68 <Report+0x94>)
 80019f2:	462a      	mov	r2, r5
 80019f4:	4430      	add	r0, r6
 80019f6:	f003 fdeb 	bl	80055d0 <siprintf>
 80019fa:	4404      	add	r4, r0
	vsnprintf(buff + dl, len - dl, fmt, args);
 80019fc:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
	va_start(args, fmt);
 8001a00:	ab07      	add	r3, sp, #28
	vsnprintf(buff + dl, len - dl, fmt, args);
 8001a02:	9a06      	ldr	r2, [sp, #24]
	va_start(args, fmt);
 8001a04:	9301      	str	r3, [sp, #4]
	vsnprintf(buff + dl, len - dl, fmt, args);
 8001a06:	1930      	adds	r0, r6, r4
 8001a08:	f003 fee0 	bl	80057cc <vsniprintf>
	uartReady = false;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <Report+0x98>)
	if (HAL_UART_Transmit_DMA(uartPort, (uint8_t *)buff, strlen(buff)) != HAL_OK) devError |= devUART;
 8001a0e:	4815      	ldr	r0, [pc, #84]	; (8001a64 <Report+0x90>)
 8001a10:	4c17      	ldr	r4, [pc, #92]	; (8001a70 <Report+0x9c>)
	uartReady = false;
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(uartPort, (uint8_t *)buff, strlen(buff)) != HAL_OK) devError |= devUART;
 8001a16:	f7fe fbe3 	bl	80001e0 <strlen>
 8001a1a:	4912      	ldr	r1, [pc, #72]	; (8001a64 <Report+0x90>)
 8001a1c:	b282      	uxth	r2, r0
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	f003 f92a 	bl	8004c78 <HAL_UART_Transmit_DMA>
 8001a24:	b170      	cbz	r0, 8001a44 <Report+0x70>
 8001a26:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <Report+0xa0>)
 8001a28:	6813      	ldr	r3, [r2, #0]
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e008      	b.n	8001a44 <Report+0x70>
		if (HAL_UART_GetState(uartPort) == HAL_UART_STATE_BUSY_RX) break;
 8001a32:	6820      	ldr	r0, [r4, #0]
 8001a34:	f003 fc3c 	bl	80052b0 <HAL_UART_GetState>
 8001a38:	2822      	cmp	r0, #34	; 0x22
		HAL_Delay(1);
 8001a3a:	f04f 0001 	mov.w	r0, #1
		if (HAL_UART_GetState(uartPort) == HAL_UART_STATE_BUSY_RX) break;
 8001a3e:	d006      	beq.n	8001a4e <Report+0x7a>
		HAL_Delay(1);
 8001a40:	f000 fc5c 	bl	80022fc <HAL_Delay>
	while (HAL_UART_GetState(uartPort) != HAL_UART_STATE_READY) {
 8001a44:	6820      	ldr	r0, [r4, #0]
 8001a46:	f003 fc33 	bl	80052b0 <HAL_UART_GetState>
 8001a4a:	2820      	cmp	r0, #32
 8001a4c:	d1f1      	bne.n	8001a32 <Report+0x5e>
}
 8001a4e:	2000      	movs	r0, #0
 8001a50:	b002      	add	sp, #8
 8001a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a56:	b002      	add	sp, #8
 8001a58:	4770      	bx	lr
	if (addTime) dl = sec_to_str(buff);
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f7ff ff8a 	bl	8001974 <sec_to_str>
 8001a60:	4604      	mov	r4, r0
 8001a62:	e7c1      	b.n	80019e8 <Report+0x14>
 8001a64:	20000570 	.word	0x20000570
 8001a68:	08005e8c 	.word	0x08005e8c
 8001a6c:	2000004c 	.word	0x2000004c
 8001a70:	20000048 	.word	0x20000048
 8001a74:	20000564 	.word	0x20000564

08001a78 <HAL_UART_RxCpltCallback>:
{
 8001a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (huart->Instance == USART1) {
 8001a7c:	6802      	ldr	r2, [r0, #0]
 8001a7e:	4b72      	ldr	r3, [pc, #456]	; (8001c48 <HAL_UART_RxCpltCallback+0x1d0>)
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_UART_RxCpltCallback+0x10>
}
 8001a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!startAPI) {
 8001a88:	4d70      	ldr	r5, [pc, #448]	; (8001c4c <HAL_UART_RxCpltCallback+0x1d4>)
 8001a8a:	782b      	ldrb	r3, [r5, #0]
 8001a8c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001a90:	bb2b      	cbnz	r3, 8001ade <HAL_UART_RxCpltCallback+0x66>
			if (rxByte != BACK_SPACE) {
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_UART_RxCpltCallback+0x1d8>)
				rxBuf[rxInd & 0x3ff] = (char)rxByte;
 8001a94:	4e6f      	ldr	r6, [pc, #444]	; (8001c54 <HAL_UART_RxCpltCallback+0x1dc>)
			if (rxByte != BACK_SPACE) {
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	2a08      	cmp	r2, #8
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	d024      	beq.n	8001ae8 <HAL_UART_RxCpltCallback+0x70>
				rxBuf[rxInd & 0x3ff] = (char)rxByte;
 8001a9e:	8833      	ldrh	r3, [r6, #0]
 8001aa0:	4f6d      	ldr	r7, [pc, #436]	; (8001c58 <HAL_UART_RxCpltCallback+0x1e0>)
 8001aa2:	f3c3 0009 	ubfx	r0, r3, #0, #10
		if (rxByte == 0x0a) {//end of line
 8001aa6:	2a0a      	cmp	r2, #10
				rxBuf[rxInd & 0x3ff] = (char)rxByte;
 8001aa8:	543a      	strb	r2, [r7, r0]
		if (rxByte == 0x0a) {//end of line
 8001aaa:	d12c      	bne.n	8001b06 <HAL_UART_RxCpltCallback+0x8e>
			rxBuf[rxInd] = '\0';
 8001aac:	54f9      	strb	r1, [r7, r3]
			if (rxInd > 0) if (rxBuf[rxInd - 1] == '\r') rxBuf[rxInd - 1] = '\0';
 8001aae:	b123      	cbz	r3, 8001aba <HAL_UART_RxCpltCallback+0x42>
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	5cfa      	ldrb	r2, [r7, r3]
 8001ab4:	2a0d      	cmp	r2, #13
 8001ab6:	bf08      	it	eq
 8001ab8:	54f9      	strbeq	r1, [r7, r3]
			if ((ui = strstr(rxBuf, _progfw))) {//const char *_progfw = "prog:17308:0x4549ABBB";
 8001aba:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_UART_RxCpltCallback+0x1e4>)
 8001abc:	4866      	ldr	r0, [pc, #408]	; (8001c58 <HAL_UART_RxCpltCallback+0x1e0>)
 8001abe:	f8d3 8000 	ldr.w	r8, [r3]
 8001ac2:	4641      	mov	r1, r8
 8001ac4:	f003 fdb1 	bl	800562a <strstr>
 8001ac8:	b300      	cbz	r0, 8001b0c <HAL_UART_RxCpltCallback+0x94>
				if (ui == rxBuf) {
 8001aca:	42b8      	cmp	r0, r7
 8001acc:	d02f      	beq.n	8001b2e <HAL_UART_RxCpltCallback+0xb6>
			rxInd = 0;
 8001ace:	2100      	movs	r1, #0
			memset(rxBuf, 0, sizeof(rxBuf));
 8001ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad4:	4860      	ldr	r0, [pc, #384]	; (8001c58 <HAL_UART_RxCpltCallback+0x1e0>)
			rxInd = 0;
 8001ad6:	8031      	strh	r1, [r6, #0]
			memset(rxBuf, 0, sizeof(rxBuf));
 8001ad8:	f003 fca8 	bl	800542c <memset>
 8001adc:	e009      	b.n	8001af2 <HAL_UART_RxCpltCallback+0x7a>
			blkRdy = 1;
 8001ade:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <HAL_UART_RxCpltCallback+0x1e8>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
}
 8001ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (rxInd) rxInd--;
 8001ae8:	8833      	ldrh	r3, [r6, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	bf38      	it	cc
 8001aee:	2301      	movcc	r3, #1
		} else rxInd++;
 8001af0:	8033      	strh	r3, [r6, #0]
		if (!startAPI) HAL_UART_Receive_IT(huart, &rxByte, 1);
 8001af2:	782b      	ldrb	r3, [r5, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1c5      	bne.n	8001a84 <HAL_UART_RxCpltCallback+0xc>
 8001af8:	4620      	mov	r0, r4
 8001afa:	4955      	ldr	r1, [pc, #340]	; (8001c50 <HAL_UART_RxCpltCallback+0x1d8>)
}
 8001afc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if (!startAPI) HAL_UART_Receive_IT(huart, &rxByte, 1);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f003 b88f 	b.w	8004c24 <HAL_UART_Receive_IT>
 8001b06:	3301      	adds	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	e7f1      	b.n	8001af0 <HAL_UART_RxCpltCallback+0x78>
			} else if ((ui = strstr(rxBuf, _getfw))) {//const char *_getfw = "read\r\n";
 8001b0c:	4b55      	ldr	r3, [pc, #340]	; (8001c64 <HAL_UART_RxCpltCallback+0x1ec>)
 8001b0e:	4852      	ldr	r0, [pc, #328]	; (8001c58 <HAL_UART_RxCpltCallback+0x1e0>)
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	f003 fd8a 	bl	800562a <strstr>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d043      	beq.n	8001ba2 <HAL_UART_RxCpltCallback+0x12a>
				if (ui == rxBuf) {
 8001b1a:	42b8      	cmp	r0, r7
 8001b1c:	d1d7      	bne.n	8001ace <HAL_UART_RxCpltCallback+0x56>
					if (!startAPI) {
 8001b1e:	782b      	ldrb	r3, [r5, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1d4      	bne.n	8001ace <HAL_UART_RxCpltCallback+0x56>
						apiCmd = apiRead;
 8001b24:	4a50      	ldr	r2, [pc, #320]	; (8001c68 <HAL_UART_RxCpltCallback+0x1f0>)
						startAPI = true;
 8001b26:	2301      	movs	r3, #1
						apiCmd = apiRead;
 8001b28:	7013      	strb	r3, [r2, #0]
						startAPI = true;
 8001b2a:	702b      	strb	r3, [r5, #0]
						apiCmd = apiRead;
 8001b2c:	e7cf      	b.n	8001ace <HAL_UART_RxCpltCallback+0x56>
					ui += strlen(_progfw);
 8001b2e:	4640      	mov	r0, r8
 8001b30:	f7fe fb56 	bl	80001e0 <strlen>
 8001b34:	4407      	add	r7, r0
					char *uki = strchr(ui, ':');
 8001b36:	4638      	mov	r0, r7
 8001b38:	213a      	movs	r1, #58	; 0x3a
 8001b3a:	f003 fd69 	bl	8005610 <strchr>
					if (uki) {
 8001b3e:	4680      	mov	r8, r0
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d0c4      	beq.n	8001ace <HAL_UART_RxCpltCallback+0x56>
						char *ucrc = strstr(uki, "0x");
 8001b44:	4949      	ldr	r1, [pc, #292]	; (8001c6c <HAL_UART_RxCpltCallback+0x1f4>)
 8001b46:	f003 fd70 	bl	800562a <strstr>
						if (ucrc) {
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d043      	beq.n	8001bd6 <HAL_UART_RxCpltCallback+0x15e>
							ucrc += 2;
 8001b4e:	f100 0902 	add.w	r9, r0, #2
							file_crc = hex2bin(ucrc, strlen(ucrc));
 8001b52:	4648      	mov	r0, r9
 8001b54:	f7fe fb44 	bl	80001e0 <strlen>
 8001b58:	b2c1      	uxtb	r1, r0
 8001b5a:	4648      	mov	r0, r9
 8001b5c:	f7ff faec 	bl	8001138 <hex2bin>
 8001b60:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_UART_RxCpltCallback+0x1f8>)
 8001b62:	6018      	str	r0, [r3, #0]
						*uki = '\0';
 8001b64:	2300      	movs	r3, #0
						if (strstr(ui, "0x")) {
 8001b66:	4941      	ldr	r1, [pc, #260]	; (8001c6c <HAL_UART_RxCpltCallback+0x1f4>)
						*uki = '\0';
 8001b68:	f888 3000 	strb.w	r3, [r8]
						if (strstr(ui, "0x")) {
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	f003 fd5c 	bl	800562a <strstr>
 8001b72:	b350      	cbz	r0, 8001bca <HAL_UART_RxCpltCallback+0x152>
							ui += 2;
 8001b74:	3702      	adds	r7, #2
							file_size = hex2bin(ui, strlen(ui));
 8001b76:	4638      	mov	r0, r7
 8001b78:	f7fe fb32 	bl	80001e0 <strlen>
 8001b7c:	b2c1      	uxtb	r1, r0
 8001b7e:	4638      	mov	r0, r7
 8001b80:	f7ff fada 	bl	8001138 <hex2bin>
 8001b84:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_UART_RxCpltCallback+0x1fc>)
 8001b86:	6018      	str	r0, [r3, #0]
						if (file_size < MAX_API_SIZE) {
 8001b88:	4a3b      	ldr	r2, [pc, #236]	; (8001c78 <HAL_UART_RxCpltCallback+0x200>)
 8001b8a:	4290      	cmp	r0, r2
 8001b8c:	d81a      	bhi.n	8001bc4 <HAL_UART_RxCpltCallback+0x14c>
							if (!startAPI) {
 8001b8e:	782b      	ldrb	r3, [r5, #0]
 8001b90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d19a      	bne.n	8001ace <HAL_UART_RxCpltCallback+0x56>
								apiCmd = apiProg;
 8001b98:	4933      	ldr	r1, [pc, #204]	; (8001c68 <HAL_UART_RxCpltCallback+0x1f0>)
								startAPI = true;
 8001b9a:	2301      	movs	r3, #1
								apiCmd = apiProg;
 8001b9c:	700a      	strb	r2, [r1, #0]
								startAPI = true;
 8001b9e:	702b      	strb	r3, [r5, #0]
								apiCmd = apiProg;
 8001ba0:	e795      	b.n	8001ace <HAL_UART_RxCpltCallback+0x56>
			} else if ((ui = strstr(rxBuf, _apiStop))) {
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_UART_RxCpltCallback+0x204>)
 8001ba4:	482c      	ldr	r0, [pc, #176]	; (8001c58 <HAL_UART_RxCpltCallback+0x1e0>)
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	f003 fd3f 	bl	800562a <strstr>
 8001bac:	b1c0      	cbz	r0, 8001be0 <HAL_UART_RxCpltCallback+0x168>
				if (ui == rxBuf) {
 8001bae:	42b8      	cmp	r0, r7
 8001bb0:	d18d      	bne.n	8001ace <HAL_UART_RxCpltCallback+0x56>
					if (!startAPI) {
 8001bb2:	782b      	ldrb	r3, [r5, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d18a      	bne.n	8001ace <HAL_UART_RxCpltCallback+0x56>
						apiCmd = apiStop;
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_UART_RxCpltCallback+0x1f0>)
 8001bba:	2102      	movs	r1, #2
						startAPI = true;
 8001bbc:	2301      	movs	r3, #1
						apiCmd = apiStop;
 8001bbe:	7011      	strb	r1, [r2, #0]
						startAPI = true;
 8001bc0:	702b      	strb	r3, [r5, #0]
						apiCmd = apiStop;
 8001bc2:	e784      	b.n	8001ace <HAL_UART_RxCpltCallback+0x56>
						} else file_size = 0;
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e781      	b.n	8001ace <HAL_UART_RxCpltCallback+0x56>
							file_size = atoi(ui);
 8001bca:	4638      	mov	r0, r7
 8001bcc:	f003 fbde 	bl	800538c <atoi>
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <HAL_UART_RxCpltCallback+0x1fc>)
 8001bd2:	6018      	str	r0, [r3, #0]
 8001bd4:	e7d8      	b.n	8001b88 <HAL_UART_RxCpltCallback+0x110>
							file_crc = atol(ucrc);
 8001bd6:	f003 fbdd 	bl	8005394 <atol>
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_UART_RxCpltCallback+0x1f8>)
 8001bdc:	6018      	str	r0, [r3, #0]
 8001bde:	e7c1      	b.n	8001b64 <HAL_UART_RxCpltCallback+0xec>
			} else if ((ui = strstr(rxBuf, _switch))) {
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_UART_RxCpltCallback+0x208>)
 8001be2:	481d      	ldr	r0, [pc, #116]	; (8001c58 <HAL_UART_RxCpltCallback+0x1e0>)
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	f003 fd20 	bl	800562a <strstr>
 8001bea:	b160      	cbz	r0, 8001c06 <HAL_UART_RxCpltCallback+0x18e>
				if (ui == rxBuf) {
 8001bec:	42b8      	cmp	r0, r7
 8001bee:	f47f af6e 	bne.w	8001ace <HAL_UART_RxCpltCallback+0x56>
					if (!startAPI) {
 8001bf2:	782b      	ldrb	r3, [r5, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f47f af6a 	bne.w	8001ace <HAL_UART_RxCpltCallback+0x56>
						apiCmd = apiSwitch;
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_UART_RxCpltCallback+0x1f0>)
 8001bfc:	2103      	movs	r1, #3
						startAPI = true;
 8001bfe:	2301      	movs	r3, #1
						apiCmd = apiSwitch;
 8001c00:	7011      	strb	r1, [r2, #0]
						startAPI = true;
 8001c02:	702b      	strb	r3, [r5, #0]
						apiCmd = apiSwitch;
 8001c04:	e763      	b.n	8001ace <HAL_UART_RxCpltCallback+0x56>
			} else if ((ui = strstr(rxBuf, _next))) {
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_UART_RxCpltCallback+0x20c>)
 8001c08:	4813      	ldr	r0, [pc, #76]	; (8001c58 <HAL_UART_RxCpltCallback+0x1e0>)
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	f003 fd0d 	bl	800562a <strstr>
 8001c10:	b148      	cbz	r0, 8001c26 <HAL_UART_RxCpltCallback+0x1ae>
				if (ui == rxBuf) {
 8001c12:	42b8      	cmp	r0, r7
 8001c14:	f47f af5b 	bne.w	8001ace <HAL_UART_RxCpltCallback+0x56>
					if (!startAPI) startAPI = true;
 8001c18:	782b      	ldrb	r3, [r5, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f af57 	bne.w	8001ace <HAL_UART_RxCpltCallback+0x56>
 8001c20:	2301      	movs	r3, #1
 8001c22:	702b      	strb	r3, [r5, #0]
 8001c24:	e753      	b.n	8001ace <HAL_UART_RxCpltCallback+0x56>
			} else if ((ui = strstr(rxBuf, _done))) {
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <HAL_UART_RxCpltCallback+0x210>)
 8001c28:	480b      	ldr	r0, [pc, #44]	; (8001c58 <HAL_UART_RxCpltCallback+0x1e0>)
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	f003 fcfd 	bl	800562a <strstr>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	f43f af4c 	beq.w	8001ace <HAL_UART_RxCpltCallback+0x56>
				if (ui == rxBuf) {
 8001c36:	42b8      	cmp	r0, r7
 8001c38:	f47f af49 	bne.w	8001ace <HAL_UART_RxCpltCallback+0x56>
						apiCmd = apiDone;
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_UART_RxCpltCallback+0x1f0>)
 8001c3e:	2104      	movs	r1, #4
						startAPI = true;
 8001c40:	2301      	movs	r3, #1
						apiCmd = apiDone;
 8001c42:	7011      	strb	r1, [r2, #0]
						startAPI = true;
 8001c44:	702b      	strb	r3, [r5, #0]
						apiCmd = apiDone;
 8001c46:	e742      	b.n	8001ace <HAL_UART_RxCpltCallback+0x56>
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	2000056e 	.word	0x2000056e
 8001c50:	20000982 	.word	0x20000982
 8001c54:	2000056c 	.word	0x2000056c
 8001c58:	20000984 	.word	0x20000984
 8001c5c:	20000010 	.word	0x20000010
 8001c60:	20000038 	.word	0x20000038
 8001c64:	20000008 	.word	0x20000008
 8001c68:	2000002c 	.word	0x2000002c
 8001c6c:	080065ec 	.word	0x080065ec
 8001c70:	20000108 	.word	0x20000108
 8001c74:	2000010c 	.word	0x2000010c
 8001c78:	00077fef 	.word	0x00077fef
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000014 	.word	0x20000014
 8001c84:	2000000c 	.word	0x2000000c
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_UART_ErrorCallback>:
	if ((huart->Instance == USART1) || (huart->Instance == USART2)) devError |= devUART;
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_UART_ErrorCallback+0x20>)
 8001c8e:	6803      	ldr	r3, [r0, #0]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d004      	beq.n	8001c9e <HAL_UART_ErrorCallback+0x12>
 8001c94:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d000      	beq.n	8001c9e <HAL_UART_ErrorCallback+0x12>
}
 8001c9c:	4770      	bx	lr
	if ((huart->Instance == USART1) || (huart->Instance == USART2)) devError |= devUART;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_UART_ErrorCallback+0x24>)
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	20000564 	.word	0x20000564

08001cb4 <HAL_UART_TxCpltCallback>:
	if (huart->Instance == USART1) uartReady = true;
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_UART_TxCpltCallback+0x20>)
 8001cb6:	6803      	ldr	r3, [r0, #0]
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_UART_TxCpltCallback+0x18>
	if (huart->Instance == USART2) logReady = true;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_UART_TxCpltCallback+0x24>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d000      	beq.n	8001cc4 <HAL_UART_TxCpltCallback+0x10>
}
 8001cc2:	4770      	bx	lr
	if (huart->Instance == USART2) logReady = true;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_UART_TxCpltCallback+0x28>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
}
 8001cca:	4770      	bx	lr
	if (huart->Instance == USART1) uartReady = true;
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <HAL_UART_TxCpltCallback+0x2c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	4770      	bx	lr
 8001cd4:	40011000 	.word	0x40011000
 8001cd8:	40004400 	.word	0x40004400
 8001cdc:	2000002d 	.word	0x2000002d
 8001ce0:	2000004c 	.word	0x2000004c

08001ce4 <HAL_I2C_ErrorCallback>:
		if (hi2c->Instance == I2C1) devError |= devI2C;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_I2C_ErrorCallback+0x18>)
 8001ce6:	6802      	ldr	r2, [r0, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d000      	beq.n	8001cee <HAL_I2C_ErrorCallback+0xa>
	}
 8001cec:	4770      	bx	lr
		if (hi2c->Instance == I2C1) devError |= devI2C;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_I2C_ErrorCallback+0x1c>)
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	f043 030f 	orr.w	r3, r3, #15
 8001cf6:	6013      	str	r3, [r2, #0]
	}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	20000564 	.word	0x20000564

08001d04 <HAL_I2C_MasterTxCpltCallback>:
		if (hi2c->Instance == I2C1) {
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_I2C_MasterTxCpltCallback+0x14>)
 8001d06:	6802      	ldr	r2, [r0, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d000      	beq.n	8001d0e <HAL_I2C_MasterTxCpltCallback+0xa>
	}
 8001d0c:	4770      	bx	lr
			i2c_txReady = 1;
 8001d0e:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_I2C_MasterTxCpltCallback+0x18>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
	}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	20000d84 	.word	0x20000d84

08001d20 <HAL_I2C_MasterRxCpltCallback>:
		if (hi2c->Instance == I2C1) {
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_I2C_MasterRxCpltCallback+0x14>)
 8001d22:	6802      	ldr	r2, [r0, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d000      	beq.n	8001d2a <HAL_I2C_MasterRxCpltCallback+0xa>
	}
 8001d28:	4770      	bx	lr
			i2c_rxReady = 1;
 8001d2a:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
	}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40005400 	.word	0x40005400
 8001d38:	2000097e 	.word	0x2000097e

08001d3c <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM3) {// период срабатывания 10 мсек.
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001d3e:	6802      	ldr	r2, [r0, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d000      	beq.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001d44:	4770      	bx	lr
	mSecCounter++;
 8001d46:	490b      	ldr	r1, [pc, #44]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d48:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d4a:	680b      	ldr	r3, [r1, #0]
		if (!(get_mSecCounter() % _1s)) {// 1 seconda
 8001d4c:	480b      	ldr	r0, [pc, #44]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x40>)
	mSecCounter++;
 8001d4e:	3301      	adds	r3, #1
 8001d50:	fb02 f203 	mul.w	r2, r2, r3
		if (!(get_mSecCounter() % _1s)) {// 1 seconda
 8001d54:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
	mSecCounter++;
 8001d58:	600b      	str	r3, [r1, #0]
		if (!(get_mSecCounter() % _1s)) {// 1 seconda
 8001d5a:	d3f3      	bcc.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x8>
	SecCounter++;
 8001d5c:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x44>)
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//set ON/OFF
 8001d5e:	4809      	ldr	r0, [pc, #36]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x48>)
	SecCounter++;
 8001d60:	6813      	ldr	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//set ON/OFF
 8001d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	SecCounter++;
 8001d66:	3301      	adds	r3, #1
 8001d68:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//set ON/OFF
 8001d6a:	f001 b97b 	b.w	8003064 <HAL_GPIO_TogglePin>
 8001d6e:	bf00      	nop
 8001d70:	40000400 	.word	0x40000400
 8001d74:	20000568 	.word	0x20000568
 8001d78:	c28f5c29 	.word	0xc28f5c29
 8001d7c:	028f5c28 	.word	0x028f5c28
 8001d80:	20000560 	.word	0x20000560
 8001d84:	40020800 	.word	0x40020800

08001d88 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <Error_Handler+0x2>

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b500      	push	{lr}
 8001d8e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_MspInit+0x44>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	9200      	str	r2, [sp, #0]
 8001d96:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d98:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001d9c:	6459      	str	r1, [r3, #68]	; 0x44
 8001d9e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001da0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001da4:	9100      	str	r1, [sp, #0]
 8001da6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001dac:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001db0:	6419      	str	r1, [r3, #64]	; 0x40
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001dba:	4611      	mov	r1, r2
 8001dbc:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001dc0:	f000 fb60 	bl	8002484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001dc4:	2004      	movs	r0, #4

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc6:	b003      	add	sp, #12
 8001dc8:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001dcc:	f000 bb92 	b.w	80024f4 <HAL_NVIC_EnableIRQ>
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8001dd6:	6802      	ldr	r2, [r0, #0]
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_I2C_MspInit+0xf4>)
{
 8001dda:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8001dde:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001de4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001de8:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */
#endif
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dec:	b009      	add	sp, #36	; 0x24
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	4f36      	ldr	r7, [pc, #216]	; (8001ecc <HAL_I2C_MspInit+0xf8>)
 8001df2:	9401      	str	r4, [sp, #4]
 8001df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e04:	23c0      	movs	r3, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0a:	2212      	movs	r2, #18
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e12:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	2603      	movs	r6, #3
 8001e18:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	482d      	ldr	r0, [pc, #180]	; (8001ed0 <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e1c:	e9cd 6306 	strd	r6, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f001 f82a 	bl	8002e78 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	9402      	str	r4, [sp, #8]
 8001e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001e28:	4e2a      	ldr	r6, [pc, #168]	; (8001ed4 <HAL_I2C_MspInit+0x100>)
 8001e2a:	482b      	ldr	r0, [pc, #172]	; (8001ed8 <HAL_I2C_MspInit+0x104>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2c:	60b4      	str	r4, [r6, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e32:	643b      	str	r3, [r7, #64]	; 0x40
 8001e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001e36:	6030      	str	r0, [r6, #0]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e40:	60f4      	str	r4, [r6, #12]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001e42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e4e:	4630      	mov	r0, r6
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e50:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e54:	61f4      	str	r4, [r6, #28]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e56:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001e58:	6071      	str	r1, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e5a:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e5c:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e5e:	f000 fb71 	bl	8002544 <HAL_DMA_Init>
 8001e62:	bb58      	cbnz	r0, 8001ebc <HAL_I2C_MspInit+0xe8>
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001e64:	4c1d      	ldr	r4, [pc, #116]	; (8001edc <HAL_I2C_MspInit+0x108>)
 8001e66:	481e      	ldr	r0, [pc, #120]	; (8001ee0 <HAL_I2C_MspInit+0x10c>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001e68:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6a:	2340      	movs	r3, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001e74:	6020      	str	r0, [r4, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e76:	60a3      	str	r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e78:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001e7a:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7c:	e9c4 3305 	strd	r3, r3, [r4, #20]
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001e80:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e82:	6121      	str	r1, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e84:	6222      	str	r2, [r4, #32]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001e86:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e88:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001e8a:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8c:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e8e:	f000 fb59 	bl	8002544 <HAL_DMA_Init>
 8001e92:	b9b0      	cbnz	r0, 8001ec2 <HAL_I2C_MspInit+0xee>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001e94:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2101      	movs	r1, #1
 8001e9a:	201f      	movs	r0, #31
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001e9c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001e9e:	f000 faf1 	bl	8002484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ea2:	201f      	movs	r0, #31
 8001ea4:	f000 fb26 	bl	80024f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2020      	movs	r0, #32
 8001eae:	f000 fae9 	bl	8002484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001eb2:	2020      	movs	r0, #32
 8001eb4:	f000 fb1e 	bl	80024f4 <HAL_NVIC_EnableIRQ>
}
 8001eb8:	b009      	add	sp, #36	; 0x24
 8001eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001ebc:	f7ff ff64 	bl	8001d88 <Error_Handler>
 8001ec0:	e7d0      	b.n	8001e64 <HAL_I2C_MspInit+0x90>
      Error_Handler();
 8001ec2:	f7ff ff61 	bl	8001d88 <Error_Handler>
 8001ec6:	e7e5      	b.n	8001e94 <HAL_I2C_MspInit+0xc0>
 8001ec8:	40005400 	.word	0x40005400
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	2000110c 	.word	0x2000110c
 8001ed8:	40026010 	.word	0x40026010
 8001edc:	20000e64 	.word	0x20000e64
 8001ee0:	40026028 	.word	0x40026028

08001ee4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_TIM_Base_MspInit+0x3c>)
 8001ee6:	6802      	ldr	r2, [r0, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d000      	beq.n	8001eee <HAL_TIM_Base_MspInit+0xa>
 8001eec:	4770      	bx	lr
{
 8001eee:	b500      	push	{lr}
 8001ef0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8001ef8:	9201      	str	r2, [sp, #4]
 8001efa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001efc:	f041 0102 	orr.w	r1, r1, #2
 8001f00:	6419      	str	r1, [r3, #64]	; 0x40
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	9301      	str	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001f10:	f000 fab8 	bl	8002484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f14:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f16:	b003      	add	sp, #12
 8001f18:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f1c:	f000 baea 	b.w	80024f4 <HAL_NVIC_EnableIRQ>
 8001f20:	40000400 	.word	0x40000400

08001f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8001f26:	6803      	ldr	r3, [r0, #0]
 8001f28:	4a65      	ldr	r2, [pc, #404]	; (80020c0 <HAL_UART_MspInit+0x19c>)
{
 8001f2a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001f2e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001f34:	e9cd 4407 	strd	r4, r4, [sp, #28]
{
 8001f38:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3a:	9409      	str	r4, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8001f3c:	d004      	beq.n	8001f48 <HAL_UART_MspInit+0x24>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001f3e:	4a61      	ldr	r2, [pc, #388]	; (80020c4 <HAL_UART_MspInit+0x1a0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d06b      	beq.n	800201c <HAL_UART_MspInit+0xf8>
  /* USER CODE BEGIN USART2_MspInit 1 */
#endif
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f44:	b00b      	add	sp, #44	; 0x2c
 8001f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f48:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <HAL_UART_MspInit+0x1a4>)
 8001f4a:	9401      	str	r4, [sp, #4]
 8001f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001f4e:	4e5f      	ldr	r6, [pc, #380]	; (80020cc <HAL_UART_MspInit+0x1a8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f50:	f042 0210 	orr.w	r2, r2, #16
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
 8001f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f58:	f002 0210 	and.w	r2, r2, #16
 8001f5c:	9201      	str	r2, [sp, #4]
 8001f5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	9402      	str	r4, [sp, #8]
 8001f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f76:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	9802      	ldr	r0, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	4854      	ldr	r0, [pc, #336]	; (80020d0 <HAL_UART_MspInit+0x1ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f80:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f82:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f88:	e9cd 7308 	strd	r7, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f000 ff74 	bl	8002e78 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001f90:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <HAL_UART_MspInit+0x1b0>)
 8001f92:	6032      	str	r2, [r6, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001f94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f98:	2040      	movs	r0, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001fa2:	6073      	str	r3, [r6, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa4:	60b0      	str	r0, [r6, #8]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fa6:	2304      	movs	r3, #4
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fa8:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001faa:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001fae:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fb2:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fb6:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb8:	60f4      	str	r4, [r6, #12]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fba:	61f4      	str	r4, [r6, #28]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fbc:	6131      	str	r1, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fbe:	f000 fac1 	bl	8002544 <HAL_DMA_Init>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d176      	bne.n	80020b4 <HAL_UART_MspInit+0x190>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001fc6:	4c44      	ldr	r4, [pc, #272]	; (80020d8 <HAL_UART_MspInit+0x1b4>)
 8001fc8:	4944      	ldr	r1, [pc, #272]	; (80020dc <HAL_UART_MspInit+0x1b8>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fca:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001fd8:	6021      	str	r1, [r4, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fda:	6062      	str	r2, [r4, #4]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fdc:	2104      	movs	r1, #4
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fde:	2203      	movs	r2, #3
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe0:	6120      	str	r0, [r4, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001fe2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fe4:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe6:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fe8:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fec:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ff4:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ff8:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ffa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ffc:	f000 faa2 	bl	8002544 <HAL_DMA_Init>
 8002000:	2800      	cmp	r0, #0
 8002002:	d154      	bne.n	80020ae <HAL_UART_MspInit+0x18a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002004:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2103      	movs	r1, #3
 800200a:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800200c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800200e:	f000 fa39 	bl	8002484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002012:	2025      	movs	r0, #37	; 0x25
 8002014:	f000 fa6e 	bl	80024f4 <HAL_NVIC_EnableIRQ>
}
 8002018:	b00b      	add	sp, #44	; 0x2c
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_UART_MspInit+0x1a4>)
 800201e:	9403      	str	r4, [sp, #12]
 8002020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002022:	4e2f      	ldr	r6, [pc, #188]	; (80020e0 <HAL_UART_MspInit+0x1bc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002024:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
 800202a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002030:	9203      	str	r2, [sp, #12]
 8002032:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	9404      	str	r4, [sp, #16]
 8002036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800204a:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	9804      	ldr	r0, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	481f      	ldr	r0, [pc, #124]	; (80020d0 <HAL_UART_MspInit+0x1ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002052:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002054:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205a:	e9cd 7308 	strd	r7, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f000 ff0b 	bl	8002e78 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002062:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <HAL_UART_MspInit+0x1c0>)
 8002064:	6032      	str	r2, [r6, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800206a:	2040      	movs	r0, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800206c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002070:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002074:	6073      	str	r3, [r6, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002076:	60b0      	str	r0, [r6, #8]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002078:	2304      	movs	r3, #4
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800207a:	4630      	mov	r0, r6
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800207c:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002080:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002084:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002088:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800208a:	60f4      	str	r4, [r6, #12]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800208c:	61f4      	str	r4, [r6, #28]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800208e:	6131      	str	r1, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002090:	f000 fa58 	bl	8002544 <HAL_DMA_Init>
 8002094:	b988      	cbnz	r0, 80020ba <HAL_UART_MspInit+0x196>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002096:	636e      	str	r6, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2103      	movs	r1, #3
 800209c:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800209e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80020a0:	f000 f9f0 	bl	8002484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020a4:	2026      	movs	r0, #38	; 0x26
 80020a6:	f000 fa25 	bl	80024f4 <HAL_NVIC_EnableIRQ>
}
 80020aa:	b00b      	add	sp, #44	; 0x2c
 80020ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80020ae:	f7ff fe6b 	bl	8001d88 <Error_Handler>
 80020b2:	e7a7      	b.n	8002004 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80020b4:	f7ff fe68 	bl	8001d88 <Error_Handler>
 80020b8:	e785      	b.n	8001fc6 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 80020ba:	f7ff fe65 	bl	8001d88 <Error_Handler>
 80020be:	e7ea      	b.n	8002096 <HAL_UART_MspInit+0x172>
 80020c0:	40011000 	.word	0x40011000
 80020c4:	40004400 	.word	0x40004400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	20000f60 	.word	0x20000f60
 80020d0:	40020000 	.word	0x40020000
 80020d4:	400264b8 	.word	0x400264b8
 80020d8:	20001008 	.word	0x20001008
 80020dc:	40026440 	.word	0x40026440
 80020e0:	20001068 	.word	0x20001068
 80020e4:	400260a0 	.word	0x400260a0

080020e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler>
 80020ea:	bf00      	nop

080020ec <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <HardFault_Handler>
 80020ee:	bf00      	nop

080020f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <MemManage_Handler>
 80020f2:	bf00      	nop

080020f4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <BusFault_Handler>
 80020f6:	bf00      	nop

080020f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler>
 80020fa:	bf00      	nop

080020fc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop

08002100 <DebugMon_Handler>:
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <PendSV_Handler>:
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f000 b8e6 	b.w	80022d8 <HAL_IncTick>

0800210c <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800210c:	f000 bcf2 	b.w	8002af4 <HAL_FLASH_IRQHandler>

08002110 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */
#ifdef SET_MQ135
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(digMQ_Pin);
 8002110:	2004      	movs	r0, #4
 8002112:	f000 bfb3 	b.w	800307c <HAL_GPIO_EXTI_IRQHandler>
 8002116:	bf00      	nop

08002118 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
#if defined(SET_BME280) || defined(SET_SI7021)
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002118:	4801      	ldr	r0, [pc, #4]	; (8002120 <DMA1_Stream0_IRQHandler+0x8>)
 800211a:	f000 bb45 	b.w	80027a8 <HAL_DMA_IRQHandler>
 800211e:	bf00      	nop
 8002120:	2000110c 	.word	0x2000110c

08002124 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
#if defined(SET_BME280) || defined(SET_SI7021)
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002124:	4801      	ldr	r0, [pc, #4]	; (800212c <DMA1_Stream1_IRQHandler+0x8>)
 8002126:	f000 bb3f 	b.w	80027a8 <HAL_DMA_IRQHandler>
 800212a:	bf00      	nop
 800212c:	20000e64 	.word	0x20000e64

08002130 <DMA1_Stream4_IRQHandler>:
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop

08002134 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
#ifdef BOOT_LOADER
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002134:	4801      	ldr	r0, [pc, #4]	; (800213c <DMA1_Stream6_IRQHandler+0x8>)
 8002136:	f000 bb37 	b.w	80027a8 <HAL_DMA_IRQHandler>
 800213a:	bf00      	nop
 800213c:	20001068 	.word	0x20001068

08002140 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */
#ifdef SET_MQ135
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002140:	4801      	ldr	r0, [pc, #4]	; (8002148 <ADC_IRQHandler+0x8>)
 8002142:	f000 b8f3 	b.w	800232c <HAL_ADC_IRQHandler>
 8002146:	bf00      	nop
 8002148:	20000fc0 	.word	0x20000fc0

0800214c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800214c:	4801      	ldr	r0, [pc, #4]	; (8002154 <TIM3_IRQHandler+0x8>)
 800214e:	f002 bb31 	b.w	80047b4 <HAL_TIM_IRQHandler>
 8002152:	bf00      	nop
 8002154:	20000f18 	.word	0x20000f18

08002158 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
#if defined(SET_BME280) || defined(SET_SI7021)
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <I2C1_EV_IRQHandler+0x8>)
 800215a:	f001 b9f9 	b.w	8003550 <HAL_I2C_EV_IRQHandler>
 800215e:	bf00      	nop
 8002160:	20000ec4 	.word	0x20000ec4

08002164 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
#if defined(SET_BME280) || defined(SET_SI7021)
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <I2C1_ER_IRQHandler+0x8>)
 8002166:	f001 bea1 	b.w	8003eac <HAL_I2C_ER_IRQHandler>
 800216a:	bf00      	nop
 800216c:	20000ec4 	.word	0x20000ec4

08002170 <SPI2_IRQHandler>:
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002174:	4801      	ldr	r0, [pc, #4]	; (800217c <USART1_IRQHandler+0x8>)
 8002176:	f002 bee3 	b.w	8004f40 <HAL_UART_IRQHandler>
 800217a:	bf00      	nop
 800217c:	200010c8 	.word	0x200010c8

08002180 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
#ifdef BOOT_LOADER
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002180:	4801      	ldr	r0, [pc, #4]	; (8002188 <USART2_IRQHandler+0x8>)
 8002182:	f002 bedd 	b.w	8004f40 <HAL_UART_IRQHandler>
 8002186:	bf00      	nop
 8002188:	2000126c 	.word	0x2000126c

0800218c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800218c:	4801      	ldr	r0, [pc, #4]	; (8002194 <DMA2_Stream0_IRQHandler+0x8>)
 800218e:	f000 bb0b 	b.w	80027a8 <HAL_DMA_IRQHandler>
 8002192:	bf00      	nop
 8002194:	20000e04 	.word	0x20000e04

08002198 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002198:	4801      	ldr	r0, [pc, #4]	; (80021a0 <DMA2_Stream2_IRQHandler+0x8>)
 800219a:	f000 bb05 	b.w	80027a8 <HAL_DMA_IRQHandler>
 800219e:	bf00      	nop
 80021a0:	20001008 	.word	0x20001008

080021a4 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021a4:	4801      	ldr	r0, [pc, #4]	; (80021ac <DMA2_Stream7_IRQHandler+0x8>)
 80021a6:	f000 baff 	b.w	80027a8 <HAL_DMA_IRQHandler>
 80021aa:	bf00      	nop
 80021ac:	20000f60 	.word	0x20000f60

080021b0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b2:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80021b4:	680b      	ldr	r3, [r1, #0]
{
 80021b6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4c0c      	ldr	r4, [pc, #48]	; (80021ec <_sbrk+0x3c>)
 80021ba:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80021bc:	b12b      	cbz	r3, 80021ca <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4418      	add	r0, r3
 80021c0:	4290      	cmp	r0, r2
 80021c2:	d807      	bhi.n	80021d4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80021c4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <_sbrk+0x40>)
 80021cc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4418      	add	r0, r3
 80021d0:	4290      	cmp	r0, r2
 80021d2:	d9f7      	bls.n	80021c4 <_sbrk+0x14>
    errno = ENOMEM;
 80021d4:	f003 f8ea 	bl	80053ac <__errno>
 80021d8:	230c      	movs	r3, #12
 80021da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd10      	pop	{r4, pc}
 80021e4:	20000970 	.word	0x20000970
 80021e8:	20020000 	.word	0x20020000
 80021ec:	00000c00 	.word	0x00000c00
 80021f0:	20001348 	.word	0x20001348

080021f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f4:	4a03      	ldr	r2, [pc, #12]	; (8002204 <SystemInit+0x10>)
 80021f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800220e:	490e      	ldr	r1, [pc, #56]	; (8002248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002210:	4a0e      	ldr	r2, [pc, #56]	; (800224c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002224:	4c0b      	ldr	r4, [pc, #44]	; (8002254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002232:	f7ff ffdf 	bl	80021f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002236:	f003 f8bf 	bl	80053b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7ff f807 	bl	800124c <main>
  bx  lr    
 800223e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800224c:	08006834 	.word	0x08006834
  ldr r2, =_sbss
 8002250:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002254:	20001344 	.word	0x20001344

08002258 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <DMA1_Stream2_IRQHandler>
	...

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_InitTick+0x3c>)
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_InitTick+0x40>)
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
{
 8002266:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800226c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002270:	fbb3 f0f0 	udiv	r0, r3, r0
 8002274:	f000 f94c 	bl	8002510 <HAL_SYSTICK_Config>
 8002278:	b908      	cbnz	r0, 800227e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	2d0f      	cmp	r5, #15
 800227c:	d901      	bls.n	8002282 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800227e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002280:	bd38      	pop	{r3, r4, r5, pc}
 8002282:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	4602      	mov	r2, r0
 8002286:	4629      	mov	r1, r5
 8002288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228c:	f000 f8fa 	bl	8002484 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_InitTick+0x44>)
 8002292:	4620      	mov	r0, r4
 8002294:	601d      	str	r5, [r3, #0]
}
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	20000054 	.word	0x20000054
 800229c:	20000050 	.word	0x20000050
 80022a0:	20000058 	.word	0x20000058

080022a4 <HAL_Init>:
{
 80022a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_Init+0x30>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f000 f8cb 	bl	800245c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c6:	200f      	movs	r0, #15
 80022c8:	f7ff ffc8 	bl	800225c <HAL_InitTick>
  HAL_MspInit();
 80022cc:	f7ff fd5e 	bl	8001d8c <HAL_MspInit>
}
 80022d0:	2000      	movs	r0, #0
 80022d2:	bd08      	pop	{r3, pc}
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022d8:	4a03      	ldr	r2, [pc, #12]	; (80022e8 <HAL_IncTick+0x10>)
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <HAL_IncTick+0x14>)
 80022dc:	6811      	ldr	r1, [r2, #0]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	440b      	add	r3, r1
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20001310 	.word	0x20001310
 80022ec:	20000054 	.word	0x20000054

080022f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022f0:	4b01      	ldr	r3, [pc, #4]	; (80022f8 <HAL_GetTick+0x8>)
 80022f2:	6818      	ldr	r0, [r3, #0]
}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20001310 	.word	0x20001310

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fff6 	bl	80022f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002304:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002306:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002308:	d002      	beq.n	8002310 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_Delay+0x20>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002310:	f7ff ffee 	bl	80022f0 <HAL_GetTick>
 8002314:	1b43      	subs	r3, r0, r5
 8002316:	42a3      	cmp	r3, r4
 8002318:	d3fa      	bcc.n	8002310 <HAL_Delay+0x14>
  {
  }
}
 800231a:	bd38      	pop	{r3, r4, r5, pc}
 800231c:	20000054 	.word	0x20000054

08002320 <HAL_ADC_ConvCpltCallback>:
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <HAL_ADC_LevelOutOfWindowCallback>:
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop

08002328 <HAL_ADC_ErrorCallback>:
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop

0800232c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800232c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800232e:	6803      	ldr	r3, [r0, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002332:	6859      	ldr	r1, [r3, #4]
{
 8002334:	4604      	mov	r4, r0
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002336:	0790      	lsls	r0, r2, #30
 8002338:	d501      	bpl.n	800233e <HAL_ADC_IRQHandler+0x12>
 800233a:	068a      	lsls	r2, r1, #26
 800233c:	d453      	bmi.n	80023e6 <HAL_ADC_IRQHandler+0xba>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800233e:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002340:	6859      	ldr	r1, [r3, #4]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002342:	0752      	lsls	r2, r2, #29
 8002344:	d501      	bpl.n	800234a <HAL_ADC_IRQHandler+0x1e>
 8002346:	060d      	lsls	r5, r1, #24
 8002348:	d41b      	bmi.n	8002382 <HAL_ADC_IRQHandler+0x56>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800234a:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800234c:	6859      	ldr	r1, [r3, #4]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800234e:	07d0      	lsls	r0, r2, #31
 8002350:	d501      	bpl.n	8002356 <HAL_ADC_IRQHandler+0x2a>
 8002352:	064a      	lsls	r2, r1, #25
 8002354:	d406      	bmi.n	8002364 <HAL_ADC_IRQHandler+0x38>
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002356:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002358:	6859      	ldr	r1, [r3, #4]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800235a:	0690      	lsls	r0, r2, #26
 800235c:	d501      	bpl.n	8002362 <HAL_ADC_IRQHandler+0x36>
 800235e:	014a      	lsls	r2, r1, #5
 8002360:	d469      	bmi.n	8002436 <HAL_ADC_IRQHandler+0x10a>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  }
}
 8002362:	bd38      	pop	{r3, r4, r5, pc}
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	07d5      	lsls	r5, r2, #31
 8002368:	d5f5      	bpl.n	8002356 <HAL_ADC_IRQHandler+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800236a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff ffd6 	bl	8002324 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	f06f 0201 	mvn.w	r2, #1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e7e9      	b.n	8002356 <HAL_ADC_IRQHandler+0x2a>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002382:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002384:	06d0      	lsls	r0, r2, #27
 8002386:	d403      	bmi.n	8002390 <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002388:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800238a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800238e:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002396:	d11e      	bne.n	80023d6 <HAL_ADC_IRQHandler+0xaa>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800239a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800239e:	d002      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x7a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023a0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023a2:	0551      	lsls	r1, r2, #21
 80023a4:	d417      	bmi.n	80023d6 <HAL_ADC_IRQHandler+0xaa>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023a6:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023a8:	0552      	lsls	r2, r2, #21
 80023aa:	d414      	bmi.n	80023d6 <HAL_ADC_IRQHandler+0xaa>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023ac:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023ae:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80023b2:	d110      	bne.n	80023d6 <HAL_ADC_IRQHandler+0xaa>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023b4:	7e22      	ldrb	r2, [r4, #24]
 80023b6:	b972      	cbnz	r2, 80023d6 <HAL_ADC_IRQHandler+0xaa>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023be:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023c6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023ca:	05dd      	lsls	r5, r3, #23
 80023cc:	d403      	bmi.n	80023d6 <HAL_ADC_IRQHandler+0xaa>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023d6:	4620      	mov	r0, r4
 80023d8:	f000 f83e 	bl	8002458 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	f06f 020c 	mvn.w	r2, #12
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e7b1      	b.n	800234a <HAL_ADC_IRQHandler+0x1e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023e8:	06d5      	lsls	r5, r2, #27
 80023ea:	d403      	bmi.n	80023f4 <HAL_ADC_IRQHandler+0xc8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f2:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80023fa:	d114      	bne.n	8002426 <HAL_ADC_IRQHandler+0xfa>
 80023fc:	7e22      	ldrb	r2, [r4, #24]
 80023fe:	b992      	cbnz	r2, 8002426 <HAL_ADC_IRQHandler+0xfa>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002402:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002406:	d123      	bne.n	8002450 <HAL_ADC_IRQHandler+0x124>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	f022 0220 	bic.w	r2, r2, #32
 800240e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002416:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800241a:	04d9      	lsls	r1, r3, #19
 800241c:	d403      	bmi.n	8002426 <HAL_ADC_IRQHandler+0xfa>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff ff7a 	bl	8002320 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	f06f 0212 	mvn.w	r2, #18
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e783      	b.n	800233e <HAL_ADC_IRQHandler+0x12>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002436:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002438:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800243c:	f042 0202 	orr.w	r2, r2, #2
 8002440:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002442:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002444:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002446:	f7ff ff6f 	bl	8002328 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	601d      	str	r5, [r3, #0]
}
 800244e:	bd38      	pop	{r3, r4, r5, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002450:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002452:	0550      	lsls	r0, r2, #21
 8002454:	d4e7      	bmi.n	8002426 <HAL_ADC_IRQHandler+0xfa>
 8002456:	e7d7      	b.n	8002408 <HAL_ADC_IRQHandler+0xdc>

08002458 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4908      	ldr	r1, [pc, #32]	; (8002480 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800245e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002462:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002464:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002468:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800246e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002478:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800247c:	60cb      	str	r3, [r1, #12]
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_NVIC_SetPriority+0x68>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248e:	f1c3 0507 	rsb	r5, r3, #7
 8002492:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002494:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	bf28      	it	cs
 800249a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249c:	2c06      	cmp	r4, #6
 800249e:	d919      	bls.n	80024d4 <HAL_NVIC_SetPriority+0x50>
 80024a0:	3b03      	subs	r3, #3
 80024a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024a6:	409c      	lsls	r4, r3
 80024a8:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024b0:	40ac      	lsls	r4, r5
 80024b2:	ea21 0104 	bic.w	r1, r1, r4
 80024b6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80024b8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ba:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80024be:	db0c      	blt.n	80024da <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80024c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80024c8:	0109      	lsls	r1, r1, #4
 80024ca:	b2c9      	uxtb	r1, r1
 80024cc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024d0:	bc30      	pop	{r4, r5}
 80024d2:	4770      	bx	lr
 80024d4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	4613      	mov	r3, r2
 80024d8:	e7e8      	b.n	80024ac <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_NVIC_SetPriority+0x6c>)
 80024dc:	f000 000f 	and.w	r0, r0, #15
 80024e0:	0109      	lsls	r1, r1, #4
 80024e2:	4403      	add	r3, r0
 80024e4:	b2c9      	uxtb	r1, r1
 80024e6:	7619      	strb	r1, [r3, #24]
 80024e8:	bc30      	pop	{r4, r5}
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	e000ecfc 	.word	0xe000ecfc

080024f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024f4:	2800      	cmp	r0, #0
 80024f6:	db07      	blt.n	8002508 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f8:	f000 011f 	and.w	r1, r0, #31
 80024fc:	4a03      	ldr	r2, [pc, #12]	; (800250c <HAL_NVIC_EnableIRQ+0x18>)
 80024fe:	0940      	lsrs	r0, r0, #5
 8002500:	2301      	movs	r3, #1
 8002502:	408b      	lsls	r3, r1
 8002504:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e100 	.word	0xe000e100

08002510 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	3801      	subs	r0, #1
 8002512:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002516:	d20e      	bcs.n	8002536 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	4c08      	ldr	r4, [pc, #32]	; (8002540 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	20f0      	movs	r0, #240	; 0xf0
 8002522:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002526:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002528:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800252e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	6019      	str	r1, [r3, #0]
 8002534:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2001      	movs	r0, #1
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff fed2 	bl	80022f0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800254c:	2c00      	cmp	r4, #0
 800254e:	d054      	beq.n	80025fa <HAL_DMA_Init+0xb6>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002550:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002552:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002554:	2102      	movs	r1, #2
 8002556:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800255a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	4605      	mov	r5, r0
 8002566:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002568:	e005      	b.n	8002576 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256a:	f7ff fec1 	bl	80022f0 <HAL_GetTick>
 800256e:	1b43      	subs	r3, r0, r5
 8002570:	2b05      	cmp	r3, #5
 8002572:	d83b      	bhi.n	80025ec <HAL_DMA_Init+0xa8>
 8002574:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	07d1      	lsls	r1, r2, #31
 800257a:	d4f6      	bmi.n	800256a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257c:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002580:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002584:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002586:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 8002588:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258a:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258c:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002590:	4302      	orrs	r2, r0
 8002592:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002594:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002596:	4935      	ldr	r1, [pc, #212]	; (800266c <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002598:	4332      	orrs	r2, r6
 800259a:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800259c:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800259e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025a0:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a2:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a4:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a8:	d029      	beq.n	80025fe <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025aa:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025ac:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025ae:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025b2:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	492e      	ldr	r1, [pc, #184]	; (8002670 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80025b8:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025ba:	3a10      	subs	r2, #16
 80025bc:	fba1 0102 	umull	r0, r1, r1, r2
 80025c0:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025c2:	482c      	ldr	r0, [pc, #176]	; (8002674 <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025c4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025c8:	5c41      	ldrb	r1, [r0, r1]
 80025ca:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025cc:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80025d0:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025d2:	bf88      	it	hi
 80025d4:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d6:	223f      	movs	r2, #63	; 0x3f
 80025d8:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80025da:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025dc:	2100      	movs	r1, #0
 80025de:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e0:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e2:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80025e4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 80025e8:	4608      	mov	r0, r1
}
 80025ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ee:	2220      	movs	r2, #32
 80025f0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80025f6:	4618      	mov	r0, r3
}
 80025f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80025fa:	2001      	movs	r0, #1
}
 80025fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025fe:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8002602:	4328      	orrs	r0, r5
 8002604:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8002606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8002608:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800260a:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800260c:	f020 0007 	bic.w	r0, r0, #7
 8002610:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002612:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002616:	2d00      	cmp	r5, #0
 8002618:	d0cc      	beq.n	80025b4 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800261a:	b17e      	cbz	r6, 800263c <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800261c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002620:	d012      	beq.n	8002648 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002622:	2a02      	cmp	r2, #2
 8002624:	d903      	bls.n	800262e <HAL_DMA_Init+0xea>
 8002626:	2a03      	cmp	r2, #3
 8002628:	d1c4      	bne.n	80025b4 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262a:	01ea      	lsls	r2, r5, #7
 800262c:	d5c2      	bpl.n	80025b4 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800262e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002634:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002638:	4618      	mov	r0, r3
}
 800263a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800263c:	2a01      	cmp	r2, #1
 800263e:	d011      	beq.n	8002664 <HAL_DMA_Init+0x120>
 8002640:	f032 0202 	bics.w	r2, r2, #2
 8002644:	d1b6      	bne.n	80025b4 <HAL_DMA_Init+0x70>
 8002646:	e7f0      	b.n	800262a <HAL_DMA_Init+0xe6>
    switch (tmp)
 8002648:	2a03      	cmp	r2, #3
 800264a:	d8b3      	bhi.n	80025b4 <HAL_DMA_Init+0x70>
 800264c:	a101      	add	r1, pc, #4	; (adr r1, 8002654 <HAL_DMA_Init+0x110>)
 800264e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002652:	bf00      	nop
 8002654:	0800262f 	.word	0x0800262f
 8002658:	0800262b 	.word	0x0800262b
 800265c:	0800262f 	.word	0x0800262f
 8002660:	08002665 	.word	0x08002665
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002664:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002668:	d1a4      	bne.n	80025b4 <HAL_DMA_Init+0x70>
 800266a:	e7e0      	b.n	800262e <HAL_DMA_Init+0xea>
 800266c:	f010803f 	.word	0xf010803f
 8002670:	aaaaaaab 	.word	0xaaaaaaab
 8002674:	080066e8 	.word	0x080066e8

08002678 <HAL_DMA_Start_IT>:
{
 8002678:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800267a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002680:	2c01      	cmp	r4, #1
 8002682:	d034      	beq.n	80026ee <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002684:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002688:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800268a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800268c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002690:	d005      	beq.n	800269e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002692:	2300      	movs	r3, #0
 8002694:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8002698:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800269a:	2002      	movs	r0, #2
}
 800269c:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800269e:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a0:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a2:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026aa:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ac:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ae:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026b2:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026b4:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80026b6:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 80026b8:	bf0a      	itet	eq
 80026ba:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80026bc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80026be:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 80026c2:	bf18      	it	ne
 80026c4:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c6:	233f      	movs	r3, #63	; 0x3f
 80026c8:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 80026ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026cc:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	f043 0316 	orr.w	r3, r3, #22
 80026d4:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80026d6:	b11a      	cbz	r2, 80026e0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2000      	movs	r0, #0
}
 80026ea:	bcf0      	pop	{r4, r5, r6, r7}
 80026ec:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80026ee:	2002      	movs	r0, #2
}
 80026f0:	bcf0      	pop	{r4, r5, r6, r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_DMA_Abort>:
{
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80026fa:	f7ff fdf9 	bl	80022f0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002702:	2b02      	cmp	r3, #2
 8002704:	d006      	beq.n	8002714 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 8002706:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002708:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800270a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270e:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002710:	2001      	movs	r0, #1
}
 8002712:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002714:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002716:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f022 0216 	bic.w	r2, r2, #22
 800271e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002726:	4605      	mov	r5, r0
 8002728:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	b339      	cbz	r1, 800277c <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f022 0208 	bic.w	r2, r2, #8
 8002732:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273c:	e005      	b.n	800274a <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273e:	f7ff fdd7 	bl	80022f0 <HAL_GetTick>
 8002742:	1b43      	subs	r3, r0, r5
 8002744:	2b05      	cmp	r3, #5
 8002746:	d80f      	bhi.n	8002768 <HAL_DMA_Abort+0x74>
 8002748:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f013 0301 	ands.w	r3, r3, #1
 8002750:	d1f5      	bne.n	800273e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002752:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002754:	223f      	movs	r2, #63	; 0x3f
 8002756:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8002758:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275a:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 800275c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8002760:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  return HAL_OK;
 8002764:	4618      	mov	r0, r3
}
 8002766:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002768:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800276a:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800276c:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800276e:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002770:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002774:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002778:	4618      	mov	r0, r3
}
 800277a:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800277e:	2a00      	cmp	r2, #0
 8002780:	d1d4      	bne.n	800272c <HAL_DMA_Abort+0x38>
 8002782:	e7d7      	b.n	8002734 <HAL_DMA_Abort+0x40>

08002784 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002784:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002788:	2b02      	cmp	r3, #2
 800278a:	d003      	beq.n	8002794 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002790:	2001      	movs	r0, #1
 8002792:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002794:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002796:	2305      	movs	r3, #5
 8002798:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800279c:	6813      	ldr	r3, [r2, #0]
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80027a4:	2000      	movs	r0, #0
}
 80027a6:	4770      	bx	lr

080027a8 <HAL_DMA_IRQHandler>:
{
 80027a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ac:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80027ae:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80027b2:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80027b6:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b8:	4971      	ldr	r1, [pc, #452]	; (8002980 <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ba:	2208      	movs	r2, #8
 80027bc:	409a      	lsls	r2, r3
 80027be:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 80027c0:	680d      	ldr	r5, [r1, #0]
{
 80027c2:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	d004      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027c6:	6801      	ldr	r1, [r0, #0]
 80027c8:	680f      	ldr	r7, [r1, #0]
 80027ca:	0778      	lsls	r0, r7, #29
 80027cc:	f100 808a 	bmi.w	80028e4 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027d0:	2201      	movs	r2, #1
 80027d2:	409a      	lsls	r2, r3
 80027d4:	4222      	tst	r2, r4
 80027d6:	d004      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027d8:	f8d8 1000 	ldr.w	r1, [r8]
 80027dc:	6949      	ldr	r1, [r1, #20]
 80027de:	0609      	lsls	r1, r1, #24
 80027e0:	d478      	bmi.n	80028d4 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e2:	2204      	movs	r2, #4
 80027e4:	409a      	lsls	r2, r3
 80027e6:	4222      	tst	r2, r4
 80027e8:	d004      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ea:	f8d8 1000 	ldr.w	r1, [r8]
 80027ee:	6809      	ldr	r1, [r1, #0]
 80027f0:	078f      	lsls	r7, r1, #30
 80027f2:	d467      	bmi.n	80028c4 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	2210      	movs	r2, #16
 80027f6:	409a      	lsls	r2, r3
 80027f8:	4222      	tst	r2, r4
 80027fa:	d004      	beq.n	8002806 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027fc:	f8d8 1000 	ldr.w	r1, [r8]
 8002800:	680f      	ldr	r7, [r1, #0]
 8002802:	0738      	lsls	r0, r7, #28
 8002804:	d449      	bmi.n	800289a <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002806:	2220      	movs	r2, #32
 8002808:	409a      	lsls	r2, r3
 800280a:	4222      	tst	r2, r4
 800280c:	d017      	beq.n	800283e <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280e:	f8d8 1000 	ldr.w	r1, [r8]
 8002812:	680c      	ldr	r4, [r1, #0]
 8002814:	06e0      	lsls	r0, r4, #27
 8002816:	d512      	bpl.n	800283e <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002818:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800281a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800281e:	2a05      	cmp	r2, #5
 8002820:	d073      	beq.n	800290a <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002822:	680b      	ldr	r3, [r1, #0]
 8002824:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002828:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282a:	f000 8090 	beq.w	800294e <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282e:	0319      	lsls	r1, r3, #12
 8002830:	f140 809b 	bpl.w	800296a <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8002834:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8002838:	b10b      	cbz	r3, 800283e <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 800283a:	4640      	mov	r0, r8
 800283c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800283e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002842:	b33b      	cbz	r3, 8002894 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002844:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002848:	07da      	lsls	r2, r3, #31
 800284a:	d51b      	bpl.n	8002884 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 800284c:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002850:	494c      	ldr	r1, [pc, #304]	; (8002984 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002852:	2305      	movs	r3, #5
 8002854:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002858:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800285a:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002864:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8002866:	e002      	b.n	800286e <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002868:	6813      	ldr	r3, [r2, #0]
 800286a:	07db      	lsls	r3, r3, #31
 800286c:	d504      	bpl.n	8002878 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800286e:	9b01      	ldr	r3, [sp, #4]
 8002870:	3301      	adds	r3, #1
 8002872:	42ab      	cmp	r3, r5
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	d9f7      	bls.n	8002868 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8002878:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800287a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800287c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002880:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002884:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8002888:	b123      	cbz	r3, 8002894 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 800288a:	4640      	mov	r0, r8
}
 800288c:	b002      	add	sp, #8
 800288e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8002892:	4718      	bx	r3
}
 8002894:	b002      	add	sp, #8
 8002896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800289a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800289c:	680a      	ldr	r2, [r1, #0]
 800289e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a2:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a4:	d12a      	bne.n	80028fc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a6:	05d7      	lsls	r7, r2, #23
 80028a8:	d403      	bmi.n	80028b2 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028aa:	680a      	ldr	r2, [r1, #0]
 80028ac:	f022 0208 	bic.w	r2, r2, #8
 80028b0:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80028b2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80028b6:	2a00      	cmp	r2, #0
 80028b8:	d0a5      	beq.n	8002806 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80028ba:	4640      	mov	r0, r8
 80028bc:	4790      	blx	r2
 80028be:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80028c2:	e7a0      	b.n	8002806 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80028ca:	f042 0204 	orr.w	r2, r2, #4
 80028ce:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80028d2:	e78f      	b.n	80027f4 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028d4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028d6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80028da:	f042 0202 	orr.w	r2, r2, #2
 80028de:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80028e2:	e77e      	b.n	80027e2 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028e4:	680f      	ldr	r7, [r1, #0]
 80028e6:	f027 0704 	bic.w	r7, r7, #4
 80028ea:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028ec:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028ee:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80028fa:	e769      	b.n	80027d0 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fc:	0312      	lsls	r2, r2, #12
 80028fe:	d5d8      	bpl.n	80028b2 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002900:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002904:	2a00      	cmp	r2, #0
 8002906:	d1d8      	bne.n	80028ba <HAL_DMA_IRQHandler+0x112>
 8002908:	e77d      	b.n	8002806 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800290a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800290c:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002910:	f022 0216 	bic.w	r2, r2, #22
 8002914:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002916:	694a      	ldr	r2, [r1, #20]
 8002918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800291e:	b354      	cbz	r4, 8002976 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002920:	680a      	ldr	r2, [r1, #0]
 8002922:	f022 0208 	bic.w	r2, r2, #8
 8002926:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002928:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800292a:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
        hdma->State = HAL_DMA_STATE_READY;
 8002932:	2401      	movs	r4, #1
        __HAL_UNLOCK(hdma);
 8002934:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002936:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002938:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800293c:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002940:	2900      	cmp	r1, #0
 8002942:	d0a7      	beq.n	8002894 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8002944:	4640      	mov	r0, r8
}
 8002946:	b002      	add	sp, #8
 8002948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 800294c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002952:	f47f af6f 	bne.w	8002834 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002956:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002958:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800295a:	f022 0210 	bic.w	r2, r2, #16
 800295e:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8002960:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002964:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002968:	e764      	b.n	8002834 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 800296a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800296e:	2b00      	cmp	r3, #0
 8002970:	f47f af63 	bne.w	800283a <HAL_DMA_IRQHandler+0x92>
 8002974:	e763      	b.n	800283e <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002976:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800297a:	2a00      	cmp	r2, #0
 800297c:	d1d0      	bne.n	8002920 <HAL_DMA_IRQHandler+0x178>
 800297e:	e7d3      	b.n	8002928 <HAL_DMA_IRQHandler+0x180>
 8002980:	20000050 	.word	0x20000050
 8002984:	1b4e81b5 	.word	0x1b4e81b5

08002988 <HAL_DMA_RegisterCallback>:
{
 8002988:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 800298a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800298e:	2801      	cmp	r0, #1
 8002990:	d00f      	beq.n	80029b2 <HAL_DMA_RegisterCallback+0x2a>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002992:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
 8002996:	2801      	cmp	r0, #1
 8002998:	d004      	beq.n	80029a4 <HAL_DMA_RegisterCallback+0x1c>
    status =  HAL_ERROR;
 800299a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 80029a2:	4770      	bx	lr
    switch (CallbackID)
 80029a4:	2905      	cmp	r1, #5
 80029a6:	d818      	bhi.n	80029da <HAL_DMA_RegisterCallback+0x52>
 80029a8:	e8df f001 	tbb	[pc, r1]
 80029ac:	0b0e1114 	.word	0x0b0e1114
 80029b0:	0508      	.short	0x0508
  __HAL_LOCK(hdma);
 80029b2:	2002      	movs	r0, #2
}
 80029b4:	4770      	bx	lr
      hdma->XferAbortCallback = pCallback;
 80029b6:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2000      	movs	r0, #0
      break;
 80029ba:	e7ef      	b.n	800299c <HAL_DMA_RegisterCallback+0x14>
      hdma->XferErrorCallback = pCallback;
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2000      	movs	r0, #0
      break;
 80029c0:	e7ec      	b.n	800299c <HAL_DMA_RegisterCallback+0x14>
      hdma->XferM1HalfCpltCallback = pCallback;
 80029c2:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	2000      	movs	r0, #0
      break;
 80029c6:	e7e9      	b.n	800299c <HAL_DMA_RegisterCallback+0x14>
      hdma->XferM1CpltCallback = pCallback;
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2000      	movs	r0, #0
      break;
 80029cc:	e7e6      	b.n	800299c <HAL_DMA_RegisterCallback+0x14>
      hdma->XferHalfCpltCallback = pCallback;
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2000      	movs	r0, #0
      break;
 80029d2:	e7e3      	b.n	800299c <HAL_DMA_RegisterCallback+0x14>
      hdma->XferCpltCallback = pCallback;
 80029d4:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	4608      	mov	r0, r1
      break;
 80029d8:	e7e0      	b.n	800299c <HAL_DMA_RegisterCallback+0x14>
  if(HAL_DMA_STATE_READY == hdma->State)
 80029da:	2000      	movs	r0, #0
 80029dc:	e7de      	b.n	800299c <HAL_DMA_RegisterCallback+0x14>
 80029de:	bf00      	nop

080029e0 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 80029e0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_UnRegisterCallback+0x3a>
{
 80029e8:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ea:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80029ee:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80029f0:	42a2      	cmp	r2, r4
 80029f2:	b2d3      	uxtb	r3, r2
  __HAL_LOCK(hdma);
 80029f4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80029f8:	d007      	beq.n	8002a0a <HAL_DMA_UnRegisterCallback+0x2a>
    status = HAL_ERROR;
 80029fa:	4623      	mov	r3, r4
  __HAL_UNLOCK(hdma);
 80029fc:	2200      	movs	r2, #0
 80029fe:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8002a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a06:	4618      	mov	r0, r3
 8002a08:	4770      	bx	lr
    switch (CallbackID)
 8002a0a:	2906      	cmp	r1, #6
 8002a0c:	d8f6      	bhi.n	80029fc <HAL_DMA_UnRegisterCallback+0x1c>
 8002a0e:	e8df f001 	tbb	[pc, r1]
 8002a12:	1b1e      	.short	0x1b1e
 8002a14:	0f121518 	.word	0x0f121518
 8002a18:	07          	.byte	0x07
 8002a19:	00          	.byte	0x00
  __HAL_LOCK(hdma);
 8002a1a:	2302      	movs	r3, #2
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4770      	bx	lr
      hdma->XferCpltCallback = NULL;
 8002a20:	2300      	movs	r3, #0
      hdma->XferHalfCpltCallback = NULL;
 8002a22:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
      hdma->XferM1HalfCpltCallback = NULL;
 8002a26:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
      hdma->XferAbortCallback = NULL;
 8002a2a:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
      break; 
 8002a2e:	e7e5      	b.n	80029fc <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferAbortCallback = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	6503      	str	r3, [r0, #80]	; 0x50
      break; 
 8002a34:	e7e2      	b.n	80029fc <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferErrorCallback = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	64c3      	str	r3, [r0, #76]	; 0x4c
      break;
 8002a3a:	e7df      	b.n	80029fc <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferM1HalfCpltCallback = NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6483      	str	r3, [r0, #72]	; 0x48
      break;
 8002a40:	e7dc      	b.n	80029fc <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferM1CpltCallback = NULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	6443      	str	r3, [r0, #68]	; 0x44
      break;
 8002a46:	e7d9      	b.n	80029fc <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferHalfCpltCallback = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	6403      	str	r3, [r0, #64]	; 0x40
      break;
 8002a4c:	e7d6      	b.n	80029fc <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferCpltCallback = NULL;
 8002a4e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002a50:	460b      	mov	r3, r1
      hdma->XferCpltCallback = NULL;
 8002a52:	63c2      	str	r2, [r0, #60]	; 0x3c
      break;
 8002a54:	e7d2      	b.n	80029fc <HAL_DMA_UnRegisterCallback+0x1c>
 8002a56:	bf00      	nop

08002a58 <HAL_DMA_GetState>:
  return hdma->State;
 8002a58:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <FLASH_SetErrorCode+0x88>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	06d0      	lsls	r0, r2, #27
 8002a66:	d505      	bpl.n	8002a74 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a68:	4920      	ldr	r1, [pc, #128]	; (8002aec <FLASH_SetErrorCode+0x8c>)
 8002a6a:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a6c:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a6e:	4302      	orrs	r2, r0
 8002a70:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a72:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <FLASH_SetErrorCode+0x88>)
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	0691      	lsls	r1, r2, #26
 8002a7a:	d506      	bpl.n	8002a8a <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a7c:	491b      	ldr	r1, [pc, #108]	; (8002aec <FLASH_SetErrorCode+0x8c>)
 8002a7e:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a80:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a82:	f042 0208 	orr.w	r2, r2, #8
 8002a86:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a88:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <FLASH_SetErrorCode+0x88>)
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	0652      	lsls	r2, r2, #25
 8002a90:	d506      	bpl.n	8002aa0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a92:	4916      	ldr	r1, [pc, #88]	; (8002aec <FLASH_SetErrorCode+0x8c>)
 8002a94:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a96:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a98:	f042 0204 	orr.w	r2, r2, #4
 8002a9c:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a9e:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <FLASH_SetErrorCode+0x88>)
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	0610      	lsls	r0, r2, #24
 8002aa6:	d506      	bpl.n	8002ab6 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002aa8:	4910      	ldr	r1, [pc, #64]	; (8002aec <FLASH_SetErrorCode+0x8c>)
 8002aaa:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002aac:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002aae:	f042 0202 	orr.w	r2, r2, #2
 8002ab2:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002ab4:	60d8      	str	r0, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <FLASH_SetErrorCode+0x88>)
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	05d1      	lsls	r1, r2, #23
 8002abc:	d507      	bpl.n	8002ace <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002abe:	490b      	ldr	r1, [pc, #44]	; (8002aec <FLASH_SetErrorCode+0x8c>)
 8002ac0:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002ac2:	f44f 7080 	mov.w	r0, #256	; 0x100
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002acc:	60d8      	str	r0, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <FLASH_SetErrorCode+0x88>)
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	0792      	lsls	r2, r2, #30
 8002ad4:	d506      	bpl.n	8002ae4 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002ad6:	4905      	ldr	r1, [pc, #20]	; (8002aec <FLASH_SetErrorCode+0x8c>)
 8002ad8:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002ada:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002adc:	f042 0220 	orr.w	r2, r2, #32
 8002ae0:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002ae2:	60d8      	str	r0, [r3, #12]
  }
}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	20001314 	.word	0x20001314

08002af0 <HAL_FLASH_OperationErrorCallback>:
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop

08002af4 <HAL_FLASH_IRQHandler>:
{
 8002af4:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002af6:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_FLASH_IRQHandler+0xc4>)
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002af8:	4c30      	ldr	r4, [pc, #192]	; (8002bbc <HAL_FLASH_IRQHandler+0xc8>)
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
{
 8002b00:	b083      	sub	sp, #12
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002b02:	d00f      	beq.n	8002b24 <HAL_FLASH_IRQHandler+0x30>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002b04:	7823      	ldrb	r3, [r4, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d041      	beq.n	8002b8e <HAL_FLASH_IRQHandler+0x9a>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002b0a:	7823      	ldrb	r3, [r4, #0]
 8002b0c:	2b02      	cmp	r3, #2
      addresstmp = pFlash.Bank;
 8002b0e:	bf0c      	ite	eq
 8002b10:	6920      	ldreq	r0, [r4, #16]
      addresstmp = pFlash.Address;
 8002b12:	6960      	ldrne	r0, [r4, #20]
 8002b14:	9001      	str	r0, [sp, #4]
    FLASH_SetErrorCode();
 8002b16:	f7ff ffa3 	bl	8002a60 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002b1a:	9801      	ldr	r0, [sp, #4]
 8002b1c:	f7ff ffe8 	bl	8002af0 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_FLASH_IRQHandler+0xc4>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	07d2      	lsls	r2, r2, #31
 8002b2a:	d50c      	bpl.n	8002b46 <HAL_FLASH_IRQHandler+0x52>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002b30:	7823      	ldrb	r3, [r4, #0]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01b      	beq.n	8002b6e <HAL_FLASH_IRQHandler+0x7a>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8002b36:	7823      	ldrb	r3, [r4, #0]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d02d      	beq.n	8002b98 <HAL_FLASH_IRQHandler+0xa4>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002b3c:	6960      	ldr	r0, [r4, #20]
 8002b3e:	f7fd fda1 	bl	8000684 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	7023      	strb	r3, [r4, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002b46:	7823      	ldrb	r3, [r4, #0]
 8002b48:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002b4c:	b96b      	cbnz	r3, 8002b6a <HAL_FLASH_IRQHandler+0x76>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_FLASH_IRQHandler+0xc4>)
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b56:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002b5e:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b66:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8002b68:	7621      	strb	r1, [r4, #24]
}
 8002b6a:	b003      	add	sp, #12
 8002b6c:	bd30      	pop	{r4, r5, pc}
      pFlash.NbSectorsToErase--;
 8002b6e:	6863      	ldr	r3, [r4, #4]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	6063      	str	r3, [r4, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8002b74:	6863      	ldr	r3, [r4, #4]
 8002b76:	b1ab      	cbz	r3, 8002ba4 <HAL_FLASH_IRQHandler+0xb0>
        addresstmp = pFlash.Sector;
 8002b78:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002b7a:	f7fd fd83 	bl	8000684 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8002b7e:	68e3      	ldr	r3, [r4, #12]
 8002b80:	3301      	adds	r3, #1
 8002b82:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 8002b84:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002b86:	7a21      	ldrb	r1, [r4, #8]
 8002b88:	f000 f8c2 	bl	8002d10 <FLASH_Erase_Sector>
 8002b8c:	e7db      	b.n	8002b46 <HAL_FLASH_IRQHandler+0x52>
      pFlash.Sector = 0xFFFFFFFFU;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      addresstmp = pFlash.Sector;
 8002b92:	68e0      	ldr	r0, [r4, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 8002b94:	60e3      	str	r3, [r4, #12]
 8002b96:	e7bd      	b.n	8002b14 <HAL_FLASH_IRQHandler+0x20>
        FLASH_FlushCaches() ;
 8002b98:	f000 f8e0 	bl	8002d5c <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002b9c:	6920      	ldr	r0, [r4, #16]
 8002b9e:	f7fd fd71 	bl	8000684 <HAL_FLASH_EndOfOperationCallback>
 8002ba2:	e7ce      	b.n	8002b42 <HAL_FLASH_IRQHandler+0x4e>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002ba4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002ba8:	60e5      	str	r5, [r4, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002baa:	7023      	strb	r3, [r4, #0]
        FLASH_FlushCaches() ;
 8002bac:	f000 f8d6 	bl	8002d5c <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f7fd fd67 	bl	8000684 <HAL_FLASH_EndOfOperationCallback>
 8002bb6:	e7c6      	b.n	8002b46 <HAL_FLASH_IRQHandler+0x52>
 8002bb8:	40023c00 	.word	0x40023c00
 8002bbc:	20001314 	.word	0x20001314

08002bc0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_FLASH_Unlock+0x1c>)
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	db01      	blt.n	8002bcc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8002bc8:	2000      	movs	r0, #0
}
 8002bca:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002bcc:	4904      	ldr	r1, [pc, #16]	; (8002be0 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002bd0:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002bd2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002bd4:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	0fc0      	lsrs	r0, r0, #31
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023c00 	.word	0x40023c00
 8002be0:	45670123 	.word	0x45670123
 8002be4:	cdef89ab 	.word	0xcdef89ab

08002be8 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8002be8:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <HAL_FLASH_Lock+0x10>)
 8002bea:	6913      	ldr	r3, [r2, #16]
 8002bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bf0:	6113      	str	r3, [r2, #16]
}
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00

08002bfc <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <FLASH_WaitForLastOperation+0x4c>)
{ 
 8002bfe:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c00:	2200      	movs	r2, #0
{ 
 8002c02:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c04:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8002c06:	f7ff fb73 	bl	80022f0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002c0a:	4d10      	ldr	r5, [pc, #64]	; (8002c4c <FLASH_WaitForLastOperation+0x50>)
  tickstart = HAL_GetTick();
 8002c0c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002c0e:	e001      	b.n	8002c14 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 8002c10:	1c61      	adds	r1, r4, #1
 8002c12:	d10d      	bne.n	8002c30 <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002c14:	68eb      	ldr	r3, [r5, #12]
 8002c16:	03da      	lsls	r2, r3, #15
 8002c18:	d4fa      	bmi.n	8002c10 <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002c1a:	68eb      	ldr	r3, [r5, #12]
 8002c1c:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c1e:	bf44      	itt	mi
 8002c20:	2301      	movmi	r3, #1
 8002c22:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <FLASH_WaitForLastOperation+0x50>)
 8002c26:	68d8      	ldr	r0, [r3, #12]
 8002c28:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8002c2c:	d108      	bne.n	8002c40 <FLASH_WaitForLastOperation+0x44>
}  
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002c30:	b124      	cbz	r4, 8002c3c <FLASH_WaitForLastOperation+0x40>
 8002c32:	f7ff fb5d 	bl	80022f0 <HAL_GetTick>
 8002c36:	1b80      	subs	r0, r0, r6
 8002c38:	42a0      	cmp	r0, r4
 8002c3a:	d9eb      	bls.n	8002c14 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 8002c3c:	2003      	movs	r0, #3
}  
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 8002c40:	f7ff ff0e 	bl	8002a60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002c44:	2001      	movs	r0, #1
}  
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	20001314 	.word	0x20001314
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_FLASH_Program>:
{
 8002c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8002c54:	4e2c      	ldr	r6, [pc, #176]	; (8002d08 <HAL_FLASH_Program+0xb8>)
 8002c56:	7e34      	ldrb	r4, [r6, #24]
 8002c58:	2c01      	cmp	r4, #1
 8002c5a:	d033      	beq.n	8002cc4 <HAL_FLASH_Program+0x74>
 8002c5c:	4681      	mov	r9, r0
 8002c5e:	461d      	mov	r5, r3
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c60:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002c64:	2301      	movs	r3, #1
 8002c66:	460f      	mov	r7, r1
 8002c68:	4690      	mov	r8, r2
 8002c6a:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c6c:	f7ff ffc6 	bl	8002bfc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002c70:	b118      	cbz	r0, 8002c7a <HAL_FLASH_Program+0x2a>
  __HAL_UNLOCK(&pFlash);
 8002c72:	2300      	movs	r3, #0
 8002c74:	7633      	strb	r3, [r6, #24]
}
 8002c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_FLASH_Program+0xbc>)
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c82:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002c84:	691a      	ldr	r2, [r3, #16]
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002c86:	f1b9 0f00 	cmp.w	r9, #0
 8002c8a:	d01e      	beq.n	8002cca <HAL_FLASH_Program+0x7a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002c8c:	f1b9 0f01 	cmp.w	r9, #1
 8002c90:	d024      	beq.n	8002cdc <HAL_FLASH_Program+0x8c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002c92:	f1b9 0f02 	cmp.w	r9, #2
 8002c96:	d02c      	beq.n	8002cf2 <HAL_FLASH_Program+0xa2>
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002c98:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c9c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002ca6:	f8c7 8000 	str.w	r8, [r7]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002caa:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002cae:	607d      	str	r5, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cb4:	f7ff ffa2 	bl	8002bfc <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_FLASH_Program+0xbc>)
 8002cba:	6913      	ldr	r3, [r2, #16]
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6113      	str	r3, [r2, #16]
 8002cc2:	e7d6      	b.n	8002c72 <HAL_FLASH_Program+0x22>
  __HAL_LOCK(&pFlash);
 8002cc4:	2002      	movs	r0, #2
}
 8002cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002cca:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ccc:	6919      	ldr	r1, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002cce:	fa5f f288 	uxtb.w	r2, r8
  FLASH->CR |= FLASH_CR_PG;
 8002cd2:	f041 0101 	orr.w	r1, r1, #1
 8002cd6:	6119      	str	r1, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8002cd8:	703a      	strb	r2, [r7, #0]
}
 8002cda:	e7e9      	b.n	8002cb0 <HAL_FLASH_Program+0x60>
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ce2:	6919      	ldr	r1, [r3, #16]
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002ce4:	fa1f f288 	uxth.w	r2, r8
  FLASH->CR |= FLASH_CR_PG;
 8002ce8:	f041 0101 	orr.w	r1, r1, #1
 8002cec:	6119      	str	r1, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 8002cee:	803a      	strh	r2, [r7, #0]
}
 8002cf0:	e7de      	b.n	8002cb0 <HAL_FLASH_Program+0x60>
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 8002d00:	f8c7 8000 	str.w	r8, [r7]
}
 8002d04:	e7d4      	b.n	8002cb0 <HAL_FLASH_Program+0x60>
 8002d06:	bf00      	nop
 8002d08:	20001314 	.word	0x20001314
 8002d0c:	40023c00 	.word	0x40023c00

08002d10 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002d10:	b139      	cbz	r1, 8002d22 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002d12:	2901      	cmp	r1, #1
 8002d14:	d01c      	beq.n	8002d50 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002d16:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002d18:	bf0c      	ite	eq
 8002d1a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8002d1e:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <FLASH_Erase_Sector+0x48>)
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d2a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	4311      	orrs	r1, r2
 8002d30:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002d38:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8002d40:	f040 0002 	orr.w	r0, r0, #2
 8002d44:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d4c:	611a      	str	r2, [r3, #16]
}
 8002d4e:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d54:	e7e5      	b.n	8002d22 <FLASH_Erase_Sector+0x12>
 8002d56:	bf00      	nop
 8002d58:	40023c00 	.word	0x40023c00

08002d5c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <FLASH_FlushCaches+0x54>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	0591      	lsls	r1, r2, #22
 8002d62:	d50f      	bpl.n	8002d84 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d6a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <FLASH_FlushCaches+0x54>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	0552      	lsls	r2, r2, #21
 8002d8a:	d50f      	bpl.n	8002dac <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d92:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002da2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002daa:	601a      	str	r2, [r3, #0]
  }
}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00

08002db4 <HAL_FLASHEx_Erase>:
{
 8002db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8002db8:	4f2d      	ldr	r7, [pc, #180]	; (8002e70 <HAL_FLASHEx_Erase+0xbc>)
 8002dba:	7e3b      	ldrb	r3, [r7, #24]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d038      	beq.n	8002e32 <HAL_FLASHEx_Erase+0x7e>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dc8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002dca:	763b      	strb	r3, [r7, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dcc:	f7ff ff16 	bl	8002bfc <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	bb48      	cbnz	r0, 8002e28 <HAL_FLASHEx_Erase+0x74>
    *SectorError = 0xFFFFFFFFU;
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd8:	f8c8 3000 	str.w	r3, [r8]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d02b      	beq.n	8002e3a <HAL_FLASHEx_Erase+0x86>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002de2:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8002de6:	442b      	add	r3, r5
 8002de8:	429d      	cmp	r5, r3
 8002dea:	d21b      	bcs.n	8002e24 <HAL_FLASHEx_Erase+0x70>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002dec:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8002e74 <HAL_FLASHEx_Erase+0xc0>
 8002df0:	e005      	b.n	8002dfe <HAL_FLASHEx_Erase+0x4a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002df2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002df6:	3501      	adds	r5, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	42ab      	cmp	r3, r5
 8002dfc:	d912      	bls.n	8002e24 <HAL_FLASHEx_Erase+0x70>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002dfe:	7c21      	ldrb	r1, [r4, #16]
 8002e00:	4628      	mov	r0, r5
 8002e02:	f7ff ff85 	bl	8002d10 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e0a:	f7ff fef7 	bl	8002bfc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002e0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002e12:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002e16:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d0e9      	beq.n	8002df2 <HAL_FLASHEx_Erase+0x3e>
          *SectorError = index;
 8002e1e:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e22:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 8002e24:	f7ff ff9a 	bl	8002d5c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	763b      	strb	r3, [r7, #24]
}
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8002e32:	2602      	movs	r6, #2
}
 8002e34:	4630      	mov	r0, r6
 8002e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e3a:	4d0e      	ldr	r5, [pc, #56]	; (8002e74 <HAL_FLASHEx_Erase+0xc0>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002e3c:	6923      	ldr	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e3e:	692a      	ldr	r2, [r5, #16]
 8002e40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e44:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002e46:	692a      	ldr	r2, [r5, #16]
 8002e48:	f042 0204 	orr.w	r2, r2, #4
 8002e4c:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002e4e:	692a      	ldr	r2, [r5, #16]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5a:	612b      	str	r3, [r5, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e60:	f7ff fecc 	bl	8002bfc <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8002e64:	692b      	ldr	r3, [r5, #16]
 8002e66:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e6a:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8002e6c:	612b      	str	r3, [r5, #16]
 8002e6e:	e7d9      	b.n	8002e24 <HAL_FLASHEx_Erase+0x70>
 8002e70:	20001314 	.word	0x20001314
 8002e74:	40023c00 	.word	0x40023c00

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e7c:	468b      	mov	fp, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7e:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 800304c <HAL_GPIO_Init+0x1d4>
 8002e82:	6809      	ldr	r1, [r1, #0]
{
 8002e84:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e86:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8002e88:	f04f 0a01 	mov.w	sl, #1
 8002e8c:	46d9      	mov	r9, fp
 8002e8e:	e002      	b.n	8002e96 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e90:	3301      	adds	r3, #1
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d079      	beq.n	8002f8a <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8002e96:	fa0a f203 	lsl.w	r2, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8002e9e:	438a      	bics	r2, r1
 8002ea0:	d1f6      	bne.n	8002e90 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea2:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8002ea6:	f005 0203 	and.w	r2, r5, #3
 8002eaa:	1e54      	subs	r4, r2, #1
 8002eac:	2c01      	cmp	r4, #1
 8002eae:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8002eb2:	d96d      	bls.n	8002f90 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb4:	2a03      	cmp	r2, #3
 8002eb6:	f040 80ac 	bne.w	8003012 <HAL_GPIO_Init+0x19a>
 8002eba:	40ba      	lsls	r2, r7
 8002ebc:	43d4      	mvns	r4, r2
 8002ebe:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 8002ec0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec2:	9c00      	ldr	r4, [sp, #0]
 8002ec4:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec6:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002ecc:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ece:	d0df      	beq.n	8002e90 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed0:	4c59      	ldr	r4, [pc, #356]	; (8003038 <HAL_GPIO_Init+0x1c0>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	9203      	str	r2, [sp, #12]
 8002ed6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002edc:	6462      	str	r2, [r4, #68]	; 0x44
 8002ede:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ee0:	f023 0603 	bic.w	r6, r3, #3
 8002ee4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002ee8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002eec:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8002ef0:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef2:	f003 0403 	and.w	r4, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef8:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002efa:	00a4      	lsls	r4, r4, #2
 8002efc:	220f      	movs	r2, #15
 8002efe:	40a2      	lsls	r2, r4
 8002f00:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f04:	4f4d      	ldr	r7, [pc, #308]	; (800303c <HAL_GPIO_Init+0x1c4>)
 8002f06:	42b8      	cmp	r0, r7
 8002f08:	d014      	beq.n	8002f34 <HAL_GPIO_Init+0xbc>
 8002f0a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002f0e:	42b8      	cmp	r0, r7
 8002f10:	f000 8084 	beq.w	800301c <HAL_GPIO_Init+0x1a4>
 8002f14:	4f4a      	ldr	r7, [pc, #296]	; (8003040 <HAL_GPIO_Init+0x1c8>)
 8002f16:	42b8      	cmp	r0, r7
 8002f18:	f000 8084 	beq.w	8003024 <HAL_GPIO_Init+0x1ac>
 8002f1c:	4f49      	ldr	r7, [pc, #292]	; (8003044 <HAL_GPIO_Init+0x1cc>)
 8002f1e:	42b8      	cmp	r0, r7
 8002f20:	f000 8085 	beq.w	800302e <HAL_GPIO_Init+0x1b6>
 8002f24:	4f48      	ldr	r7, [pc, #288]	; (8003048 <HAL_GPIO_Init+0x1d0>)
 8002f26:	42b8      	cmp	r0, r7
 8002f28:	bf0c      	ite	eq
 8002f2a:	2704      	moveq	r7, #4
 8002f2c:	2707      	movne	r7, #7
 8002f2e:	fa07 f404 	lsl.w	r4, r7, r4
 8002f32:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f34:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 8002f36:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 8002f3a:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f3e:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002f40:	bf54      	ite	pl
 8002f42:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002f44:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 8002f48:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8002f4c:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f50:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002f52:	bf54      	ite	pl
 8002f54:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f56:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 8002f5a:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5e:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002f64:	bf54      	ite	pl
 8002f66:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f68:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8002f6c:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8002f70:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f74:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8002f7a:	bf54      	ite	pl
 8002f7c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002f7e:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8002f84:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f88:	d185      	bne.n	8002e96 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002f8a:	b005      	add	sp, #20
 8002f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002f90:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f92:	2403      	movs	r4, #3
 8002f94:	40bc      	lsls	r4, r7
 8002f96:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9a:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8002f9e:	40be      	lsls	r6, r7
 8002fa0:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002fa4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002fa6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002faa:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fae:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb2:	409e      	lsls	r6, r3
 8002fb4:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb8:	43e4      	mvns	r4, r4
 8002fba:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8002fbc:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002fbe:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc0:	9c00      	ldr	r4, [sp, #0]
 8002fc2:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc6:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8002fca:	40be      	lsls	r6, r7
 8002fcc:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd0:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002fd2:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd4:	d001      	beq.n	8002fda <HAL_GPIO_Init+0x162>
 8002fd6:	40ba      	lsls	r2, r7
 8002fd8:	e772      	b.n	8002ec0 <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 8002fda:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8002fde:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe2:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002fe6:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8002fea:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002ff0:	240f      	movs	r4, #15
 8002ff2:	fa04 f60e 	lsl.w	r6, r4, lr
 8002ff6:	9c01      	ldr	r4, [sp, #4]
 8002ff8:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ffc:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003000:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003002:	fa04 f60e 	lsl.w	r6, r4, lr
 8003006:	9c01      	ldr	r4, [sp, #4]
 8003008:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 800300a:	40ba      	lsls	r2, r7
 800300c:	f8c8 6020 	str.w	r6, [r8, #32]
 8003010:	e756      	b.n	8002ec0 <HAL_GPIO_Init+0x48>
 8003012:	2403      	movs	r4, #3
 8003014:	40bc      	lsls	r4, r7
 8003016:	43e4      	mvns	r4, r4
 8003018:	9400      	str	r4, [sp, #0]
 800301a:	e7d0      	b.n	8002fbe <HAL_GPIO_Init+0x146>
 800301c:	fa0a f404 	lsl.w	r4, sl, r4
 8003020:	4322      	orrs	r2, r4
 8003022:	e787      	b.n	8002f34 <HAL_GPIO_Init+0xbc>
 8003024:	2702      	movs	r7, #2
 8003026:	fa07 f404 	lsl.w	r4, r7, r4
 800302a:	4322      	orrs	r2, r4
 800302c:	e782      	b.n	8002f34 <HAL_GPIO_Init+0xbc>
 800302e:	2703      	movs	r7, #3
 8003030:	fa07 f404 	lsl.w	r4, r7, r4
 8003034:	4322      	orrs	r2, r4
 8003036:	e77d      	b.n	8002f34 <HAL_GPIO_Init+0xbc>
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003050:	6903      	ldr	r3, [r0, #16]
 8003052:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003054:	bf14      	ite	ne
 8003056:	2001      	movne	r0, #1
 8003058:	2000      	moveq	r0, #0
 800305a:	4770      	bx	lr

0800305c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800305c:	b902      	cbnz	r2, 8003060 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800305e:	0409      	lsls	r1, r1, #16
 8003060:	6181      	str	r1, [r0, #24]
  }
}
 8003062:	4770      	bx	lr

08003064 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003064:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003066:	ea01 0203 	and.w	r2, r1, r3
 800306a:	ea21 0103 	bic.w	r1, r1, r3
 800306e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003072:	6181      	str	r1, [r0, #24]
}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop

08003078 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop

0800307c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800307e:	6951      	ldr	r1, [r2, #20]
 8003080:	4201      	tst	r1, r0
 8003082:	d100      	bne.n	8003086 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003084:	4770      	bx	lr
{
 8003086:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003088:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800308a:	f7ff fff5 	bl	8003078 <HAL_GPIO_EXTI_Callback>
}
 800308e:	bd08      	pop	{r3, pc}
 8003090:	40013c00 	.word	0x40013c00

08003094 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003094:	2800      	cmp	r0, #0
 8003096:	f000 80b5 	beq.w	8003204 <HAL_I2C_Init+0x170>
{
 800309a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030a0:	4604      	mov	r4, r0
 80030a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8094 	beq.w	80031d4 <HAL_I2C_Init+0x140>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030ac:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ae:	2224      	movs	r2, #36	; 0x24
 80030b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030cc:	f001 fa66 	bl	800459c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030d0:	6865      	ldr	r5, [r4, #4]
 80030d2:	4b4d      	ldr	r3, [pc, #308]	; (8003208 <HAL_I2C_Init+0x174>)
 80030d4:	429d      	cmp	r5, r3
 80030d6:	d84c      	bhi.n	8003172 <HAL_I2C_Init+0xde>
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_I2C_Init+0x178>)
 80030da:	4298      	cmp	r0, r3
 80030dc:	d978      	bls.n	80031d0 <HAL_I2C_Init+0x13c>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030de:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80030e0:	4b4b      	ldr	r3, [pc, #300]	; (8003210 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e2:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80030e4:	fba3 6300 	umull	r6, r3, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80030ec:	ea41 4193 	orr.w	r1, r1, r3, lsr #18
 80030f0:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030f2:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 80030f4:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030f6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80030fa:	3301      	adds	r3, #1
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003100:	69d1      	ldr	r1, [r2, #28]
 8003102:	3801      	subs	r0, #1
 8003104:	006b      	lsls	r3, r5, #1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	f640 70fc 	movw	r0, #4092	; 0xffc
 800310e:	3301      	adds	r3, #1
 8003110:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003114:	4203      	tst	r3, r0
 8003116:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800311a:	d160      	bne.n	80031de <HAL_I2C_Init+0x14a>
 800311c:	2304      	movs	r3, #4
 800311e:	430b      	orrs	r3, r1
 8003120:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003122:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8003126:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003128:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800312a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 800312e:	432b      	orrs	r3, r5
 8003130:	4303      	orrs	r3, r0
 8003132:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003134:	6890      	ldr	r0, [r2, #8]
 8003136:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003138:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800313a:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 800313e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003142:	4329      	orrs	r1, r5
 8003144:	4301      	orrs	r1, r0
 8003146:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003148:	68d1      	ldr	r1, [r2, #12]
 800314a:	69a0      	ldr	r0, [r4, #24]
 800314c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003150:	4303      	orrs	r3, r0
 8003152:	430b      	orrs	r3, r1
 8003154:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003156:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 800315a:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8003160:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003162:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003164:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003168:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 800316e:	4618      	mov	r0, r3
}
 8003170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_I2C_Init+0x180>)
 8003174:	4298      	cmp	r0, r3
 8003176:	d92b      	bls.n	80031d0 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003178:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800317a:	4925      	ldr	r1, [pc, #148]	; (8003210 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317c:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317e:	4f26      	ldr	r7, [pc, #152]	; (8003218 <HAL_I2C_Init+0x184>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003180:	fba1 3100 	umull	r3, r1, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003184:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8003188:	ea46 4691 	orr.w	r6, r6, r1, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318c:	f44f 7396 	mov.w	r3, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003190:	0c89      	lsrs	r1, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003192:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003194:	fb03 f301 	mul.w	r3, r3, r1
 8003198:	fba7 1303 	umull	r1, r3, r7, r3
 800319c:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800319e:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80031a6:	3301      	adds	r3, #1
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031ac:	69d1      	ldr	r1, [r2, #28]
 80031ae:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80031b2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031b6:	b9ae      	cbnz	r6, 80031e4 <HAL_I2C_Init+0x150>
 80031b8:	3801      	subs	r0, #1
 80031ba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	b1d3      	cbz	r3, 8003200 <HAL_I2C_Init+0x16c>
 80031ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ce:	e7a6      	b.n	800311e <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 80031d0:	2001      	movs	r0, #1
}
 80031d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80031d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80031d8:	f7fe fdfc 	bl	8001dd4 <HAL_I2C_MspInit>
 80031dc:	e766      	b.n	80030ac <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e2:	e79c      	b.n	800311e <HAL_I2C_Init+0x8a>
 80031e4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80031e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031ec:	3801      	subs	r0, #1
 80031ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	b113      	cbz	r3, 8003200 <HAL_I2C_Init+0x16c>
 80031fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fe:	e78e      	b.n	800311e <HAL_I2C_Init+0x8a>
 8003200:	2301      	movs	r3, #1
 8003202:	e78c      	b.n	800311e <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8003204:	2001      	movs	r0, #1
}
 8003206:	4770      	bx	lr
 8003208:	000186a0 	.word	0x000186a0
 800320c:	001e847f 	.word	0x001e847f
 8003210:	431bde83 	.word	0x431bde83
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	10624dd3 	.word	0x10624dd3

0800321c <HAL_I2C_SlaveTxCpltCallback>:
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <HAL_I2C_SlaveRxCpltCallback>:
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop

08003228 <HAL_I2C_ListenCpltCallback>:
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop

0800322c <HAL_I2C_MemTxCpltCallback>:
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop

08003230 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003230:	b538      	push	{r3, r4, r5, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003232:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  if (hi2c->EventCount == 0U)
 8003236:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003238:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 800323a:	b959      	cbnz	r1, 8003254 <I2C_MemoryTransmit_TXE_BTF+0x24>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800323c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800323e:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003240:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003242:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003244:	d032      	beq.n	80032ac <I2C_MemoryTransmit_TXE_BTF+0x7c>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003246:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800324a:	610a      	str	r2, [r1, #16]

      hi2c->EventCount++;
 800324c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800324e:	3201      	adds	r2, #1
 8003250:	6502      	str	r2, [r0, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003252:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8003254:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003256:	2901      	cmp	r1, #1
 8003258:	d020      	beq.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 800325a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800325c:	2902      	cmp	r1, #2
 800325e:	d1f8      	bne.n	8003252 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8003260:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003262:	2a22      	cmp	r2, #34	; 0x22
 8003264:	d02c      	beq.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003266:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003268:	b289      	uxth	r1, r1
 800326a:	bb29      	cbnz	r1, 80032b8 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800326c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800326e:	b289      	uxth	r1, r1
 8003270:	2900      	cmp	r1, #0
 8003272:	d1ee      	bne.n	8003252 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8003274:	2a21      	cmp	r2, #33	; 0x21
 8003276:	d1ec      	bne.n	8003252 <I2C_MemoryTransmit_TXE_BTF+0x22>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003278:	6802      	ldr	r2, [r0, #0]
 800327a:	6854      	ldr	r4, [r2, #4]
 800327c:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8003280:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	6814      	ldr	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003284:	2520      	movs	r5, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800328a:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800328c:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800328e:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003292:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003296:	f7ff ffc9 	bl	800322c <HAL_I2C_MemTxCpltCallback>
}
 800329a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800329c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800329e:	6801      	ldr	r1, [r0, #0]
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 80032a4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80032a6:	3201      	adds	r2, #1
 80032a8:	6502      	str	r2, [r0, #80]	; 0x50
}
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80032b0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80032b2:	3202      	adds	r2, #2
 80032b4:	6502      	str	r2, [r0, #80]	; 0x50
}
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032b8:	2a21      	cmp	r2, #33	; 0x21
 80032ba:	d00a      	beq.n	80032d2 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 80032be:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032c0:	6801      	ldr	r1, [r0, #0]
 80032c2:	680a      	ldr	r2, [r1, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 80032ca:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80032cc:	3201      	adds	r2, #1
 80032ce:	6502      	str	r2, [r0, #80]	; 0x50
}
 80032d0:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80032d4:	6802      	ldr	r2, [r0, #0]
 80032d6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80032da:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 80032dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80032de:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80032e0:	3a01      	subs	r2, #1
 80032e2:	b292      	uxth	r2, r2
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032e6:	bd38      	pop	{r3, r4, r5, pc}

080032e8 <HAL_I2C_MemRxCpltCallback>:
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop

080032ec <HAL_I2C_AbortCpltCallback>:
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80032f0:	b570      	push	{r4, r5, r6, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <I2C_DMAAbort+0xec>)
 80032f4:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <I2C_DMAAbort+0xf0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80032fa:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 8003302:	2200      	movs	r2, #0
 8003304:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003306:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003308:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800330c:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800330e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003312:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003316:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003318:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800331a:	e005      	b.n	8003328 <I2C_DMAAbort+0x38>
    if (count == 0U)
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
 800331c:	9b01      	ldr	r3, [sp, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	9301      	str	r3, [sp, #4]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003322:	6813      	ldr	r3, [r2, #0]
 8003324:	059b      	lsls	r3, r3, #22
 8003326:	d506      	bpl.n	8003336 <I2C_DMAAbort+0x46>
    if (count == 0U)
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f6      	bne.n	800331c <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800332e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003330:	f043 0320 	orr.w	r3, r3, #32
 8003334:	6403      	str	r3, [r0, #64]	; 0x40
  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
  }
  if (hi2c->hdmarx != NULL)
 8003336:	e9d0 430d 	ldrd	r4, r3, [r0, #52]	; 0x34
  if (hi2c->hdmatx != NULL)
 800333a:	b344      	cbz	r4, 800338e <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800333c:	2500      	movs	r5, #0
 800333e:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8003340:	b1f3      	cbz	r3, 8003380 <I2C_DMAAbort+0x90>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003344:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 800334a:	6016      	str	r6, [r2, #0]

  hi2c->XferCount = 0U;
 800334c:	8545      	strh	r5, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800334e:	6525      	str	r5, [r4, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003350:	2400      	movs	r4, #0
 8003352:	651c      	str	r4, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800335c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003360:	2b60      	cmp	r3, #96	; 0x60
 8003362:	d029      	beq.n	80033b8 <I2C_DMAAbort+0xc8>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003364:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003368:	2928      	cmp	r1, #40	; 0x28
 800336a:	d018      	beq.n	800339e <I2C_DMAAbort+0xae>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800336c:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003370:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003378:	f7fe fcb4 	bl	8001ce4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800337c:	b002      	add	sp, #8
 800337e:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003380:	6815      	ldr	r5, [r2, #0]
 8003382:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003386:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003388:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 800338a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 800338c:	e7e2      	b.n	8003354 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 800338e:	b1f3      	cbz	r3, 80033ce <I2C_DMAAbort+0xde>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003392:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003394:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003398:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 800339a:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800339c:	e7d8      	b.n	8003350 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a6:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033a8:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ae:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033b0:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033b2:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 80033b6:	e7df      	b.n	8003378 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033b8:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80033ba:	2220      	movs	r2, #32
 80033bc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033c0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80033c4:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80033c6:	f7ff ff91 	bl	80032ec <HAL_I2C_AbortCpltCallback>
}
 80033ca:	b002      	add	sp, #8
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	6814      	ldr	r4, [r2, #0]
 80033d0:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80033d4:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 80033d6:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80033d8:	e7bc      	b.n	8003354 <I2C_DMAAbort+0x64>
 80033da:	bf00      	nop
 80033dc:	20000050 	.word	0x20000050
 80033e0:	14f8b589 	.word	0x14f8b589

080033e4 <I2C_ITError>:
{
 80033e4:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033e6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80033ea:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033ee:	2b10      	cmp	r3, #16
{
 80033f0:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033f2:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033f4:	d039      	beq.n	800346a <I2C_ITError+0x86>
 80033f6:	b2d9      	uxtb	r1, r3
 80033f8:	2940      	cmp	r1, #64	; 0x40
 80033fa:	d036      	beq.n	800346a <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033fc:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003400:	2928      	cmp	r1, #40	; 0x28
 8003402:	d03d      	beq.n	8003480 <I2C_ITError+0x9c>
 8003404:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	0508      	lsls	r0, r1, #20
 800340a:	d407      	bmi.n	800341c <I2C_ITError+0x38>
 800340c:	2a60      	cmp	r2, #96	; 0x60
 800340e:	d005      	beq.n	800341c <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8003410:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003414:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003418:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 800341c:	2200      	movs	r2, #0
 800341e:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003426:	d134      	bne.n	8003492 <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003428:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800342c:	2960      	cmp	r1, #96	; 0x60
 800342e:	d075      	beq.n	800351c <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	0650      	lsls	r0, r2, #25
 8003434:	d505      	bpl.n	8003442 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800343c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800343e:	3301      	adds	r3, #1
 8003440:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003442:	4620      	mov	r0, r4
 8003444:	f7fe fc4e 	bl	8001ce4 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003448:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800344a:	0719      	lsls	r1, r3, #28
 800344c:	d004      	beq.n	8003458 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800344e:	6822      	ldr	r2, [r4, #0]
 8003450:	6853      	ldr	r3, [r2, #4]
 8003452:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003456:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003458:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800345c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800345e:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8003460:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003462:	d501      	bpl.n	8003468 <I2C_ITError+0x84>
 8003464:	2b28      	cmp	r3, #40	; 0x28
 8003466:	d02f      	beq.n	80034c8 <I2C_ITError+0xe4>
}
 8003468:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800346a:	2a22      	cmp	r2, #34	; 0x22
 800346c:	d1c6      	bne.n	80033fc <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003476:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	0512      	lsls	r2, r2, #20
 800347c:	d5c8      	bpl.n	8003410 <I2C_ITError+0x2c>
 800347e:	e7cd      	b.n	800341c <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003480:	2300      	movs	r3, #0
 8003482:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003484:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003486:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003490:	d0ca      	beq.n	8003428 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003492:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003494:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349a:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800349c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d01e      	beq.n	80034e2 <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <I2C_ITError+0x164>)
 80034a6:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034a8:	f7ff f96c 	bl	8002784 <HAL_DMA_Abort_IT>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d0cb      	beq.n	8003448 <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 80034b0:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80034b4:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80034be:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80034c4:	4798      	blx	r3
 80034c6:	e7bf      	b.n	8003448 <I2C_ITError+0x64>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <I2C_ITError+0x168>)
 80034ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80034cc:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80034d2:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80034d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80034dc:	f7ff fea4 	bl	8003228 <HAL_I2C_ListenCpltCallback>
}
 80034e0:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <I2C_ITError+0x164>)
 80034e6:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034e8:	f7ff f94c 	bl	8002784 <HAL_DMA_Abort_IT>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d0ab      	beq.n	8003448 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	0651      	lsls	r1, r2, #25
 80034f6:	d506      	bpl.n	8003506 <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80034fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	3201      	adds	r2, #1
 8003504:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003506:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003508:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800350a:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800350e:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003510:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003512:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003516:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003518:	4798      	blx	r3
 800351a:	e795      	b.n	8003448 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 800351c:	2120      	movs	r1, #32
 800351e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003522:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	0652      	lsls	r2, r2, #25
 8003528:	d506      	bpl.n	8003538 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003530:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	3201      	adds	r2, #1
 8003536:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003540:	4620      	mov	r0, r4
 8003542:	f7ff fed3 	bl	80032ec <HAL_I2C_AbortCpltCallback>
 8003546:	e77f      	b.n	8003448 <I2C_ITError+0x64>
 8003548:	080032f1 	.word	0x080032f1
 800354c:	ffff0000 	.word	0xffff0000

08003550 <HAL_I2C_EV_IRQHandler>:
{
 8003550:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003552:	6803      	ldr	r3, [r0, #0]
{
 8003554:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003556:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800355a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800355e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003562:	2910      	cmp	r1, #16
{
 8003564:	b08f      	sub	sp, #60	; 0x3c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003566:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003568:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800356a:	d022      	beq.n	80035b2 <HAL_I2C_EV_IRQHandler+0x62>
 800356c:	2d40      	cmp	r5, #64	; 0x40
 800356e:	d020      	beq.n	80035b2 <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003570:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003572:	2900      	cmp	r1, #0
 8003574:	f000 8095 	beq.w	80036a2 <HAL_I2C_EV_IRQHandler+0x152>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003578:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 800357a:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800357c:	078f      	lsls	r7, r1, #30
 800357e:	f3c1 0640 	ubfx	r6, r1, #1, #1
 8003582:	d559      	bpl.n	8003638 <HAL_I2C_EV_IRQHandler+0xe8>
 8003584:	0586      	lsls	r6, r0, #22
 8003586:	d559      	bpl.n	800363c <HAL_I2C_EV_IRQHandler+0xec>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003588:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800358a:	b102      	cbz	r2, 800358e <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800358c:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800358e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003592:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003596:	2a28      	cmp	r2, #40	; 0x28
 8003598:	f000 821d 	beq.w	80039d6 <HAL_I2C_EV_IRQHandler+0x486>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359c:	2200      	movs	r2, #0
 800359e:	920c      	str	r2, [sp, #48]	; 0x30
 80035a0:	6959      	ldr	r1, [r3, #20]
 80035a2:	910c      	str	r1, [sp, #48]	; 0x30
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	930c      	str	r3, [sp, #48]	; 0x30
 80035a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035aa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80035ae:	b00f      	add	sp, #60	; 0x3c
 80035b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035b2:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035b4:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035b6:	f011 0f01 	tst.w	r1, #1
 80035ba:	d11a      	bne.n	80035f2 <HAL_I2C_EV_IRQHandler+0xa2>
 80035bc:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 80035c0:	d0f5      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 80035c2:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80035c6:	d0f2      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035c8:	070e      	lsls	r6, r1, #28
 80035ca:	d56d      	bpl.n	80036a8 <HAL_I2C_EV_IRQHandler+0x158>
 80035cc:	0586      	lsls	r6, r0, #22
 80035ce:	f140 8083 	bpl.w	80036d8 <HAL_I2C_EV_IRQHandler+0x188>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035d6:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035d8:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035da:	2900      	cmp	r1, #0
 80035dc:	f000 81e2 	beq.w	80039a4 <HAL_I2C_EV_IRQHandler+0x454>
 80035e0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	f000 81de 	beq.w	80039a4 <HAL_I2C_EV_IRQHandler+0x454>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	e7dd      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f2:	0586      	lsls	r6, r0, #22
 80035f4:	d56e      	bpl.n	80036d4 <HAL_I2C_EV_IRQHandler+0x184>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80035f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035f8:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 80035fc:	f000 81e8 	beq.w	80039d0 <HAL_I2C_EV_IRQHandler+0x480>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003600:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003602:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003606:	bf04      	itt	eq
 8003608:	2208      	moveq	r2, #8
 800360a:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800360c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003610:	2a40      	cmp	r2, #64	; 0x40
 8003612:	f000 81d6 	beq.w	80039c2 <HAL_I2C_EV_IRQHandler+0x472>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003616:	6922      	ldr	r2, [r4, #16]
 8003618:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800361c:	f000 81b1 	beq.w	8003982 <HAL_I2C_EV_IRQHandler+0x432>
      if (hi2c->EventCount == 0U)
 8003620:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003622:	2a00      	cmp	r2, #0
 8003624:	f040 81eb 	bne.w	80039fe <HAL_I2C_EV_IRQHandler+0x4ae>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003628:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800362a:	11d2      	asrs	r2, r2, #7
 800362c:	f002 0206 	and.w	r2, r2, #6
 8003630:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003634:	611a      	str	r2, [r3, #16]
 8003636:	e7ba      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003638:	06cf      	lsls	r7, r1, #27
 800363a:	d47b      	bmi.n	8003734 <HAL_I2C_EV_IRQHandler+0x1e4>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800363c:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8003640:	2a21      	cmp	r2, #33	; 0x21
 8003642:	f000 80f4 	beq.w	800382e <HAL_I2C_EV_IRQHandler+0x2de>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003646:	064e      	lsls	r6, r1, #25
 8003648:	f140 8131 	bpl.w	80038ae <HAL_I2C_EV_IRQHandler+0x35e>
 800364c:	0545      	lsls	r5, r0, #21
 800364e:	f140 812e 	bpl.w	80038ae <HAL_I2C_EV_IRQHandler+0x35e>
 8003652:	0749      	lsls	r1, r1, #29
 8003654:	f100 812e 	bmi.w	80038b4 <HAL_I2C_EV_IRQHandler+0x364>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003658:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800365c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800365e:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003660:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003662:	2a00      	cmp	r2, #0
 8003664:	d0a3      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 800366c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800366e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003670:	3b01      	subs	r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003676:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003678:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800367a:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 800367c:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800367e:	2b00      	cmp	r3, #0
 8003680:	d195      	bne.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 8003682:	292a      	cmp	r1, #42	; 0x2a
 8003684:	d193      	bne.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800368a:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800368c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003690:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003692:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003694:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003696:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003698:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800369c:	f7ff fdc0 	bl	8003220 <HAL_I2C_SlaveRxCpltCallback>
 80036a0:	e785      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036a2:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036a4:	6959      	ldr	r1, [r3, #20]
 80036a6:	e769      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a8:	078e      	lsls	r6, r1, #30
 80036aa:	d515      	bpl.n	80036d8 <HAL_I2C_EV_IRQHandler+0x188>
 80036ac:	0586      	lsls	r6, r0, #22
 80036ae:	d513      	bpl.n	80036d8 <HAL_I2C_EV_IRQHandler+0x188>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80036b0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80036b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80036b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036b8:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80036bc:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80036be:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036c0:	f000 81b2 	beq.w	8003a28 <HAL_I2C_EV_IRQHandler+0x4d8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c4:	2200      	movs	r2, #0
 80036c6:	920a      	str	r2, [sp, #40]	; 0x28
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	920a      	str	r2, [sp, #40]	; 0x28
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	930a      	str	r3, [sp, #40]	; 0x28
 80036d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d2:	e76c      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036d4:	070e      	lsls	r6, r1, #28
 80036d6:	d5e7      	bpl.n	80036a8 <HAL_I2C_EV_IRQHandler+0x158>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80036d8:	077f      	lsls	r7, r7, #29
 80036da:	f140 80f4 	bpl.w	80038c6 <HAL_I2C_EV_IRQHandler+0x376>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036de:	685e      	ldr	r6, [r3, #4]
 80036e0:	0536      	lsls	r6, r6, #20
 80036e2:	f53f af64 	bmi.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e6:	060f      	lsls	r7, r1, #24
 80036e8:	f140 8114 	bpl.w	8003914 <HAL_I2C_EV_IRQHandler+0x3c4>
 80036ec:	0546      	lsls	r6, r0, #21
 80036ee:	f140 8111 	bpl.w	8003914 <HAL_I2C_EV_IRQHandler+0x3c4>
 80036f2:	074f      	lsls	r7, r1, #29
 80036f4:	f100 8111 	bmi.w	800391a <HAL_I2C_EV_IRQHandler+0x3ca>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036f8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036fc:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036fe:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003702:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003704:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003706:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003708:	2800      	cmp	r0, #0
 800370a:	f040 823a 	bne.w	8003b82 <HAL_I2C_EV_IRQHandler+0x632>
 800370e:	2a21      	cmp	r2, #33	; 0x21
 8003710:	f000 8340 	beq.w	8003d94 <HAL_I2C_EV_IRQHandler+0x844>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003714:	2940      	cmp	r1, #64	; 0x40
 8003716:	f47f af4a 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800371a:	2a22      	cmp	r2, #34	; 0x22
 800371c:	f47f af47 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount == 0U)
 8003720:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003722:	b292      	uxth	r2, r2
 8003724:	2a00      	cmp	r2, #0
 8003726:	f040 82c1 	bne.w	8003cac <HAL_I2C_EV_IRQHandler+0x75c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e73c      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003734:	0585      	lsls	r5, r0, #22
 8003736:	d581      	bpl.n	800363c <HAL_I2C_EV_IRQHandler+0xec>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003738:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003742:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003744:	960d      	str	r6, [sp, #52]	; 0x34
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	920d      	str	r2, [sp, #52]	; 0x34
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375a:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003760:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003762:	d521      	bpl.n	80037a8 <HAL_I2C_EV_IRQHandler+0x258>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003764:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8003768:	2a22      	cmp	r2, #34	; 0x22
 800376a:	f000 817a 	beq.w	8003a62 <HAL_I2C_EV_IRQHandler+0x512>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800376e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003770:	6802      	ldr	r2, [r0, #0]
 8003772:	6852      	ldr	r2, [r2, #4]
 8003774:	b292      	uxth	r2, r2
 8003776:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003778:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800377a:	b292      	uxth	r2, r2
 800377c:	b11a      	cbz	r2, 8003786 <HAL_I2C_EV_IRQHandler+0x236>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800377e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003780:	f042 0204 	orr.w	r2, r2, #4
 8003784:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800378e:	f7ff f963 	bl	8002a58 <HAL_DMA_GetState>
 8003792:	2801      	cmp	r0, #1
 8003794:	d008      	beq.n	80037a8 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003796:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003798:	4ba2      	ldr	r3, [pc, #648]	; (8003a24 <HAL_I2C_EV_IRQHandler+0x4d4>)
 800379a:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800379c:	f7fe fff2 	bl	8002784 <HAL_DMA_Abort_IT>
 80037a0:	b110      	cbz	r0, 80037a8 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80037a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80037a6:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80037a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	b313      	cbz	r3, 80037f4 <HAL_I2C_EV_IRQHandler+0x2a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	0752      	lsls	r2, r2, #29
 80037b4:	d50a      	bpl.n	80037cc <HAL_I2C_EV_IRQHandler+0x27c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80037bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80037be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80037c0:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 80037c2:	3a01      	subs	r2, #1
 80037c4:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80037c6:	3101      	adds	r1, #1
      hi2c->XferCount--;
 80037c8:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80037ca:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	0657      	lsls	r7, r2, #25
 80037d0:	d509      	bpl.n	80037e6 <HAL_I2C_EV_IRQHandler+0x296>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80037d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80037da:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80037e0:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80037e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80037e4:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 80037e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b11b      	cbz	r3, 80037f4 <HAL_I2C_EV_IRQHandler+0x2a4>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 80dd 	bne.w	80039b6 <HAL_I2C_EV_IRQHandler+0x466>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037fc:	2d2a      	cmp	r5, #42	; 0x2a
 80037fe:	f000 8151 	beq.w	8003aa4 <HAL_I2C_EV_IRQHandler+0x554>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003802:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003806:	2b28      	cmp	r3, #40	; 0x28
 8003808:	f000 8154 	beq.w	8003ab4 <HAL_I2C_EV_IRQHandler+0x564>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800380c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800380e:	2b22      	cmp	r3, #34	; 0x22
 8003810:	d002      	beq.n	8003818 <HAL_I2C_EV_IRQHandler+0x2c8>
 8003812:	2d22      	cmp	r5, #34	; 0x22
 8003814:	f47f aecb 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003818:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800381a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800381c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800381e:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003820:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003828:	f7ff fcfa 	bl	8003220 <HAL_I2C_SlaveRxCpltCallback>
 800382c:	e6bf      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800382e:	060e      	lsls	r6, r1, #24
 8003830:	d528      	bpl.n	8003884 <HAL_I2C_EV_IRQHandler+0x334>
 8003832:	0545      	lsls	r5, r0, #21
 8003834:	d526      	bpl.n	8003884 <HAL_I2C_EV_IRQHandler+0x334>
 8003836:	0749      	lsls	r1, r1, #29
 8003838:	d427      	bmi.n	800388a <HAL_I2C_EV_IRQHandler+0x33a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800383a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800383e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003840:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003842:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003844:	2900      	cmp	r1, #0
 8003846:	f43f aeb2 	beq.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800384c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003850:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8003852:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003854:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003856:	3901      	subs	r1, #1
 8003858:	b289      	uxth	r1, r1
 800385a:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800385c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800385e:	b289      	uxth	r1, r1
 8003860:	2900      	cmp	r1, #0
 8003862:	f47f aea4 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 8003866:	2829      	cmp	r0, #41	; 0x29
 8003868:	f47f aea1 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386c:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800386e:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003870:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003874:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003876:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003878:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800387a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800387e:	f7ff fccd 	bl	800321c <HAL_I2C_SlaveTxCpltCallback>
 8003882:	e694      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003884:	074a      	lsls	r2, r1, #29
 8003886:	f57f ae92 	bpl.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 800388a:	0587      	lsls	r7, r0, #22
 800388c:	f57f ae8f 	bpl.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8003890:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003892:	b292      	uxth	r2, r2
 8003894:	2a00      	cmp	r2, #0
 8003896:	f43f ae8a 	beq.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800389a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800389c:	f812 1b01 	ldrb.w	r1, [r2], #1
 80038a0:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80038a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80038a4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8563      	strh	r3, [r4, #42]	; 0x2a
 80038ac:	e67f      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ae:	074a      	lsls	r2, r1, #29
 80038b0:	f57f ae7d 	bpl.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 80038b4:	0587      	lsls	r7, r0, #22
 80038b6:	f57f ae7a 	bpl.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 80038ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038bc:	b292      	uxth	r2, r2
 80038be:	2a00      	cmp	r2, #0
 80038c0:	f43f ae75 	beq.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 80038c4:	e01b      	b.n	80038fe <HAL_I2C_EV_IRQHandler+0x3ae>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	0512      	lsls	r2, r2, #20
 80038ca:	f53f ae70 	bmi.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ce:	064f      	lsls	r7, r1, #25
 80038d0:	d432      	bmi.n	8003938 <HAL_I2C_EV_IRQHandler+0x3e8>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d2:	0749      	lsls	r1, r1, #29
 80038d4:	f57f ae6b 	bpl.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 80038d8:	0582      	lsls	r2, r0, #22
 80038da:	f57f ae68 	bpl.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80038e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038e2:	b292      	uxth	r2, r2
 80038e4:	2a04      	cmp	r2, #4
 80038e6:	f000 8119 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x5cc>
  else if (hi2c->XferCount == 3U)
 80038ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038ec:	b292      	uxth	r2, r2
 80038ee:	2a03      	cmp	r2, #3
 80038f0:	f000 8159 	beq.w	8003ba6 <HAL_I2C_EV_IRQHandler+0x656>
  else if (hi2c->XferCount == 2U)
 80038f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038f6:	b292      	uxth	r2, r2
 80038f8:	2a02      	cmp	r2, #2
 80038fa:	f000 8185 	beq.w	8003c08 <HAL_I2C_EV_IRQHandler+0x6b8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003904:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003906:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003908:	3b01      	subs	r3, #1
 800390a:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 800390c:	3201      	adds	r2, #1
    hi2c->XferCount--;
 800390e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003910:	6262      	str	r2, [r4, #36]	; 0x24
      }
 8003912:	e64c      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003914:	074e      	lsls	r6, r1, #29
 8003916:	f57f ae4a 	bpl.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 800391a:	0581      	lsls	r1, r0, #22
 800391c:	f57f ae47 	bpl.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003920:	2a21      	cmp	r2, #33	; 0x21
 8003922:	f000 8103 	beq.w	8003b2c <HAL_I2C_EV_IRQHandler+0x5dc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003926:	2d40      	cmp	r5, #64	; 0x40
 8003928:	f47f ae41 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800392c:	4620      	mov	r0, r4
}
 800392e:	b00f      	add	sp, #60	; 0x3c
 8003930:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003934:	f7ff bc7c 	b.w	8003230 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003938:	0546      	lsls	r6, r0, #21
 800393a:	d5ca      	bpl.n	80038d2 <HAL_I2C_EV_IRQHandler+0x382>
 800393c:	074d      	lsls	r5, r1, #29
 800393e:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8003942:	d4c9      	bmi.n	80038d8 <HAL_I2C_EV_IRQHandler+0x388>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003944:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003948:	2922      	cmp	r1, #34	; 0x22
 800394a:	f47f ae30 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    tmp = hi2c->XferCount;
 800394e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003950:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8003952:	2903      	cmp	r1, #3
 8003954:	f240 81b0 	bls.w	8003cb8 <HAL_I2C_EV_IRQHandler+0x768>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800395e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003960:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003962:	3b01      	subs	r3, #1
 8003964:	b29b      	uxth	r3, r3
 8003966:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003968:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800396c:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 800396e:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8003970:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8003972:	f47f ae1c 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	6853      	ldr	r3, [r2, #4]
 800397a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800397e:	6053      	str	r3, [r2, #4]
 8003980:	e615      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003982:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003986:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003988:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800398a:	bf16      	itet	ne
 800398c:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003990:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003994:	b2d2      	uxtbne	r2, r2
 8003996:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003998:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800399a:	b11a      	cbz	r2, 80039a4 <HAL_I2C_EV_IRQHandler+0x454>
 800399c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800399e:	2a00      	cmp	r2, #0
 80039a0:	f47f ae22 	bne.w	80035e8 <HAL_I2C_EV_IRQHandler+0x98>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80039a6:	2a00      	cmp	r2, #0
 80039a8:	f43f ae01 	beq.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 80039ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039ae:	2a00      	cmp	r2, #0
 80039b0:	f47f ae1a 	bne.w	80035e8 <HAL_I2C_EV_IRQHandler+0x98>
 80039b4:	e5fb      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    I2C_ITError(hi2c);
 80039b6:	4620      	mov	r0, r4
}
 80039b8:	b00f      	add	sp, #60	; 0x3c
 80039ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80039be:	f7ff bd11 	b.w	80033e4 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 80039c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80039c4:	bb3a      	cbnz	r2, 8003a16 <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80039c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039cc:	611a      	str	r2, [r3, #16]
 80039ce:	e5ee      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80039d0:	2201      	movs	r2, #1
 80039d2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80039d4:	e61a      	b.n	800360c <HAL_I2C_EV_IRQHandler+0xbc>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039dc:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039de:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80039e2:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80039e4:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80039e8:	bf54      	ite	pl
 80039ea:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80039ec:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80039ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039f2:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff fc14 	bl	8003224 <HAL_I2C_AddrCallback>
 80039fc:	e5d7      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 80039fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003a00:	2a01      	cmp	r2, #1
 8003a02:	f47f add4 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a06:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003a08:	11d2      	asrs	r2, r2, #7
 8003a0a:	f002 0206 	and.w	r2, r2, #6
 8003a0e:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8003a12:	611a      	str	r2, [r3, #16]
 8003a14:	e5cb      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a16:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	611a      	str	r2, [r3, #16]
 8003a20:	e5c5      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 8003a22:	bf00      	nop
 8003a24:	080032f1 	.word	0x080032f1
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a28:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003a2a:	b911      	cbnz	r1, 8003a32 <HAL_I2C_EV_IRQHandler+0x4e2>
 8003a2c:	2a40      	cmp	r2, #64	; 0x40
 8003a2e:	f000 80a1 	beq.w	8003b74 <HAL_I2C_EV_IRQHandler+0x624>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a32:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003a34:	b922      	cbnz	r2, 8003a40 <HAL_I2C_EV_IRQHandler+0x4f0>
 8003a36:	6921      	ldr	r1, [r4, #16]
 8003a38:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8003a3c:	f000 80a5 	beq.w	8003b8a <HAL_I2C_EV_IRQHandler+0x63a>
      if (hi2c->XferCount == 0U)
 8003a40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a42:	b292      	uxth	r2, r2
 8003a44:	2a00      	cmp	r2, #0
 8003a46:	d142      	bne.n	8003ace <HAL_I2C_EV_IRQHandler+0x57e>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a48:	9203      	str	r2, [sp, #12]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	9203      	str	r2, [sp, #12]
 8003a4e:	699a      	ldr	r2, [r3, #24]
 8003a50:	9203      	str	r2, [sp, #12]
 8003a52:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	6523      	str	r3, [r4, #80]	; 0x50
 8003a60:	e5a5      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a64:	6802      	ldr	r2, [r0, #0]
 8003a66:	6852      	ldr	r2, [r2, #4]
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003a6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	b11a      	cbz	r2, 8003a7a <HAL_I2C_EV_IRQHandler+0x52a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a74:	f042 0204 	orr.w	r2, r2, #4
 8003a78:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a80:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a82:	f7fe ffe9 	bl	8002a58 <HAL_DMA_GetState>
 8003a86:	2801      	cmp	r0, #1
 8003a88:	f43f ae8e 	beq.w	80037a8 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a8e:	4ba6      	ldr	r3, [pc, #664]	; (8003d28 <HAL_I2C_EV_IRQHandler+0x7d8>)
 8003a90:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a92:	f7fe fe77 	bl	8002784 <HAL_DMA_Abort_IT>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	f43f ae86 	beq.w	80037a8 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003aa0:	4798      	blx	r3
 8003aa2:	e681      	b.n	80037a8 <HAL_I2C_EV_IRQHandler+0x258>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aa4:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aa6:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aa8:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aaa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aae:	f7ff fbb7 	bl	8003220 <HAL_I2C_SlaveRxCpltCallback>
 8003ab2:	e6a6      	b.n	8003802 <HAL_I2C_EV_IRQHandler+0x2b2>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab4:	4b9d      	ldr	r3, [pc, #628]	; (8003d2c <HAL_I2C_EV_IRQHandler+0x7dc>)
 8003ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8003abe:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003ac8:	f7ff fbae 	bl	8003228 <HAL_I2C_ListenCpltCallback>
 8003acc:	e56f      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->XferCount == 1U)
 8003ace:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	2a01      	cmp	r2, #1
 8003ad4:	d076      	beq.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x674>
      else if (hi2c->XferCount == 2U)
 8003ad6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	2a02      	cmp	r2, #2
 8003adc:	f000 812e 	beq.w	8003d3c <HAL_I2C_EV_IRQHandler+0x7ec>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae6:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	0511      	lsls	r1, r2, #20
 8003aec:	d50e      	bpl.n	8003b0c <HAL_I2C_EV_IRQHandler+0x5bc>
 8003aee:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003af2:	d007      	beq.n	8003b04 <HAL_I2C_EV_IRQHandler+0x5b4>
 8003af4:	3801      	subs	r0, #1
 8003af6:	281f      	cmp	r0, #31
 8003af8:	d808      	bhi.n	8003b0c <HAL_I2C_EV_IRQHandler+0x5bc>
 8003afa:	4a8d      	ldr	r2, [pc, #564]	; (8003d30 <HAL_I2C_EV_IRQHandler+0x7e0>)
 8003afc:	fa22 f000 	lsr.w	r0, r2, r0
 8003b00:	07c2      	lsls	r2, r0, #31
 8003b02:	d503      	bpl.n	8003b0c <HAL_I2C_EV_IRQHandler+0x5bc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b0a:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	9209      	str	r2, [sp, #36]	; 0x24
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	9309      	str	r3, [sp, #36]	; 0x24
 8003b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1a:	e79f      	b.n	8003a5c <HAL_I2C_EV_IRQHandler+0x50c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b1c:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b24:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003b2a:	e6eb      	b.n	8003904 <HAL_I2C_EV_IRQHandler+0x3b4>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b2e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003b32:	2a21      	cmp	r2, #33	; 0x21
 8003b34:	f47f ad3b 	bne.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount != 0U)
 8003b38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	f47f aeac 	bne.w	800389a <HAL_I2C_EV_IRQHandler+0x34a>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b42:	2908      	cmp	r1, #8
 8003b44:	f000 809a 	beq.w	8003c7c <HAL_I2C_EV_IRQHandler+0x72c>
 8003b48:	2920      	cmp	r1, #32
 8003b4a:	f000 8097 	beq.w	8003c7c <HAL_I2C_EV_IRQHandler+0x72c>
 8003b4e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003b52:	f000 8093 	beq.w	8003c7c <HAL_I2C_EV_IRQHandler+0x72c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b56:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b58:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b60:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b62:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b64:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b6e:	f7fe f8c9 	bl	8001d04 <HAL_I2C_MasterTxCpltCallback>
 8003b72:	e51c      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b74:	9101      	str	r1, [sp, #4]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	9201      	str	r2, [sp, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	9b01      	ldr	r3, [sp, #4]
 8003b80:	e515      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b82:	2a21      	cmp	r2, #33	; 0x21
 8003b84:	f43f adcc 	beq.w	8003720 <HAL_I2C_EV_IRQHandler+0x1d0>
 8003b88:	e5c4      	b.n	8003714 <HAL_I2C_EV_IRQHandler+0x1c4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	9202      	str	r2, [sp, #8]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	9202      	str	r2, [sp, #8]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	9202      	str	r2, [sp, #8]
 8003b94:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b9c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	6523      	str	r3, [r4, #80]	; 0x50
 8003ba4:	e503      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ba6:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ba8:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003bb0:	f43f aea5 	beq.w	80038fe <HAL_I2C_EV_IRQHandler+0x3ae>
 8003bb4:	2902      	cmp	r1, #2
 8003bb6:	f43f aea2 	beq.w	80038fe <HAL_I2C_EV_IRQHandler+0x3ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e69c      	b.n	80038fe <HAL_I2C_EV_IRQHandler+0x3ae>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bc4:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003bc8:	f000 8103 	beq.w	8003dd2 <HAL_I2C_EV_IRQHandler+0x882>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003bcc:	2808      	cmp	r0, #8
 8003bce:	f000 80d1 	beq.w	8003d74 <HAL_I2C_EV_IRQHandler+0x824>
 8003bd2:	2820      	cmp	r0, #32
 8003bd4:	f000 80ce 	beq.w	8003d74 <HAL_I2C_EV_IRQHandler+0x824>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003bd8:	2d12      	cmp	r5, #18
 8003bda:	f000 8139 	beq.w	8003e50 <HAL_I2C_EV_IRQHandler+0x900>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003bde:	2810      	cmp	r0, #16
 8003be0:	f200 8138 	bhi.w	8003e54 <HAL_I2C_EV_IRQHandler+0x904>
 8003be4:	4a53      	ldr	r2, [pc, #332]	; (8003d34 <HAL_I2C_EV_IRQHandler+0x7e4>)
 8003be6:	fa22 f000 	lsr.w	r0, r2, r0
 8003bea:	07c2      	lsls	r2, r0, #31
 8003bec:	f140 8132 	bpl.w	8003e54 <HAL_I2C_EV_IRQHandler+0x904>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bf6:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	9206      	str	r2, [sp, #24]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	9206      	str	r2, [sp, #24]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	9306      	str	r3, [sp, #24]
 8003c04:	9b06      	ldr	r3, [sp, #24]
 8003c06:	e729      	b.n	8003a5c <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c08:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0a:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c0c:	f000 80dd 	beq.w	8003dca <HAL_I2C_EV_IRQHandler+0x87a>
 8003c10:	2910      	cmp	r1, #16
 8003c12:	f000 80da 	beq.w	8003dca <HAL_I2C_EV_IRQHandler+0x87a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c16:	2904      	cmp	r1, #4
 8003c18:	f000 810b 	beq.w	8003e32 <HAL_I2C_EV_IRQHandler+0x8e2>
 8003c1c:	2902      	cmp	r1, #2
 8003c1e:	f000 8108 	beq.w	8003e32 <HAL_I2C_EV_IRQHandler+0x8e2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c26:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003c2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003c30:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3a:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8003c3c:	1c51      	adds	r1, r2, #1
 8003c3e:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8003c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c44:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8003c46:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c4e:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8003c50:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 8003c58:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c5a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c60:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	f000 80c8 	beq.w	8003dfa <HAL_I2C_EV_IRQHandler+0x8aa>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c6c:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c72:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c74:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c76:	f7fe f853 	bl	8001d20 <HAL_I2C_MasterRxCpltCallback>
 8003c7a:	e498      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c82:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003c8e:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c90:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c96:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ca0:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca2:	f47f af64 	bne.w	8003b6e <HAL_I2C_EV_IRQHandler+0x61e>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ca6:	f7ff fac1 	bl	800322c <HAL_I2C_MemTxCpltCallback>
 8003caa:	e480      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cac:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003cb0:	2a40      	cmp	r2, #64	; 0x40
 8003cb2:	f47f adf2 	bne.w	800389a <HAL_I2C_EV_IRQHandler+0x34a>
 8003cb6:	e639      	b.n	800392c <HAL_I2C_EV_IRQHandler+0x3dc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003cb8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003cba:	2802      	cmp	r0, #2
 8003cbc:	f43f ac77 	beq.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 8003cc0:	2901      	cmp	r1, #1
 8003cc2:	f63f ac74 	bhi.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cc6:	491c      	ldr	r1, [pc, #112]	; (8003d38 <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 8003cc8:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cca:	680a      	ldr	r2, [r1, #0]
 8003ccc:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003cd0:	fbb2 f2f1 	udiv	r2, r2, r1
 8003cd4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003cd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cda:	e004      	b.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x796>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8003ce2:	f000 80bc 	beq.w	8003e5e <HAL_I2C_EV_IRQHandler+0x90e>
    count--;
 8003ce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ce8:	3a01      	subs	r2, #1
 8003cea:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8003cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d1f4      	bne.n	8003cdc <HAL_I2C_EV_IRQHandler+0x78c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf6:	f042 0220 	orr.w	r2, r2, #32
 8003cfa:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8003d08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003d0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003d10:	3201      	adds	r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8003d14:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003d16:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8003d1c:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d22:	f7fd ffdf 	bl	8001ce4 <HAL_I2C_ErrorCallback>
 8003d26:	e442      	b.n	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 8003d28:	080032f1 	.word	0x080032f1
 8003d2c:	ffff0000 	.word	0xffff0000
 8003d30:	80008081 	.word	0x80008081
 8003d34:	00010014 	.word	0x00010014
 8003d38:	20000050 	.word	0x20000050
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d3c:	2810      	cmp	r0, #16
 8003d3e:	d965      	bls.n	8003e0c <HAL_I2C_EV_IRQHandler+0x8bc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	0516      	lsls	r6, r2, #20
 8003d54:	d506      	bpl.n	8003d64 <HAL_I2C_EV_IRQHandler+0x814>
 8003d56:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003d5a:	d162      	bne.n	8003e22 <HAL_I2C_EV_IRQHandler+0x8d2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d62:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d64:	2200      	movs	r2, #0
 8003d66:	9208      	str	r2, [sp, #32]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	9208      	str	r2, [sp, #32]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	9308      	str	r3, [sp, #32]
 8003d70:	9b08      	ldr	r3, [sp, #32]
 8003d72:	e673      	b.n	8003a5c <HAL_I2C_EV_IRQHandler+0x50c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d74:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	9107      	str	r1, [sp, #28]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	9207      	str	r2, [sp, #28]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	9207      	str	r2, [sp, #28]
 8003d88:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e663      	b.n	8003a5c <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d94:	2d08      	cmp	r5, #8
 8003d96:	f43f af71 	beq.w	8003c7c <HAL_I2C_EV_IRQHandler+0x72c>
 8003d9a:	2d20      	cmp	r5, #32
 8003d9c:	f43f af6e 	beq.w	8003c7c <HAL_I2C_EV_IRQHandler+0x72c>
 8003da0:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8003da4:	f43f af6a 	beq.w	8003c7c <HAL_I2C_EV_IRQHandler+0x72c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da8:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003daa:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003db4:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003db6:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003db8:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dc2:	f7fd ff9f 	bl	8001d04 <HAL_I2C_MasterTxCpltCallback>
 8003dc6:	f7ff bbf2 	b.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e72a      	b.n	8003c28 <HAL_I2C_EV_IRQHandler+0x6d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd8:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003de0:	d02b      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x8ea>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de4:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dea:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dec:	9104      	str	r1, [sp, #16]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	9204      	str	r2, [sp, #16]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	9304      	str	r3, [sp, #16]
 8003df6:	9b04      	ldr	r3, [sp, #16]
 8003df8:	e630      	b.n	8003a5c <HAL_I2C_EV_IRQHandler+0x50c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e00:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e02:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e04:	f7ff fa70 	bl	80032e8 <HAL_I2C_MemRxCpltCallback>
 8003e08:	f7ff bbd1 	b.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_I2C_EV_IRQHandler+0x954>)
 8003e0e:	40c2      	lsrs	r2, r0
 8003e10:	07d7      	lsls	r7, r2, #31
 8003e12:	d595      	bpl.n	8003d40 <HAL_I2C_EV_IRQHandler+0x7f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e1a:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	0515      	lsls	r5, r2, #20
 8003e20:	d5a0      	bpl.n	8003d64 <HAL_I2C_EV_IRQHandler+0x814>
 8003e22:	3801      	subs	r0, #1
 8003e24:	281f      	cmp	r0, #31
 8003e26:	d89d      	bhi.n	8003d64 <HAL_I2C_EV_IRQHandler+0x814>
 8003e28:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <HAL_I2C_EV_IRQHandler+0x958>)
 8003e2a:	40c2      	lsrs	r2, r0
 8003e2c:	07d0      	lsls	r0, r2, #31
 8003e2e:	d599      	bpl.n	8003d64 <HAL_I2C_EV_IRQHandler+0x814>
 8003e30:	e794      	b.n	8003d5c <HAL_I2C_EV_IRQHandler+0x80c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e6f6      	b.n	8003c28 <HAL_I2C_EV_IRQHandler+0x6d8>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	9205      	str	r2, [sp, #20]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	9205      	str	r2, [sp, #20]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	9205      	str	r2, [sp, #20]
 8003e44:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e605      	b.n	8003a5c <HAL_I2C_EV_IRQHandler+0x50c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e50:	2801      	cmp	r0, #1
 8003e52:	d18f      	bne.n	8003d74 <HAL_I2C_EV_IRQHandler+0x824>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e6cc      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x6a8>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5e:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e62:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003e66:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003e6e:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8003e74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003e76:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8003e7e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e84:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8003e88:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8003e8c:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e8e:	f47f aeed 	bne.w	8003c6c <HAL_I2C_EV_IRQHandler+0x71c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e96:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e98:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e9a:	f7ff fa25 	bl	80032e8 <HAL_I2C_MemRxCpltCallback>
 8003e9e:	f7ff bb86 	b.w	80035ae <HAL_I2C_EV_IRQHandler+0x5e>
 8003ea2:	bf00      	nop
 8003ea4:	00010014 	.word	0x00010014
 8003ea8:	80008081 	.word	0x80008081

08003eac <HAL_I2C_ER_IRQHandler>:
{
 8003eac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003eae:	6803      	ldr	r3, [r0, #0]
 8003eb0:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003eb2:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003eb4:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003eb8:	05e6      	lsls	r6, r4, #23
{
 8003eba:	b083      	sub	sp, #12
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ebc:	b2cd      	uxtb	r5, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ebe:	d52f      	bpl.n	8003f20 <HAL_I2C_ER_IRQHandler+0x74>
 8003ec0:	05d1      	lsls	r1, r2, #23
 8003ec2:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8003ec6:	d52b      	bpl.n	8003f20 <HAL_I2C_ER_IRQHandler+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ec8:	f46f 7280 	mvn.w	r2, #256	; 0x100
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ecc:	05a7      	lsls	r7, r4, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ece:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ed0:	d438      	bmi.n	8003f44 <HAL_I2C_ER_IRQHandler+0x98>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ed2:	0567      	lsls	r7, r4, #21
 8003ed4:	d56a      	bpl.n	8003fac <HAL_I2C_ER_IRQHandler+0x100>
    error |= HAL_I2C_ERROR_BERR;
 8003ed6:	2101      	movs	r1, #1
    tmp2 = hi2c->XferCount;
 8003ed8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    tmp3 = hi2c->State;
 8003eda:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8003ede:	6b07      	ldr	r7, [r0, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ee0:	2d20      	cmp	r5, #32
    tmp2 = hi2c->XferCount;
 8003ee2:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 8003ee4:	b2f6      	uxtb	r6, r6
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ee6:	d03a      	beq.n	8003f5e <HAL_I2C_ER_IRQHandler+0xb2>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003eec:	2d10      	cmp	r5, #16
      error |= HAL_I2C_ERROR_AF;
 8003eee:	f041 0104 	orr.w	r1, r1, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef2:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_ER_IRQHandler+0x4e>
 8003ef6:	2d40      	cmp	r5, #64	; 0x40
 8003ef8:	d103      	bne.n	8003f02 <HAL_I2C_ER_IRQHandler+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f00:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f02:	0525      	lsls	r5, r4, #20
 8003f04:	d504      	bpl.n	8003f10 <HAL_I2C_ER_IRQHandler+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f06:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8003f0a:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f0e:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8003f10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f12:	4319      	orrs	r1, r3
 8003f14:	6401      	str	r1, [r0, #64]	; 0x40
}
 8003f16:	b003      	add	sp, #12
 8003f18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003f1c:	f7ff ba62 	b.w	80033e4 <I2C_ITError>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f20:	05a6      	lsls	r6, r4, #22
 8003f22:	d503      	bpl.n	8003f2c <HAL_I2C_ER_IRQHandler+0x80>
 8003f24:	05d1      	lsls	r1, r2, #23
 8003f26:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8003f2a:	d416      	bmi.n	8003f5a <HAL_I2C_ER_IRQHandler+0xae>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f2c:	0566      	lsls	r6, r4, #21
 8003f2e:	f3c4 2180 	ubfx	r1, r4, #10, #1
 8003f32:	d403      	bmi.n	8003f3c <HAL_I2C_ER_IRQHandler+0x90>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f34:	0524      	lsls	r4, r4, #20
 8003f36:	d432      	bmi.n	8003f9e <HAL_I2C_ER_IRQHandler+0xf2>
}
 8003f38:	b003      	add	sp, #12
 8003f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f3c:	05d7      	lsls	r7, r2, #23
 8003f3e:	d5fb      	bpl.n	8003f38 <HAL_I2C_ER_IRQHandler+0x8c>
 8003f40:	2100      	movs	r1, #0
 8003f42:	e7c9      	b.n	8003ed8 <HAL_I2C_ER_IRQHandler+0x2c>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f44:	2103      	movs	r1, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f46:	f46f 7200 	mvn.w	r2, #512	; 0x200
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f4a:	0567      	lsls	r7, r4, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f4c:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f4e:	d4c3      	bmi.n	8003ed8 <HAL_I2C_ER_IRQHandler+0x2c>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f50:	0522      	lsls	r2, r4, #20
 8003f52:	d5dd      	bpl.n	8003f10 <HAL_I2C_ER_IRQHandler+0x64>
 8003f54:	07f6      	lsls	r6, r6, #31
 8003f56:	d4d6      	bmi.n	8003f06 <HAL_I2C_ER_IRQHandler+0x5a>
 8003f58:	e7da      	b.n	8003f10 <HAL_I2C_ER_IRQHandler+0x64>
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	e7f3      	b.n	8003f46 <HAL_I2C_ER_IRQHandler+0x9a>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f5e:	b9c2      	cbnz	r2, 8003f92 <HAL_I2C_ER_IRQHandler+0xe6>
 8003f60:	f006 02f7 	and.w	r2, r6, #247	; 0xf7
 8003f64:	2a21      	cmp	r2, #33	; 0x21
 8003f66:	d003      	beq.n	8003f70 <HAL_I2C_ER_IRQHandler+0xc4>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f68:	2e28      	cmp	r6, #40	; 0x28
 8003f6a:	d112      	bne.n	8003f92 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f6c:	2f21      	cmp	r7, #33	; 0x21
 8003f6e:	d110      	bne.n	8003f92 <HAL_I2C_ER_IRQHandler+0xe6>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f70:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f74:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003f76:	2d08      	cmp	r5, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f78:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003f7a:	d01c      	beq.n	8003fb6 <HAL_I2C_ER_IRQHandler+0x10a>
 8003f7c:	2d20      	cmp	r5, #32
 8003f7e:	d01a      	beq.n	8003fb6 <HAL_I2C_ER_IRQHandler+0x10a>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f80:	2a21      	cmp	r2, #33	; 0x21
 8003f82:	d034      	beq.n	8003fee <HAL_I2C_ER_IRQHandler+0x142>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f88:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f8a:	0524      	lsls	r4, r4, #20
 8003f8c:	d50a      	bpl.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xf8>
 8003f8e:	6803      	ldr	r3, [r0, #0]
 8003f90:	e7b9      	b.n	8003f06 <HAL_I2C_ER_IRQHandler+0x5a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      error |= HAL_I2C_ERROR_AF;
 8003f96:	f041 0104 	orr.w	r1, r1, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f9c:	e7b1      	b.n	8003f02 <HAL_I2C_ER_IRQHandler+0x56>
 8003f9e:	0a16      	lsrs	r6, r2, #8
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fa0:	07f6      	lsls	r6, r6, #31
 8003fa2:	d4b0      	bmi.n	8003f06 <HAL_I2C_ER_IRQHandler+0x5a>
  if (error != HAL_I2C_ERROR_NONE)
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	d1b3      	bne.n	8003f10 <HAL_I2C_ER_IRQHandler+0x64>
}
 8003fa8:	b003      	add	sp, #12
 8003faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fac:	0525      	lsls	r5, r4, #20
    error |= HAL_I2C_ERROR_BERR;
 8003fae:	f04f 0101 	mov.w	r1, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fb2:	d4f5      	bmi.n	8003fa0 <HAL_I2C_ER_IRQHandler+0xf4>
 8003fb4:	e7ac      	b.n	8003f10 <HAL_I2C_ER_IRQHandler+0x64>
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003fb6:	2a28      	cmp	r2, #40	; 0x28
 8003fb8:	d1e2      	bne.n	8003f80 <HAL_I2C_ER_IRQHandler+0xd4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fba:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <HAL_I2C_ER_IRQHandler+0x178>)
 8003fbc:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	9101      	str	r1, [sp, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc2:	f46f 6580 	mvn.w	r5, #1024	; 0x400
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	615d      	str	r5, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fce:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fd0:	9000      	str	r0, [sp, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	402a      	ands	r2, r5
 8003fd4:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd6:	2500      	movs	r5, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fd8:	2320      	movs	r3, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fda:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fdc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fe0:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fe4:	f7ff f920 	bl	8003228 <HAL_I2C_ListenCpltCallback>
 8003fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fec:	e7cd      	b.n	8003f8a <HAL_I2C_ER_IRQHandler+0xde>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fee:	4d0d      	ldr	r5, [pc, #52]	; (8004024 <HAL_I2C_ER_IRQHandler+0x178>)
 8003ff0:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ff2:	2620      	movs	r6, #32
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ff4:	2500      	movs	r5, #0
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ff6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ff8:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ffc:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	9101      	str	r1, [sp, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	f46f 6580 	mvn.w	r5, #1024	; 0x400
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004008:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800400c:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400e:	615d      	str	r5, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004010:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004012:	9000      	str	r0, [sp, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004014:	402a      	ands	r2, r5
 8004016:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004018:	f7ff f900 	bl	800321c <HAL_I2C_SlaveTxCpltCallback>
 800401c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004020:	e7b3      	b.n	8003f8a <HAL_I2C_ER_IRQHandler+0xde>
 8004022:	bf00      	nop
 8004024:	ffff0000 	.word	0xffff0000

08004028 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004028:	2800      	cmp	r0, #0
 800402a:	f000 81a5 	beq.w	8004378 <HAL_RCC_OscConfig+0x350>
{
 800402e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	6803      	ldr	r3, [r0, #0]
 8004034:	07dd      	lsls	r5, r3, #31
{
 8004036:	b082      	sub	sp, #8
 8004038:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403a:	d52f      	bpl.n	800409c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800403c:	49ac      	ldr	r1, [pc, #688]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 800403e:	688a      	ldr	r2, [r1, #8]
 8004040:	f002 020c 	and.w	r2, r2, #12
 8004044:	2a04      	cmp	r2, #4
 8004046:	f000 80ec 	beq.w	8004222 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	688a      	ldr	r2, [r1, #8]
 800404c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004050:	2a08      	cmp	r2, #8
 8004052:	f000 80e2 	beq.w	800421a <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004056:	6863      	ldr	r3, [r4, #4]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	f000 80eb 	beq.w	8004236 <HAL_RCC_OscConfig+0x20e>
 8004060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004064:	f000 8178 	beq.w	8004358 <HAL_RCC_OscConfig+0x330>
 8004068:	4da1      	ldr	r5, [pc, #644]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 800406a:	682a      	ldr	r2, [r5, #0]
 800406c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004070:	602a      	str	r2, [r5, #0]
 8004072:	682a      	ldr	r2, [r5, #0]
 8004074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004078:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800407a:	2b00      	cmp	r3, #0
 800407c:	f040 80e0 	bne.w	8004240 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe f936 	bl	80022f0 <HAL_GetTick>
 8004084:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004086:	e005      	b.n	8004094 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004088:	f7fe f932 	bl	80022f0 <HAL_GetTick>
 800408c:	1b80      	subs	r0, r0, r6
 800408e:	2864      	cmp	r0, #100	; 0x64
 8004090:	f200 8100 	bhi.w	8004294 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	039b      	lsls	r3, r3, #14
 8004098:	d4f6      	bmi.n	8004088 <HAL_RCC_OscConfig+0x60>
 800409a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409c:	079f      	lsls	r7, r3, #30
 800409e:	d528      	bpl.n	80040f2 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040a0:	4a93      	ldr	r2, [pc, #588]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 80040a2:	6891      	ldr	r1, [r2, #8]
 80040a4:	f011 0f0c 	tst.w	r1, #12
 80040a8:	f000 8090 	beq.w	80041cc <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ac:	6891      	ldr	r1, [r2, #8]
 80040ae:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040b2:	2908      	cmp	r1, #8
 80040b4:	f000 8086 	beq.w	80041c4 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b8:	68e3      	ldr	r3, [r4, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8106 	beq.w	80042cc <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c0:	4b8c      	ldr	r3, [pc, #560]	; (80042f4 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c2:	4e8b      	ldr	r6, [pc, #556]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040c8:	f7fe f912 	bl	80022f0 <HAL_GetTick>
 80040cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	e005      	b.n	80040dc <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d0:	f7fe f90e 	bl	80022f0 <HAL_GetTick>
 80040d4:	1b40      	subs	r0, r0, r5
 80040d6:	2802      	cmp	r0, #2
 80040d8:	f200 80dc 	bhi.w	8004294 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	6833      	ldr	r3, [r6, #0]
 80040de:	0798      	lsls	r0, r3, #30
 80040e0:	d5f6      	bpl.n	80040d0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e2:	6833      	ldr	r3, [r6, #0]
 80040e4:	6922      	ldr	r2, [r4, #16]
 80040e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80040ee:	6033      	str	r3, [r6, #0]
 80040f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f2:	071a      	lsls	r2, r3, #28
 80040f4:	d452      	bmi.n	800419c <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f6:	0758      	lsls	r0, r3, #29
 80040f8:	d52f      	bpl.n	800415a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fa:	4a7d      	ldr	r2, [pc, #500]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 80040fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80040fe:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004102:	d07e      	beq.n	8004202 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8004104:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	4e7c      	ldr	r6, [pc, #496]	; (80042f8 <HAL_RCC_OscConfig+0x2d0>)
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	05d9      	lsls	r1, r3, #23
 800410c:	f140 80b2 	bpl.w	8004274 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004110:	68a3      	ldr	r3, [r4, #8]
 8004112:	2b01      	cmp	r3, #1
 8004114:	f000 80c2 	beq.w	800429c <HAL_RCC_OscConfig+0x274>
 8004118:	2b05      	cmp	r3, #5
 800411a:	f000 812f 	beq.w	800437c <HAL_RCC_OscConfig+0x354>
 800411e:	4e74      	ldr	r6, [pc, #464]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 8004120:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	6732      	str	r2, [r6, #112]	; 0x70
 8004128:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800412a:	f022 0204 	bic.w	r2, r2, #4
 800412e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004130:	2b00      	cmp	r3, #0
 8004132:	f040 80b8 	bne.w	80042a6 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7fe f8db 	bl	80022f0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800413e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004140:	e005      	b.n	800414e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004142:	f7fe f8d5 	bl	80022f0 <HAL_GetTick>
 8004146:	1bc0      	subs	r0, r0, r7
 8004148:	4540      	cmp	r0, r8
 800414a:	f200 80a3 	bhi.w	8004294 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004150:	0798      	lsls	r0, r3, #30
 8004152:	d4f6      	bmi.n	8004142 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004154:	2d00      	cmp	r5, #0
 8004156:	f040 8109 	bne.w	800436c <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415a:	69a0      	ldr	r0, [r4, #24]
 800415c:	b1d0      	cbz	r0, 8004194 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415e:	4d64      	ldr	r5, [pc, #400]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 8004160:	68ab      	ldr	r3, [r5, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	f000 80cc 	beq.w	8004304 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416c:	4b63      	ldr	r3, [pc, #396]	; (80042fc <HAL_RCC_OscConfig+0x2d4>)
 800416e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004170:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004172:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004174:	f000 810c 	beq.w	8004390 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe f8ba 	bl	80022f0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800417e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004180:	e005      	b.n	800418e <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fe f8b5 	bl	80022f0 <HAL_GetTick>
 8004186:	1b40      	subs	r0, r0, r5
 8004188:	2802      	cmp	r0, #2
 800418a:	f200 8083 	bhi.w	8004294 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	019b      	lsls	r3, r3, #6
 8004192:	d4f6      	bmi.n	8004182 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2000      	movs	r0, #0
}
 8004196:	b002      	add	sp, #8
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800419c:	6963      	ldr	r3, [r4, #20]
 800419e:	b303      	cbz	r3, 80041e2 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80041a0:	4b57      	ldr	r3, [pc, #348]	; (8004300 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a2:	4e53      	ldr	r6, [pc, #332]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80041a8:	f7fe f8a2 	bl	80022f0 <HAL_GetTick>
 80041ac:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ae:	e004      	b.n	80041ba <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b0:	f7fe f89e 	bl	80022f0 <HAL_GetTick>
 80041b4:	1b40      	subs	r0, r0, r5
 80041b6:	2802      	cmp	r0, #2
 80041b8:	d86c      	bhi.n	8004294 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80041bc:	079b      	lsls	r3, r3, #30
 80041be:	d5f7      	bpl.n	80041b0 <HAL_RCC_OscConfig+0x188>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	e798      	b.n	80040f6 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c4:	6852      	ldr	r2, [r2, #4]
 80041c6:	0256      	lsls	r6, r2, #9
 80041c8:	f53f af76 	bmi.w	80040b8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041cc:	4a48      	ldr	r2, [pc, #288]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	0795      	lsls	r5, r2, #30
 80041d2:	d543      	bpl.n	800425c <HAL_RCC_OscConfig+0x234>
 80041d4:	68e2      	ldr	r2, [r4, #12]
 80041d6:	2a01      	cmp	r2, #1
 80041d8:	d040      	beq.n	800425c <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 80041da:	2001      	movs	r0, #1
}
 80041dc:	b002      	add	sp, #8
 80041de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4a47      	ldr	r2, [pc, #284]	; (8004300 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e4:	4e42      	ldr	r6, [pc, #264]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 80041e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80041e8:	f7fe f882 	bl	80022f0 <HAL_GetTick>
 80041ec:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ee:	e004      	b.n	80041fa <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fe f87e 	bl	80022f0 <HAL_GetTick>
 80041f4:	1b40      	subs	r0, r0, r5
 80041f6:	2802      	cmp	r0, #2
 80041f8:	d84c      	bhi.n	8004294 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fa:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80041fc:	079f      	lsls	r7, r3, #30
 80041fe:	d4f7      	bmi.n	80041f0 <HAL_RCC_OscConfig+0x1c8>
 8004200:	e7de      	b.n	80041c0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420a:	6413      	str	r3, [r2, #64]	; 0x40
 800420c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004216:	2501      	movs	r5, #1
 8004218:	e775      	b.n	8004106 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421a:	684a      	ldr	r2, [r1, #4]
 800421c:	0250      	lsls	r0, r2, #9
 800421e:	f57f af1a 	bpl.w	8004056 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004222:	4a33      	ldr	r2, [pc, #204]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	0391      	lsls	r1, r2, #14
 8004228:	f57f af38 	bpl.w	800409c <HAL_RCC_OscConfig+0x74>
 800422c:	6862      	ldr	r2, [r4, #4]
 800422e:	2a00      	cmp	r2, #0
 8004230:	f47f af34 	bne.w	800409c <HAL_RCC_OscConfig+0x74>
 8004234:	e7d1      	b.n	80041da <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	4a2e      	ldr	r2, [pc, #184]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004240:	f7fe f856 	bl	80022f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004244:	4e2a      	ldr	r6, [pc, #168]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8004246:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004248:	e004      	b.n	8004254 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800424a:	f7fe f851 	bl	80022f0 <HAL_GetTick>
 800424e:	1b40      	subs	r0, r0, r5
 8004250:	2864      	cmp	r0, #100	; 0x64
 8004252:	d81f      	bhi.n	8004294 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	039a      	lsls	r2, r3, #14
 8004258:	d5f7      	bpl.n	800424a <HAL_RCC_OscConfig+0x222>
 800425a:	e71e      	b.n	800409a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4924      	ldr	r1, [pc, #144]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 800425e:	6920      	ldr	r0, [r4, #16]
 8004260:	680a      	ldr	r2, [r1, #0]
 8004262:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004266:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800426a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426c:	071a      	lsls	r2, r3, #28
 800426e:	f57f af42 	bpl.w	80040f6 <HAL_RCC_OscConfig+0xce>
 8004272:	e793      	b.n	800419c <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004274:	6833      	ldr	r3, [r6, #0]
 8004276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800427c:	f7fe f838 	bl	80022f0 <HAL_GetTick>
 8004280:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	6833      	ldr	r3, [r6, #0]
 8004284:	05da      	lsls	r2, r3, #23
 8004286:	f53f af43 	bmi.w	8004110 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428a:	f7fe f831 	bl	80022f0 <HAL_GetTick>
 800428e:	1bc0      	subs	r0, r0, r7
 8004290:	2802      	cmp	r0, #2
 8004292:	d9f6      	bls.n	8004282 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8004294:	2003      	movs	r0, #3
}
 8004296:	b002      	add	sp, #8
 8004298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
 800429e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80042a6:	f7fe f823 	bl	80022f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	4f11      	ldr	r7, [pc, #68]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80042ac:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	e004      	b.n	80042be <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fe f81c 	bl	80022f0 <HAL_GetTick>
 80042b8:	1b80      	subs	r0, r0, r6
 80042ba:	4540      	cmp	r0, r8
 80042bc:	d8ea      	bhi.n	8004294 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c0:	079b      	lsls	r3, r3, #30
 80042c2:	d5f7      	bpl.n	80042b4 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 80042c4:	2d00      	cmp	r5, #0
 80042c6:	f43f af48 	beq.w	800415a <HAL_RCC_OscConfig+0x132>
 80042ca:	e04f      	b.n	800436c <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 80042cc:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ce:	4e08      	ldr	r6, [pc, #32]	; (80042f0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80042d0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042d2:	f7fe f80d 	bl	80022f0 <HAL_GetTick>
 80042d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d8:	e004      	b.n	80042e4 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042da:	f7fe f809 	bl	80022f0 <HAL_GetTick>
 80042de:	1b40      	subs	r0, r0, r5
 80042e0:	2802      	cmp	r0, #2
 80042e2:	d8d7      	bhi.n	8004294 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e4:	6833      	ldr	r3, [r6, #0]
 80042e6:	0799      	lsls	r1, r3, #30
 80042e8:	d4f7      	bmi.n	80042da <HAL_RCC_OscConfig+0x2b2>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	e701      	b.n	80040f2 <HAL_RCC_OscConfig+0xca>
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	42470000 	.word	0x42470000
 80042f8:	40007000 	.word	0x40007000
 80042fc:	42470060 	.word	0x42470060
 8004300:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004304:	2801      	cmp	r0, #1
 8004306:	f43f af46 	beq.w	8004196 <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 800430a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004312:	4291      	cmp	r1, r2
 8004314:	f47f af61 	bne.w	80041da <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004318:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800431a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	4291      	cmp	r1, r2
 8004320:	f47f af5b 	bne.w	80041da <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004324:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004326:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800432a:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004330:	f47f af53 	bne.w	80041da <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004334:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004336:	0852      	lsrs	r2, r2, #1
 8004338:	3a01      	subs	r2, #1
 800433a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800433e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004342:	f47f af4a 	bne.w	80041da <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004346:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004348:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800434c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8004350:	bf14      	ite	ne
 8004352:	2001      	movne	r0, #1
 8004354:	2000      	moveq	r0, #0
 8004356:	e71e      	b.n	8004196 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004358:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x3c4>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004368:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800436a:	e769      	b.n	8004240 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800436c:	4a1f      	ldr	r2, [pc, #124]	; (80043ec <HAL_RCC_OscConfig+0x3c4>)
 800436e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004374:	6413      	str	r3, [r2, #64]	; 0x40
 8004376:	e6f0      	b.n	800415a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8004378:	2001      	movs	r0, #1
}
 800437a:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x3c4>)
 800437e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004380:	f042 0204 	orr.w	r2, r2, #4
 8004384:	671a      	str	r2, [r3, #112]	; 0x70
 8004386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800438e:	e78a      	b.n	80042a6 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8004390:	f7fd ffae 	bl	80022f0 <HAL_GetTick>
 8004394:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e005      	b.n	80043a4 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fd ffaa 	bl	80022f0 <HAL_GetTick>
 800439c:	1b80      	subs	r0, r0, r6
 800439e:	2802      	cmp	r0, #2
 80043a0:	f63f af78 	bhi.w	8004294 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	0199      	lsls	r1, r3, #6
 80043a8:	d4f6      	bmi.n	8004398 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043aa:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80043ae:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80043b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80043b4:	4333      	orrs	r3, r6
 80043b6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80043ba:	0852      	lsrs	r2, r2, #1
 80043bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80043c0:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80043c2:	490b      	ldr	r1, [pc, #44]	; (80043f0 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c4:	4e09      	ldr	r6, [pc, #36]	; (80043ec <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80043ca:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043cc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80043ce:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80043d0:	f7fd ff8e 	bl	80022f0 <HAL_GetTick>
 80043d4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d6:	e005      	b.n	80043e4 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fd ff8a 	bl	80022f0 <HAL_GetTick>
 80043dc:	1b00      	subs	r0, r0, r4
 80043de:	2802      	cmp	r0, #2
 80043e0:	f63f af58 	bhi.w	8004294 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	019a      	lsls	r2, r3, #6
 80043e8:	d5f6      	bpl.n	80043d8 <HAL_RCC_OscConfig+0x3b0>
 80043ea:	e6d3      	b.n	8004194 <HAL_RCC_OscConfig+0x16c>
 80043ec:	40023800 	.word	0x40023800
 80043f0:	42470060 	.word	0x42470060

080043f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f4:	4917      	ldr	r1, [pc, #92]	; (8004454 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80043f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f8:	688b      	ldr	r3, [r1, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d01b      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x46>
 8004402:	2b08      	cmp	r3, #8
 8004404:	d117      	bne.n	8004436 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004406:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004408:	684b      	ldr	r3, [r1, #4]
 800440a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800440e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004412:	d114      	bne.n	800443e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004414:	6849      	ldr	r1, [r1, #4]
 8004416:	4810      	ldr	r0, [pc, #64]	; (8004458 <HAL_RCC_GetSysClockFreq+0x64>)
 8004418:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800441c:	fba1 0100 	umull	r0, r1, r1, r0
 8004420:	f7fb ff36 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_GetSysClockFreq+0x60>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800442c:	3301      	adds	r3, #1
 800442e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004430:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004434:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004436:	4808      	ldr	r0, [pc, #32]	; (8004458 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004438:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800443a:	4808      	ldr	r0, [pc, #32]	; (800445c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800443c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443e:	684b      	ldr	r3, [r1, #4]
 8004440:	4806      	ldr	r0, [pc, #24]	; (800445c <HAL_RCC_GetSysClockFreq+0x68>)
 8004442:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004446:	fba3 0100 	umull	r0, r1, r3, r0
 800444a:	2300      	movs	r3, #0
 800444c:	f7fb ff20 	bl	8000290 <__aeabi_uldivmod>
 8004450:	e7e8      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x30>
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400
 800445c:	017d7840 	.word	0x017d7840

08004460 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004460:	2800      	cmp	r0, #0
 8004462:	f000 8087 	beq.w	8004574 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004466:	4a48      	ldr	r2, [pc, #288]	; (8004588 <HAL_RCC_ClockConfig+0x128>)
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	428b      	cmp	r3, r1
{
 8004470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004474:	460d      	mov	r5, r1
 8004476:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004478:	d209      	bcs.n	800448e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	b2cb      	uxtb	r3, r1
 800447c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	428b      	cmp	r3, r1
 8004486:	d002      	beq.n	800448e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004488:	2001      	movs	r0, #1
}
 800448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	0798      	lsls	r0, r3, #30
 8004492:	d514      	bpl.n	80044be <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	0759      	lsls	r1, r3, #29
 8004496:	d504      	bpl.n	80044a2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	493c      	ldr	r1, [pc, #240]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 800449a:	688a      	ldr	r2, [r1, #8]
 800449c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80044a0:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	071a      	lsls	r2, r3, #28
 80044a4:	d504      	bpl.n	80044b0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a6:	4939      	ldr	r1, [pc, #228]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 80044a8:	688a      	ldr	r2, [r1, #8]
 80044aa:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80044ae:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b0:	4936      	ldr	r1, [pc, #216]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 80044b2:	68a0      	ldr	r0, [r4, #8]
 80044b4:	688a      	ldr	r2, [r1, #8]
 80044b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80044ba:	4302      	orrs	r2, r0
 80044bc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	07df      	lsls	r7, r3, #31
 80044c0:	d521      	bpl.n	8004506 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c2:	6862      	ldr	r2, [r4, #4]
 80044c4:	2a01      	cmp	r2, #1
 80044c6:	d057      	beq.n	8004578 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c8:	1e93      	subs	r3, r2, #2
 80044ca:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044cc:	4b2f      	ldr	r3, [pc, #188]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d0:	d94d      	bls.n	800456e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d2:	0799      	lsls	r1, r3, #30
 80044d4:	d5d8      	bpl.n	8004488 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4e2d      	ldr	r6, [pc, #180]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 80044d8:	68b3      	ldr	r3, [r6, #8]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	4313      	orrs	r3, r2
 80044e0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80044e2:	f7fd ff05 	bl	80022f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80044ea:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ec:	e004      	b.n	80044f8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ee:	f7fd feff 	bl	80022f0 <HAL_GetTick>
 80044f2:	1bc0      	subs	r0, r0, r7
 80044f4:	4540      	cmp	r0, r8
 80044f6:	d844      	bhi.n	8004582 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f8:	68b3      	ldr	r3, [r6, #8]
 80044fa:	6862      	ldr	r2, [r4, #4]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004504:	d1f3      	bne.n	80044ee <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004506:	4a20      	ldr	r2, [pc, #128]	; (8004588 <HAL_RCC_ClockConfig+0x128>)
 8004508:	6813      	ldr	r3, [r2, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	42ab      	cmp	r3, r5
 8004510:	d906      	bls.n	8004520 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	b2eb      	uxtb	r3, r5
 8004514:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	42ab      	cmp	r3, r5
 800451e:	d1b3      	bne.n	8004488 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	075a      	lsls	r2, r3, #29
 8004524:	d506      	bpl.n	8004534 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004526:	4919      	ldr	r1, [pc, #100]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 8004528:	68e0      	ldr	r0, [r4, #12]
 800452a:	688a      	ldr	r2, [r1, #8]
 800452c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004530:	4302      	orrs	r2, r0
 8004532:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004534:	071b      	lsls	r3, r3, #28
 8004536:	d507      	bpl.n	8004548 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004538:	4a14      	ldr	r2, [pc, #80]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 800453a:	6921      	ldr	r1, [r4, #16]
 800453c:	6893      	ldr	r3, [r2, #8]
 800453e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004542:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004546:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004548:	f7ff ff54 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 800454c:	4a0f      	ldr	r2, [pc, #60]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 800454e:	4c10      	ldr	r4, [pc, #64]	; (8004590 <HAL_RCC_ClockConfig+0x130>)
 8004550:	6892      	ldr	r2, [r2, #8]
 8004552:	4910      	ldr	r1, [pc, #64]	; (8004594 <HAL_RCC_ClockConfig+0x134>)
 8004554:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004558:	4603      	mov	r3, r0
 800455a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800455c:	480e      	ldr	r0, [pc, #56]	; (8004598 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800455e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004560:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004562:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004564:	f7fd fe7a 	bl	800225c <HAL_InitTick>
  return HAL_OK;
 8004568:	2000      	movs	r0, #0
}
 800456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456e:	0198      	lsls	r0, r3, #6
 8004570:	d4b1      	bmi.n	80044d6 <HAL_RCC_ClockConfig+0x76>
 8004572:	e789      	b.n	8004488 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004574:	2001      	movs	r0, #1
}
 8004576:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <HAL_RCC_ClockConfig+0x12c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	039e      	lsls	r6, r3, #14
 800457e:	d4aa      	bmi.n	80044d6 <HAL_RCC_ClockConfig+0x76>
 8004580:	e782      	b.n	8004488 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004582:	2003      	movs	r0, #3
 8004584:	e781      	b.n	800448a <HAL_RCC_ClockConfig+0x2a>
 8004586:	bf00      	nop
 8004588:	40023c00 	.word	0x40023c00
 800458c:	40023800 	.word	0x40023800
 8004590:	080066d0 	.word	0x080066d0
 8004594:	20000050 	.word	0x20000050
 8004598:	20000058 	.word	0x20000058

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800459e:	4a05      	ldr	r2, [pc, #20]	; (80045b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80045a0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80045a2:	4905      	ldr	r1, [pc, #20]	; (80045b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80045a8:	6808      	ldr	r0, [r1, #0]
 80045aa:	5cd3      	ldrb	r3, [r2, r3]
}
 80045ac:	40d8      	lsrs	r0, r3
 80045ae:	4770      	bx	lr
 80045b0:	40023800 	.word	0x40023800
 80045b4:	080066e0 	.word	0x080066e0
 80045b8:	20000050 	.word	0x20000050

080045bc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80045be:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80045c0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80045c2:	4905      	ldr	r1, [pc, #20]	; (80045d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045c4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80045c8:	6808      	ldr	r0, [r1, #0]
 80045ca:	5cd3      	ldrb	r3, [r2, r3]
}
 80045cc:	40d8      	lsrs	r0, r3
 80045ce:	4770      	bx	lr
 80045d0:	40023800 	.word	0x40023800
 80045d4:	080066e0 	.word	0x080066e0
 80045d8:	20000050 	.word	0x20000050

080045dc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d127      	bne.n	8004634 <HAL_TIM_Base_Start_IT+0x58>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e4:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	4915      	ldr	r1, [pc, #84]	; (800463c <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	2202      	movs	r2, #2
 80045ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ee:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f8:	d011      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x42>
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x42>
 8004600:	4a0f      	ldr	r2, [pc, #60]	; (8004640 <HAL_TIM_Base_Start_IT+0x64>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00b      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x42>
 8004606:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x42>
 800460e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x42>
 8004616:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800461a:	4293      	cmp	r3, r2
 800461c:	d104      	bne.n	8004628 <HAL_TIM_Base_Start_IT+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004624:	2a06      	cmp	r2, #6
 8004626:	d007      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004630:	2000      	movs	r0, #0
 8004632:	4770      	bx	lr
    return HAL_ERROR;
 8004634:	2001      	movs	r0, #1
 8004636:	4770      	bx	lr
  return HAL_OK;
 8004638:	2000      	movs	r0, #0
}
 800463a:	4770      	bx	lr
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400

08004644 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004644:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d075      	beq.n	8004738 <HAL_TIM_ConfigClockSource+0xf4>
 800464c:	4602      	mov	r2, r0
{
 800464e:	b4f0      	push	{r4, r5, r6, r7}

  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	2302      	movs	r3, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004652:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004658:	2001      	movs	r0, #1
 800465a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800465e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8004660:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004662:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 8004666:	f025 0577 	bic.w	r5, r5, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800466a:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800466c:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800466e:	d065      	beq.n	800473c <HAL_TIM_ConfigClockSource+0xf8>
 8004670:	d824      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x78>
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d07c      	beq.n	8004770 <HAL_TIM_ConfigClockSource+0x12c>
 8004676:	d94b      	bls.n	8004710 <HAL_TIM_ConfigClockSource+0xcc>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d117      	bne.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800467c:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467e:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004680:	6848      	ldr	r0, [r1, #4]
 8004682:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004684:	f026 0601 	bic.w	r6, r6, #1
 8004688:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004694:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004696:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800469c:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800469e:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046a4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80046ae:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80046b4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80046b8:	bcf0      	pop	{r4, r5, r6, r7}
 80046ba:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d038      	beq.n	8004734 <HAL_TIM_ConfigClockSource+0xf0>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	d110      	bne.n	80046ea <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046c8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80046cc:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80046ce:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d0:	432b      	orrs	r3, r5
 80046d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046da:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046dc:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2000      	movs	r0, #0
      break;
 80046e8:	e7e0      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80046ea:	2b70      	cmp	r3, #112	; 0x70
 80046ec:	d1de      	bne.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ee:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80046f2:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80046f4:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f6:	432b      	orrs	r3, r5
 80046f8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004700:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004702:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004704:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004706:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800470a:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2000      	movs	r0, #0
      break;
 800470e:	e7cd      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004710:	2b20      	cmp	r3, #32
 8004712:	d002      	beq.n	800471a <HAL_TIM_ConfigClockSource+0xd6>
 8004714:	d90a      	bls.n	800472c <HAL_TIM_ConfigClockSource+0xe8>
 8004716:	2b30      	cmp	r3, #48	; 0x30
 8004718:	d1c8      	bne.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800471a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800471c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004720:	430b      	orrs	r3, r1
 8004722:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004726:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004728:	2000      	movs	r0, #0
}
 800472a:	e7bf      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800472c:	f033 0110 	bics.w	r1, r3, #16
 8004730:	d1bc      	bne.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
 8004732:	e7f2      	b.n	800471a <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8004734:	2000      	movs	r0, #0
 8004736:	e7b9      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8004738:	2002      	movs	r0, #2
}
 800473a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473c:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	684d      	ldr	r5, [r1, #4]
 8004740:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004742:	f020 0010 	bic.w	r0, r0, #16
 8004746:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004748:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 800474a:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800474c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004750:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004754:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004758:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800475c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800475e:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004760:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004766:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800476a:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2000      	movs	r0, #0
}
 800476e:	e79d      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8004770:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004772:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004774:	6848      	ldr	r0, [r1, #4]
 8004776:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004778:	f026 0601 	bic.w	r6, r6, #1
 800477c:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477e:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004780:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004788:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800478a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800478e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004790:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004792:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004798:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800479c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2000      	movs	r0, #0
}
 80047a0:	e784      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x68>
 80047a2:	bf00      	nop

080047a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop

080047a8 <HAL_TIM_IC_CaptureCallback>:
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <HAL_TIM_PWM_PulseFinishedCallback>:
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop

080047b0 <HAL_TIM_TriggerCallback>:
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop

080047b4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047b4:	6803      	ldr	r3, [r0, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	0791      	lsls	r1, r2, #30
{
 80047ba:	b510      	push	{r4, lr}
 80047bc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047be:	d502      	bpl.n	80047c6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	0792      	lsls	r2, r2, #30
 80047c4:	d45f      	bmi.n	8004886 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	0750      	lsls	r0, r2, #29
 80047ca:	d502      	bpl.n	80047d2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	0751      	lsls	r1, r2, #29
 80047d0:	d446      	bmi.n	8004860 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	0712      	lsls	r2, r2, #28
 80047d6:	d502      	bpl.n	80047de <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	0710      	lsls	r0, r2, #28
 80047dc:	d42e      	bmi.n	800483c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	06d2      	lsls	r2, r2, #27
 80047e2:	d502      	bpl.n	80047ea <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	06d0      	lsls	r0, r2, #27
 80047e8:	d418      	bmi.n	800481c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	07d1      	lsls	r1, r2, #31
 80047ee:	d502      	bpl.n	80047f6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	07d2      	lsls	r2, r2, #31
 80047f4:	d45d      	bmi.n	80048b2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	0610      	lsls	r0, r2, #24
 80047fa:	d502      	bpl.n	8004802 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	0611      	lsls	r1, r2, #24
 8004800:	d45f      	bmi.n	80048c2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	0652      	lsls	r2, r2, #25
 8004806:	d502      	bpl.n	800480e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	0650      	lsls	r0, r2, #25
 800480c:	d461      	bmi.n	80048d2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	0691      	lsls	r1, r2, #26
 8004812:	d502      	bpl.n	800481a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	0692      	lsls	r2, r2, #26
 8004818:	d443      	bmi.n	80048a2 <HAL_TIM_IRQHandler+0xee>
}
 800481a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800481c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004820:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004822:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004824:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800482c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482e:	d064      	beq.n	80048fa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004830:	f7ff ffba 	bl	80047a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004834:	2200      	movs	r2, #0
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	7722      	strb	r2, [r4, #28]
 800483a:	e7d6      	b.n	80047ea <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004840:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004842:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004844:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800484a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484c:	d152      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	f7ff ffa9 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004852:	4620      	mov	r0, r4
 8004854:	f7ff ffaa 	bl	80047ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004858:	2200      	movs	r2, #0
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	7722      	strb	r2, [r4, #28]
 800485e:	e7be      	b.n	80047de <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004860:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004864:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004866:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004868:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004870:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004872:	d13c      	bne.n	80048ee <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004874:	f7ff ff96 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	4620      	mov	r0, r4
 800487a:	f7ff ff97 	bl	80047ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	2200      	movs	r2, #0
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	7722      	strb	r2, [r4, #28]
 8004884:	e7a5      	b.n	80047d2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004886:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800488c:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	079b      	lsls	r3, r3, #30
 8004894:	d025      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004896:	f7ff ff87 	bl	80047a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	2200      	movs	r2, #0
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	7722      	strb	r2, [r4, #28]
 80048a0:	e791      	b.n	80047c6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80048a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a8:	611a      	str	r2, [r3, #16]
}
 80048aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80048ae:	f000 b8e5 	b.w	8004a7c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048b2:	f06f 0201 	mvn.w	r2, #1
 80048b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80048b8:	4620      	mov	r0, r4
 80048ba:	f7fd fa3f 	bl	8001d3c <HAL_TIM_PeriodElapsedCallback>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	e799      	b.n	80047f6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80048c8:	4620      	mov	r0, r4
 80048ca:	f000 f8d9 	bl	8004a80 <HAL_TIMEx_BreakCallback>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	e797      	b.n	8004802 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80048d8:	4620      	mov	r0, r4
 80048da:	f7ff ff69 	bl	80047b0 <HAL_TIM_TriggerCallback>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	e795      	b.n	800480e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	f7ff ff5f 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff ff60 	bl	80047ac <HAL_TIM_PWM_PulseFinishedCallback>
 80048ec:	e7d5      	b.n	800489a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	f7ff ff5b 	bl	80047a8 <HAL_TIM_IC_CaptureCallback>
 80048f2:	e7c4      	b.n	800487e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80048f4:	f7ff ff58 	bl	80047a8 <HAL_TIM_IC_CaptureCallback>
 80048f8:	e7ae      	b.n	8004858 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	f7ff ff53 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fe:	4620      	mov	r0, r4
 8004900:	f7ff ff54 	bl	80047ac <HAL_TIM_PWM_PulseFinishedCallback>
 8004904:	e796      	b.n	8004834 <HAL_TIM_IRQHandler+0x80>
 8004906:	bf00      	nop

08004908 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800490a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800490c:	4290      	cmp	r0, r2
{
 800490e:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004910:	d033      	beq.n	800497a <TIM_Base_SetConfig+0x72>
 8004912:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004916:	d01b      	beq.n	8004950 <TIM_Base_SetConfig+0x48>
 8004918:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800491c:	4290      	cmp	r0, r2
 800491e:	d017      	beq.n	8004950 <TIM_Base_SetConfig+0x48>
 8004920:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004924:	4290      	cmp	r0, r2
 8004926:	d013      	beq.n	8004950 <TIM_Base_SetConfig+0x48>
 8004928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800492c:	4290      	cmp	r0, r2
 800492e:	d00f      	beq.n	8004950 <TIM_Base_SetConfig+0x48>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004930:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004934:	4290      	cmp	r0, r2
 8004936:	d00f      	beq.n	8004958 <TIM_Base_SetConfig+0x50>
 8004938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800493c:	4290      	cmp	r0, r2
 800493e:	d00b      	beq.n	8004958 <TIM_Base_SetConfig+0x50>
 8004940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004944:	4290      	cmp	r0, r2
 8004946:	d007      	beq.n	8004958 <TIM_Base_SetConfig+0x50>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004948:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800494a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800494c:	680a      	ldr	r2, [r1, #0]
 800494e:	e00a      	b.n	8004966 <TIM_Base_SetConfig+0x5e>
    tmpcr1 |= Structure->CounterMode;
 8004950:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004956:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004958:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800495a:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800495c:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800495e:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004964:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800496c:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800496e:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004970:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004972:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004974:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8004976:	6143      	str	r3, [r0, #20]
}
 8004978:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800497a:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497c:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004984:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800498c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004990:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004992:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004994:	688b      	ldr	r3, [r1, #8]
 8004996:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004998:	680b      	ldr	r3, [r1, #0]
 800499a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800499c:	690b      	ldr	r3, [r1, #16]
 800499e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80049a0:	2301      	movs	r3, #1
}
 80049a2:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80049a4:	6143      	str	r3, [r0, #20]
}
 80049a6:	4770      	bx	lr
 80049a8:	40010000 	.word	0x40010000

080049ac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80049ac:	b350      	cbz	r0, 8004a04 <HAL_TIM_Base_Init+0x58>
{
 80049ae:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80049b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049b4:	4604      	mov	r4, r0
 80049b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049ba:	b1f3      	cbz	r3, 80049fa <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049be:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80049c8:	f7ff ff9e 	bl	8004908 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80049d6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80049da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80049de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80049ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80049f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80049f6:	2000      	movs	r0, #0
}
 80049f8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80049fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80049fe:	f7fd fa71 	bl	8001ee4 <HAL_TIM_Base_MspInit>
 8004a02:	e7db      	b.n	80049bc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004a04:	2001      	movs	r0, #1
}
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d02e      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a10:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	2202      	movs	r2, #2
{
 8004a14:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004a16:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004a1a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a1c:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1e:	4d15      	ldr	r5, [pc, #84]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a24:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004a2a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	d011      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a32:	d00e      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004a34:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004a4a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d104      	bne.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a52:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a54:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a58:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a5a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004a5c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004a68:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004a6a:	4618      	mov	r0, r3
}
 8004a6c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a6e:	2002      	movs	r0, #2
}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40000400 	.word	0x40000400

08004a7c <HAL_TIMEx_CommutCallback>:
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <HAL_TIMEx_BreakCallback>:
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop

08004a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a84:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	f102 030c 	add.w	r3, r2, #12
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	f102 0c0c 	add.w	ip, r2, #12
 8004a96:	e84c 3100 	strex	r1, r3, [ip]
 8004a9a:	2900      	cmp	r1, #0
 8004a9c:	d1f3      	bne.n	8004a86 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	f102 0314 	add.w	r3, r2, #20
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	f102 0c14 	add.w	ip, r2, #20
 8004aae:	e84c 3100 	strex	r1, r3, [ip]
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	d1f3      	bne.n	8004a9e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d005      	beq.n	8004ac8 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004abc:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac4:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004ac6:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	f102 030c 	add.w	r3, r2, #12
 8004acc:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	f102 0c0c 	add.w	ip, r2, #12
 8004ad8:	e84c 3100 	strex	r1, r3, [ip]
 8004adc:	2900      	cmp	r1, #0
 8004ade:	d1f3      	bne.n	8004ac8 <UART_EndRxTransfer+0x44>
 8004ae0:	e7ec      	b.n	8004abc <UART_EndRxTransfer+0x38>
 8004ae2:	bf00      	nop

08004ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4604      	mov	r4, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae8:	4833      	ldr	r0, [pc, #204]	; (8004bb8 <UART_SetConfig+0xd4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	68e5      	ldr	r5, [r4, #12]
 8004aee:	6911      	ldr	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af0:	68a3      	ldr	r3, [r4, #8]
 8004af2:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004af8:	4329      	orrs	r1, r5
 8004afa:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004afc:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004afe:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b00:	4333      	orrs	r3, r6
 8004b02:	432b      	orrs	r3, r5
 8004b04:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004b06:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004b0a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b0e:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 8004b10:	430b      	orrs	r3, r1
 8004b12:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b14:	6953      	ldr	r3, [r2, #20]
 8004b16:	69a1      	ldr	r1, [r4, #24]
 8004b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1c:	430b      	orrs	r3, r1
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b1e:	4282      	cmp	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b22:	d029      	beq.n	8004b78 <UART_SetConfig+0x94>
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <UART_SetConfig+0xd8>)
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d026      	beq.n	8004b78 <UART_SetConfig+0x94>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b2a:	f7ff fd37 	bl	800459c <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2e:	69e3      	ldr	r3, [r4, #28]
 8004b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b34:	d126      	bne.n	8004b84 <UART_SetConfig+0xa0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b36:	6862      	ldr	r2, [r4, #4]
 8004b38:	4d21      	ldr	r5, [pc, #132]	; (8004bc0 <UART_SetConfig+0xdc>)
 8004b3a:	1892      	adds	r2, r2, r2
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	f04f 0119 	mov.w	r1, #25
 8004b44:	415b      	adcs	r3, r3
 8004b46:	fba0 0101 	umull	r0, r1, r0, r1
 8004b4a:	f7fb fba1 	bl	8000290 <__aeabi_uldivmod>
 8004b4e:	fba5 3200 	umull	r3, r2, r5, r0
 8004b52:	0951      	lsrs	r1, r2, #5
 8004b54:	2264      	movs	r2, #100	; 0x64
 8004b56:	fb02 0311 	mls	r3, r2, r1, r0
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3332      	adds	r3, #50	; 0x32
 8004b5e:	fba5 2303 	umull	r2, r3, r5, r3
 8004b62:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	6824      	ldr	r4, [r4, #0]
 8004b6a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004b6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b72:	4413      	add	r3, r2
 8004b74:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7ff fd20 	bl	80045bc <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7c:	69e3      	ldr	r3, [r4, #28]
 8004b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b82:	d0d8      	beq.n	8004b36 <UART_SetConfig+0x52>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	4d0e      	ldr	r5, [pc, #56]	; (8004bc0 <UART_SetConfig+0xdc>)
 8004b88:	2119      	movs	r1, #25
 8004b8a:	009a      	lsls	r2, r3, #2
 8004b8c:	fba0 0101 	umull	r0, r1, r0, r1
 8004b90:	0f9b      	lsrs	r3, r3, #30
 8004b92:	f7fb fb7d 	bl	8000290 <__aeabi_uldivmod>
 8004b96:	fba5 3100 	umull	r3, r1, r5, r0
 8004b9a:	0949      	lsrs	r1, r1, #5
 8004b9c:	2264      	movs	r2, #100	; 0x64
 8004b9e:	fb02 0311 	mls	r3, r2, r1, r0
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	3332      	adds	r3, #50	; 0x32
 8004ba6:	6824      	ldr	r4, [r4, #0]
 8004ba8:	fba5 2303 	umull	r2, r3, r5, r3
 8004bac:	0109      	lsls	r1, r1, #4
 8004bae:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8004bb2:	60a3      	str	r3, [r4, #8]
}
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40011000 	.word	0x40011000
 8004bbc:	40011400 	.word	0x40011400
 8004bc0:	51eb851f 	.word	0x51eb851f

08004bc4 <HAL_UART_Init>:
  if (huart == NULL)
 8004bc4:	b360      	cbz	r0, 8004c20 <HAL_UART_Init+0x5c>
{
 8004bc6:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004bcc:	4604      	mov	r4, r0
 8004bce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bd2:	b303      	cbz	r3, 8004c16 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8004bd4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004bd6:	2324      	movs	r3, #36	; 0x24
 8004bd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004bdc:	68d3      	ldr	r3, [r2, #12]
 8004bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff ff7d 	bl	8004ae4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bf2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bfa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004bfc:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004c02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c06:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c0a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004c12:	4628      	mov	r0, r5
}
 8004c14:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8004c16:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004c1a:	f7fd f983 	bl	8001f24 <HAL_UART_MspInit>
 8004c1e:	e7d9      	b.n	8004bd4 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8004c20:	2001      	movs	r0, #1
}
 8004c22:	4770      	bx	lr

08004c24 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c24:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d123      	bne.n	8004c74 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8004c2c:	b301      	cbz	r1, 8004c70 <HAL_UART_Receive_IT+0x4c>
 8004c2e:	b1fa      	cbz	r2, 8004c70 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8004c30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d01d      	beq.n	8004c74 <HAL_UART_Receive_IT+0x50>
{
 8004c38:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3a:	2300      	movs	r3, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c3c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	6303      	str	r3, [r0, #48]	; 0x30
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c40:	2522      	movs	r5, #34	; 0x22
  huart->RxXferCount = Size;
 8004c42:	85c2      	strh	r2, [r0, #46]	; 0x2e
  __HAL_UNLOCK(huart);
 8004c44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c48:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c4a:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c4e:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8004c50:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c52:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8004c56:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c58:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c5a:	6962      	ldr	r2, [r4, #20]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c62:	68e2      	ldr	r2, [r4, #12]
 8004c64:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c68:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c6a:	60e2      	str	r2, [r4, #12]
}
 8004c6c:	bc30      	pop	{r4, r5}
 8004c6e:	4770      	bx	lr
      return HAL_ERROR;
 8004c70:	2001      	movs	r0, #1
 8004c72:	4770      	bx	lr
    return HAL_BUSY;
 8004c74:	2002      	movs	r0, #2
}
 8004c76:	4770      	bx	lr

08004c78 <HAL_UART_Transmit_DMA>:
{
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004c7c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8004c80:	2820      	cmp	r0, #32
 8004c82:	d133      	bne.n	8004cec <HAL_UART_Transmit_DMA+0x74>
    if ((pData == NULL) || (Size == 0U))
 8004c84:	2900      	cmp	r1, #0
 8004c86:	d02f      	beq.n	8004ce8 <HAL_UART_Transmit_DMA+0x70>
 8004c88:	b372      	cbz	r2, 8004ce8 <HAL_UART_Transmit_DMA+0x70>
    __HAL_LOCK(huart);
 8004c8a:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8004c8e:	2801      	cmp	r0, #1
 8004c90:	d02c      	beq.n	8004cec <HAL_UART_Transmit_DMA+0x74>
    huart->TxXferCount = Size;
 8004c92:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8004c94:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c96:	6b60      	ldr	r0, [r4, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004c98:	6826      	ldr	r6, [r4, #0]
    huart->pTxBuffPtr = pData;
 8004c9a:	6221      	str	r1, [r4, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9c:	2500      	movs	r5, #0
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004c9e:	4613      	mov	r3, r2
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ca0:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca2:	6425      	str	r5, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8004ca4:	2701      	movs	r7, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ca6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004caa:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <HAL_UART_Transmit_DMA+0x78>)
    __HAL_LOCK(huart);
 8004cac:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004cb0:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <HAL_UART_Transmit_DMA+0x7c>)
 8004cb4:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004cb6:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <HAL_UART_Transmit_DMA+0x80>)
 8004cb8:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8004cba:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004cbc:	1d32      	adds	r2, r6, #4
 8004cbe:	f7fd fcdb 	bl	8002678 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8004cc8:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8004cca:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	f102 0314 	add.w	r3, r2, #20
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	f102 0114 	add.w	r1, r2, #20
 8004cde:	e841 3000 	strex	r0, r3, [r1]
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d1f3      	bne.n	8004cce <HAL_UART_Transmit_DMA+0x56>
}
 8004ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004ce8:	2001      	movs	r0, #1
}
 8004cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004cec:	2002      	movs	r0, #2
}
 8004cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf0:	08004d99 	.word	0x08004d99
 8004cf4:	08004de9 	.word	0x08004de9
 8004cf8:	08004df9 	.word	0x08004df9

08004cfc <HAL_UART_DMAStop>:
{
 8004cfc:	b510      	push	{r4, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004cfe:	6803      	ldr	r3, [r0, #0]
 8004d00:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d02:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004d06:	2a21      	cmp	r2, #33	; 0x21
{
 8004d08:	4604      	mov	r4, r0
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d0a:	d006      	beq.n	8004d1a <HAL_UART_DMAStop+0x1e>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0c:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d0e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004d12:	2a22      	cmp	r2, #34	; 0x22
 8004d14:	d028      	beq.n	8004d68 <HAL_UART_DMAStop+0x6c>
}
 8004d16:	2000      	movs	r0, #0
 8004d18:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d1a:	0609      	lsls	r1, r1, #24
 8004d1c:	d5f6      	bpl.n	8004d0c <HAL_UART_DMAStop+0x10>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	f103 0214 	add.w	r2, r3, #20
 8004d22:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	f103 0014 	add.w	r0, r3, #20
 8004d2e:	e840 2100 	strex	r1, r2, [r0]
 8004d32:	2900      	cmp	r1, #0
 8004d34:	d1f3      	bne.n	8004d1e <HAL_UART_DMAStop+0x22>
    if (huart->hdmatx != NULL)
 8004d36:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004d38:	b110      	cbz	r0, 8004d40 <HAL_UART_DMAStop+0x44>
      HAL_DMA_Abort(huart->hdmatx);
 8004d3a:	f7fd fcdb 	bl	80026f4 <HAL_DMA_Abort>
 8004d3e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	f103 020c 	add.w	r2, r3, #12
 8004d44:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d48:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	f103 000c 	add.w	r0, r3, #12
 8004d50:	e840 2100 	strex	r1, r2, [r0]
 8004d54:	2900      	cmp	r1, #0
 8004d56:	d1f3      	bne.n	8004d40 <HAL_UART_DMAStop+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d60:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004d64:	2a22      	cmp	r2, #34	; 0x22
 8004d66:	d1d6      	bne.n	8004d16 <HAL_UART_DMAStop+0x1a>
 8004d68:	064a      	lsls	r2, r1, #25
 8004d6a:	d5d4      	bpl.n	8004d16 <HAL_UART_DMAStop+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	f103 0214 	add.w	r2, r3, #20
 8004d70:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	f103 0014 	add.w	r0, r3, #20
 8004d7c:	e840 2100 	strex	r1, r2, [r0]
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d1f3      	bne.n	8004d6c <HAL_UART_DMAStop+0x70>
    if (huart->hdmarx != NULL)
 8004d84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d86:	b108      	cbz	r0, 8004d8c <HAL_UART_DMAStop+0x90>
      HAL_DMA_Abort(huart->hdmarx);
 8004d88:	f7fd fcb4 	bl	80026f4 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f7ff fe79 	bl	8004a84 <UART_EndRxTransfer>
}
 8004d92:	2000      	movs	r0, #0
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	bf00      	nop

08004d98 <UART_DMATransmitCplt>:
{
 8004d98:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d9a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004da4:	d11a      	bne.n	8004ddc <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 8004da6:	6802      	ldr	r2, [r0, #0]
 8004da8:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	f102 0314 	add.w	r3, r2, #20
 8004dae:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	f102 0014 	add.w	r0, r2, #20
 8004dba:	e840 3100 	strex	r1, r3, [r0]
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	d1f3      	bne.n	8004daa <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	f102 030c 	add.w	r3, r2, #12
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	f102 000c 	add.w	r0, r2, #12
 8004dd2:	e840 3100 	strex	r1, r3, [r0]
 8004dd6:	2900      	cmp	r1, #0
 8004dd8:	d1f3      	bne.n	8004dc2 <UART_DMATransmitCplt+0x2a>
}
 8004dda:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004ddc:	f7fc ff6a 	bl	8001cb4 <HAL_UART_TxCpltCallback>
}
 8004de0:	bd08      	pop	{r3, pc}
 8004de2:	bf00      	nop

08004de4 <HAL_UART_TxHalfCpltCallback>:
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <UART_DMATxHalfCplt>:
{
 8004de8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004dea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004dec:	f7ff fffa 	bl	8004de4 <HAL_UART_TxHalfCpltCallback>
}
 8004df0:	bd08      	pop	{r3, pc}
 8004df2:	bf00      	nop

08004df4 <HAL_UART_RxHalfCpltCallback>:
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop

08004df8 <UART_DMAError>:
{
 8004df8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004dfc:	6802      	ldr	r2, [r0, #0]
 8004dfe:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e00:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e04:	2b21      	cmp	r3, #33	; 0x21
 8004e06:	d00b      	beq.n	8004e20 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e08:	6952      	ldr	r2, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e0a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004e0e:	2b22      	cmp	r3, #34	; 0x22
 8004e10:	d01e      	beq.n	8004e50 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e14:	f043 0310 	orr.w	r3, r3, #16
 8004e18:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8004e1a:	f7fc ff37 	bl	8001c8c <HAL_UART_ErrorCallback>
}
 8004e1e:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e20:	0609      	lsls	r1, r1, #24
 8004e22:	d5f1      	bpl.n	8004e08 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	f102 030c 	add.w	r3, r2, #12
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	f102 0c0c 	add.w	ip, r2, #12
 8004e38:	e84c 3100 	strex	r1, r3, [ip]
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	d1f3      	bne.n	8004e28 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8004e40:	2320      	movs	r3, #32
 8004e42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e46:	6952      	ldr	r2, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e48:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004e4c:	2b22      	cmp	r3, #34	; 0x22
 8004e4e:	d1e0      	bne.n	8004e12 <UART_DMAError+0x1a>
 8004e50:	0653      	lsls	r3, r2, #25
 8004e52:	d5de      	bpl.n	8004e12 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e58:	f7ff fe14 	bl	8004a84 <UART_EndRxTransfer>
 8004e5c:	e7d9      	b.n	8004e12 <UART_DMAError+0x1a>
 8004e5e:	bf00      	nop

08004e60 <UART_DMAAbortOnError>:
{
 8004e60:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e62:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e68:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004e6a:	f7fc ff0f 	bl	8001c8c <HAL_UART_ErrorCallback>
}
 8004e6e:	bd08      	pop	{r3, pc}

08004e70 <HAL_UARTEx_RxEventCallback>:
}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop

08004e74 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e74:	6883      	ldr	r3, [r0, #8]
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7a:	d044      	beq.n	8004f06 <UART_Receive_IT.part.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d038      	beq.n	8004ef4 <UART_Receive_IT.part.0+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e82:	6803      	ldr	r3, [r0, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004e8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e8e:	3301      	adds	r3, #1
 8004e90:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004e92:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d131      	bne.n	8004f02 <UART_Receive_IT.part.0+0x8e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e9e:	6802      	ldr	r2, [r0, #0]
 8004ea0:	68d1      	ldr	r1, [r2, #12]
 8004ea2:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004ea6:	b510      	push	{r4, lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ea8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004eaa:	68d1      	ldr	r1, [r2, #12]
 8004eac:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004eb0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eb2:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eb6:	f021 0101 	bic.w	r1, r1, #1
 8004eba:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004ec2:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004ec4:	b082      	sub	sp, #8
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec6:	d129      	bne.n	8004f1c <UART_Receive_IT.part.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec8:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	f102 030c 	add.w	r3, r2, #12
 8004ece:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	f102 040c 	add.w	r4, r2, #12
 8004eda:	e844 3100 	strex	r1, r3, [r4]
 8004ede:	2900      	cmp	r1, #0
 8004ee0:	d1f3      	bne.n	8004eca <UART_Receive_IT.part.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	06db      	lsls	r3, r3, #27
 8004ee6:	d423      	bmi.n	8004f30 <UART_Receive_IT.part.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004eea:	f7ff ffc1 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
}
 8004eee:	2000      	movs	r0, #0
 8004ef0:	b002      	add	sp, #8
 8004ef2:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ef4:	6903      	ldr	r3, [r0, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1c3      	bne.n	8004e82 <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004efa:	6803      	ldr	r3, [r0, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	7013      	strb	r3, [r2, #0]
 8004f00:	e7c4      	b.n	8004e8c <UART_Receive_IT.part.0+0x18>
}
 8004f02:	2000      	movs	r0, #0
 8004f04:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f06:	6903      	ldr	r3, [r0, #16]
 8004f08:	b96b      	cbnz	r3, 8004f26 <UART_Receive_IT.part.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f0a:	6802      	ldr	r2, [r0, #0]
 8004f0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f0e:	6852      	ldr	r2, [r2, #4]
 8004f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f14:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8004f18:	6283      	str	r3, [r0, #40]	; 0x28
 8004f1a:	e7ba      	b.n	8004e92 <UART_Receive_IT.part.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 8004f1c:	f7fc fdac 	bl	8001a78 <HAL_UART_RxCpltCallback>
}
 8004f20:	2000      	movs	r0, #0
 8004f22:	b002      	add	sp, #8
 8004f24:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f26:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f28:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	7013      	strb	r3, [r2, #0]
 8004f2e:	e7ad      	b.n	8004e8c <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f30:	9101      	str	r1, [sp, #4]
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	6853      	ldr	r3, [r2, #4]
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	9b01      	ldr	r3, [sp, #4]
 8004f3c:	e7d4      	b.n	8004ee8 <UART_Receive_IT.part.0+0x74>
 8004f3e:	bf00      	nop

08004f40 <HAL_UART_IRQHandler>:
{
 8004f40:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f42:	6803      	ldr	r3, [r0, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f46:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f48:	695e      	ldr	r6, [r3, #20]
  if (errorflags == RESET)
 8004f4a:	f012 0f0f 	tst.w	r2, #15
{
 8004f4e:	b082      	sub	sp, #8
 8004f50:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f52:	461d      	mov	r5, r3
  if (errorflags == RESET)
 8004f54:	d16e      	bne.n	8005034 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f56:	0693      	lsls	r3, r2, #26
 8004f58:	d502      	bpl.n	8004f60 <HAL_UART_IRQHandler+0x20>
 8004f5a:	068e      	lsls	r6, r1, #26
 8004f5c:	f100 80b1 	bmi.w	80050c2 <HAL_UART_IRQHandler+0x182>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d00b      	beq.n	8004f7e <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f66:	0616      	lsls	r6, r2, #24
 8004f68:	d502      	bpl.n	8004f70 <HAL_UART_IRQHandler+0x30>
 8004f6a:	0608      	lsls	r0, r1, #24
 8004f6c:	f100 80b3 	bmi.w	80050d6 <HAL_UART_IRQHandler+0x196>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f70:	0652      	lsls	r2, r2, #25
 8004f72:	d502      	bpl.n	8004f7a <HAL_UART_IRQHandler+0x3a>
 8004f74:	064b      	lsls	r3, r1, #25
 8004f76:	f100 80cc 	bmi.w	8005112 <HAL_UART_IRQHandler+0x1d2>
}
 8004f7a:	b002      	add	sp, #8
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f7e:	06d6      	lsls	r6, r2, #27
 8004f80:	d5f1      	bpl.n	8004f66 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f82:	06c8      	lsls	r0, r1, #27
 8004f84:	d5ef      	bpl.n	8004f66 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f86:	2300      	movs	r3, #0
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	686b      	ldr	r3, [r5, #4]
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	696b      	ldr	r3, [r5, #20]
 8004f96:	065b      	lsls	r3, r3, #25
 8004f98:	f140 80eb 	bpl.w	8005172 <HAL_UART_IRQHandler+0x232>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f9e:	6803      	ldr	r3, [r0, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0e8      	beq.n	8004f7a <HAL_UART_IRQHandler+0x3a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d9e5      	bls.n	8004f7a <HAL_UART_IRQHandler+0x3a>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fae:	69c1      	ldr	r1, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb0:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fb2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004fb6:	d036      	beq.n	8005026 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	f105 030c 	add.w	r3, r5, #12
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	f105 010c 	add.w	r1, r5, #12
 8004fc8:	e841 3200 	strex	r2, r3, [r1]
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d1f3      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	f105 0314 	add.w	r3, r5, #20
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	f105 0114 	add.w	r1, r5, #20
 8004fe0:	e841 3200 	strex	r2, r3, [r1]
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	d1f3      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x90>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	f105 0314 	add.w	r3, r5, #20
 8004fec:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	f105 0114 	add.w	r1, r5, #20
 8004ff8:	e841 3200 	strex	r2, r3, [r1]
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	d1f3      	bne.n	8004fe8 <HAL_UART_IRQHandler+0xa8>
          huart->RxState = HAL_UART_STATE_READY;
 8005000:	2320      	movs	r3, #32
 8005002:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	f105 030c 	add.w	r3, r5, #12
 800500c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005010:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	f105 010c 	add.w	r1, r5, #12
 8005018:	e841 3200 	strex	r2, r3, [r1]
 800501c:	2a00      	cmp	r2, #0
 800501e:	d1f3      	bne.n	8005008 <HAL_UART_IRQHandler+0xc8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005020:	f7fd fb68 	bl	80026f4 <HAL_DMA_Abort>
 8005024:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005026:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	b291      	uxth	r1, r2
 800502c:	4620      	mov	r0, r4
 800502e:	f7ff ff1f 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
 8005032:	e7a2      	b.n	8004f7a <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005034:	f006 0601 	and.w	r6, r6, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005038:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800503c:	4330      	orrs	r0, r6
 800503e:	d08f      	beq.n	8004f60 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005040:	07d0      	lsls	r0, r2, #31
 8005042:	d505      	bpl.n	8005050 <HAL_UART_IRQHandler+0x110>
 8005044:	05cd      	lsls	r5, r1, #23
 8005046:	d503      	bpl.n	8005050 <HAL_UART_IRQHandler+0x110>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005048:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800504a:	f040 0001 	orr.w	r0, r0, #1
 800504e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005050:	0750      	lsls	r0, r2, #29
 8005052:	d531      	bpl.n	80050b8 <HAL_UART_IRQHandler+0x178>
 8005054:	b14e      	cbz	r6, 800506a <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005056:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005058:	0795      	lsls	r5, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800505a:	f040 0002 	orr.w	r0, r0, #2
 800505e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005060:	d503      	bpl.n	800506a <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005062:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005064:	f040 0004 	orr.w	r0, r0, #4
 8005068:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800506a:	0715      	lsls	r5, r2, #28
 800506c:	d507      	bpl.n	800507e <HAL_UART_IRQHandler+0x13e>
 800506e:	f001 0020 	and.w	r0, r1, #32
 8005072:	4330      	orrs	r0, r6
 8005074:	d003      	beq.n	800507e <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005076:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005078:	f040 0008 	orr.w	r0, r0, #8
 800507c:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005080:	2800      	cmp	r0, #0
 8005082:	f43f af7a 	beq.w	8004f7a <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005086:	0690      	lsls	r0, r2, #26
 8005088:	d509      	bpl.n	800509e <HAL_UART_IRQHandler+0x15e>
 800508a:	068a      	lsls	r2, r1, #26
 800508c:	d507      	bpl.n	800509e <HAL_UART_IRQHandler+0x15e>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800508e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005092:	2a22      	cmp	r2, #34	; 0x22
 8005094:	d103      	bne.n	800509e <HAL_UART_IRQHandler+0x15e>
 8005096:	4620      	mov	r0, r4
 8005098:	f7ff feec 	bl	8004e74 <UART_Receive_IT.part.0>
 800509c:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050a0:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050a6:	f005 0508 	and.w	r5, r5, #8
 80050aa:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80050ac:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050ae:	d13b      	bne.n	8005128 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 80050b0:	f7fc fdec 	bl	8001c8c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	6425      	str	r5, [r4, #64]	; 0x40
 80050b6:	e760      	b.n	8004f7a <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050b8:	0790      	lsls	r0, r2, #30
 80050ba:	d5d6      	bpl.n	800506a <HAL_UART_IRQHandler+0x12a>
 80050bc:	2e00      	cmp	r6, #0
 80050be:	d0d4      	beq.n	800506a <HAL_UART_IRQHandler+0x12a>
 80050c0:	e7cf      	b.n	8005062 <HAL_UART_IRQHandler+0x122>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050c2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80050c6:	2b22      	cmp	r3, #34	; 0x22
 80050c8:	f47f af57 	bne.w	8004f7a <HAL_UART_IRQHandler+0x3a>
}
 80050cc:	b002      	add	sp, #8
 80050ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050d2:	f7ff becf 	b.w	8004e74 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80050da:	2b21      	cmp	r3, #33	; 0x21
 80050dc:	f47f af4d 	bne.w	8004f7a <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e0:	68a3      	ldr	r3, [r4, #8]
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e6:	d07d      	beq.n	80051e4 <HAL_UART_IRQHandler+0x2a4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050e8:	6a23      	ldr	r3, [r4, #32]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	6222      	str	r2, [r4, #32]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	606b      	str	r3, [r5, #4]
    if (--huart->TxXferCount == 0U)
 80050f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	84e3      	strh	r3, [r4, #38]	; 0x26
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f47f af3d 	bne.w	8004f7a <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005100:	68eb      	ldr	r3, [r5, #12]
 8005102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005106:	60eb      	str	r3, [r5, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005108:	68eb      	ldr	r3, [r5, #12]
 800510a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510e:	60eb      	str	r3, [r5, #12]
 8005110:	e733      	b.n	8004f7a <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005112:	68eb      	ldr	r3, [r5, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005114:	2220      	movs	r2, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511a:	60eb      	str	r3, [r5, #12]
  HAL_UART_TxCpltCallback(huart);
 800511c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800511e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8005122:	f7fc fdc7 	bl	8001cb4 <HAL_UART_TxCpltCallback>
    return;
 8005126:	e728      	b.n	8004f7a <HAL_UART_IRQHandler+0x3a>
        UART_EndRxTransfer(huart);
 8005128:	f7ff fcac 	bl	8004a84 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	696b      	ldr	r3, [r5, #20]
 8005130:	065b      	lsls	r3, r3, #25
 8005132:	d51a      	bpl.n	800516a <HAL_UART_IRQHandler+0x22a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	f105 0314 	add.w	r3, r5, #20
 8005138:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	f105 0114 	add.w	r1, r5, #20
 8005144:	e841 3200 	strex	r2, r3, [r1]
 8005148:	2a00      	cmp	r2, #0
 800514a:	d1f3      	bne.n	8005134 <HAL_UART_IRQHandler+0x1f4>
          if (huart->hdmarx != NULL)
 800514c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800514e:	b160      	cbz	r0, 800516a <HAL_UART_IRQHandler+0x22a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005150:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <HAL_UART_IRQHandler+0x2bc>)
 8005152:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005154:	f7fd fb16 	bl	8002784 <HAL_DMA_Abort_IT>
 8005158:	2800      	cmp	r0, #0
 800515a:	f43f af0e 	beq.w	8004f7a <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800515e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005160:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8005162:	b002      	add	sp, #8
 8005164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005168:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800516a:	4620      	mov	r0, r4
 800516c:	f7fc fd8e 	bl	8001c8c <HAL_UART_ErrorCallback>
 8005170:	e703      	b.n	8004f7a <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005172:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8005174:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005176:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005178:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800517a:	2b00      	cmp	r3, #0
 800517c:	f43f aefd 	beq.w	8004f7a <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005180:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005182:	1a8a      	subs	r2, r1, r2
 8005184:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8005186:	2900      	cmp	r1, #0
 8005188:	f43f aef7 	beq.w	8004f7a <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	f105 030c 	add.w	r3, r5, #12
 8005190:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	f105 000c 	add.w	r0, r5, #12
 800519c:	e840 3200 	strex	r2, r3, [r0]
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	d1f3      	bne.n	800518c <HAL_UART_IRQHandler+0x24c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	f105 0314 	add.w	r3, r5, #20
 80051a8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	f105 0014 	add.w	r0, r5, #20
 80051b4:	e840 3200 	strex	r2, r3, [r0]
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d1f3      	bne.n	80051a4 <HAL_UART_IRQHandler+0x264>
        huart->RxState = HAL_UART_STATE_READY;
 80051bc:	2320      	movs	r3, #32
 80051be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c2:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	f105 030c 	add.w	r3, r5, #12
 80051c8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	f105 000c 	add.w	r0, r5, #12
 80051d4:	e840 3200 	strex	r2, r3, [r0]
 80051d8:	2a00      	cmp	r2, #0
 80051da:	d1f3      	bne.n	80051c4 <HAL_UART_IRQHandler+0x284>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051dc:	4620      	mov	r0, r4
 80051de:	f7ff fe47 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
 80051e2:	e6ca      	b.n	8004f7a <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f47f af7e 	bne.w	80050e8 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051ec:	6a23      	ldr	r3, [r4, #32]
 80051ee:	f833 2b02 	ldrh.w	r2, [r3], #2
 80051f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f6:	606a      	str	r2, [r5, #4]
      huart->pTxBuffPtr += 2U;
 80051f8:	6223      	str	r3, [r4, #32]
 80051fa:	e77a      	b.n	80050f2 <HAL_UART_IRQHandler+0x1b2>
 80051fc:	08004e61 	.word	0x08004e61

08005200 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005200:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005202:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005206:	2b01      	cmp	r3, #1
 8005208:	d002      	beq.n	8005210 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800520a:	f7ff fdf3 	bl	8004df4 <HAL_UART_RxHalfCpltCallback>
}
 800520e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005210:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005212:	0849      	lsrs	r1, r1, #1
 8005214:	f7ff fe2c 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
}
 8005218:	bd08      	pop	{r3, pc}
 800521a:	bf00      	nop

0800521c <UART_DMAReceiveCplt>:
{
 800521c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800521e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005220:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005228:	d12b      	bne.n	8005282 <UART_DMAReceiveCplt+0x66>
    huart->RxXferCount = 0U;
 800522a:	6803      	ldr	r3, [r0, #0]
 800522c:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	f103 020c 	add.w	r2, r3, #12
 8005232:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	f103 0c0c 	add.w	ip, r3, #12
 800523e:	e84c 2100 	strex	r1, r2, [ip]
 8005242:	2900      	cmp	r1, #0
 8005244:	d1f3      	bne.n	800522e <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	f103 0214 	add.w	r2, r3, #20
 800524a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	f103 0c14 	add.w	ip, r3, #20
 8005256:	e84c 2100 	strex	r1, r2, [ip]
 800525a:	2900      	cmp	r1, #0
 800525c:	d1f3      	bne.n	8005246 <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	f103 0214 	add.w	r2, r3, #20
 8005262:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	f103 0c14 	add.w	ip, r3, #20
 800526e:	e84c 2100 	strex	r1, r2, [ip]
 8005272:	2900      	cmp	r1, #0
 8005274:	d1f3      	bne.n	800525e <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 8005276:	2220      	movs	r2, #32
 8005278:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800527e:	2a01      	cmp	r2, #1
 8005280:	d005      	beq.n	800528e <UART_DMAReceiveCplt+0x72>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005282:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005284:	2b01      	cmp	r3, #1
 8005286:	d00f      	beq.n	80052a8 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8005288:	f7fc fbf6 	bl	8001a78 <HAL_UART_RxCpltCallback>
}
 800528c:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	f103 020c 	add.w	r2, r3, #12
 8005292:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005296:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	f103 0c0c 	add.w	ip, r3, #12
 800529e:	e84c 2100 	strex	r1, r2, [ip]
 80052a2:	2900      	cmp	r1, #0
 80052a4:	d1f3      	bne.n	800528e <UART_DMAReceiveCplt+0x72>
 80052a6:	e7ec      	b.n	8005282 <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80052aa:	f7ff fde1 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
}
 80052ae:	bd08      	pop	{r3, pc}

080052b0 <HAL_UART_GetState>:
  temp1 = huart->gState;
 80052b0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  temp2 = huart->RxState;
 80052b4:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 80052b8:	4310      	orrs	r0, r2
 80052ba:	4770      	bx	lr

080052bc <UART_Start_Receive_DMA>:
{
 80052bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052be:	4604      	mov	r4, r0
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052c2:	6826      	ldr	r6, [r4, #0]
  huart->pRxBuffPtr = pData;
 80052c4:	62a1      	str	r1, [r4, #40]	; 0x28
  huart->RxXferSize = Size;
 80052c6:	85a2      	strh	r2, [r4, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	2500      	movs	r5, #0
{
 80052ca:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052cc:	f04f 0c22 	mov.w	ip, #34	; 0x22
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052d0:	460a      	mov	r2, r1
 80052d2:	1d31      	adds	r1, r6, #4
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052d4:	4e1d      	ldr	r6, [pc, #116]	; (800534c <UART_Start_Receive_DMA+0x90>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	6425      	str	r5, [r4, #64]	; 0x40
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052d8:	4f1d      	ldr	r7, [pc, #116]	; (8005350 <UART_Start_Receive_DMA+0x94>)
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052da:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052de:	6406      	str	r6, [r0, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052e0:	4e1c      	ldr	r6, [pc, #112]	; (8005354 <UART_Start_Receive_DMA+0x98>)
  huart->hdmarx->XferAbortCallback = NULL;
 80052e2:	6505      	str	r5, [r0, #80]	; 0x50
{
 80052e4:	b083      	sub	sp, #12
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052e6:	63c7      	str	r7, [r0, #60]	; 0x3c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052e8:	64c6      	str	r6, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052ea:	f7fd f9c5 	bl	8002678 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	9501      	str	r5, [sp, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	9201      	str	r2, [sp, #4]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	9201      	str	r2, [sp, #4]
 80052fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 80052fc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	f103 020c 	add.w	r2, r3, #12
 8005304:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	f103 000c 	add.w	r0, r3, #12
 8005310:	e840 2100 	strex	r1, r2, [r0]
 8005314:	2900      	cmp	r1, #0
 8005316:	d1f3      	bne.n	8005300 <UART_Start_Receive_DMA+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	f103 0214 	add.w	r2, r3, #20
 800531c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005320:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	f103 0014 	add.w	r0, r3, #20
 8005328:	e840 2100 	strex	r1, r2, [r0]
 800532c:	2900      	cmp	r1, #0
 800532e:	d1f3      	bne.n	8005318 <UART_Start_Receive_DMA+0x5c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	f103 0214 	add.w	r2, r3, #20
 8005334:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	f103 0114 	add.w	r1, r3, #20
 8005340:	e841 2000 	strex	r0, r2, [r1]
 8005344:	2800      	cmp	r0, #0
 8005346:	d1f3      	bne.n	8005330 <UART_Start_Receive_DMA+0x74>
}
 8005348:	b003      	add	sp, #12
 800534a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800534c:	08005201 	.word	0x08005201
 8005350:	0800521d 	.word	0x0800521d
 8005354:	08004df9 	.word	0x08004df9

08005358 <HAL_UART_Receive_DMA>:
{
 8005358:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800535a:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 800535e:	2e20      	cmp	r6, #32
 8005360:	d110      	bne.n	8005384 <HAL_UART_Receive_DMA+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8005362:	b161      	cbz	r1, 800537e <HAL_UART_Receive_DMA+0x26>
 8005364:	b15a      	cbz	r2, 800537e <HAL_UART_Receive_DMA+0x26>
    __HAL_LOCK(huart);
 8005366:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800536a:	2c01      	cmp	r4, #1
 800536c:	d00a      	beq.n	8005384 <HAL_UART_Receive_DMA+0x2c>
 800536e:	2501      	movs	r5, #1
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8005372:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	6304      	str	r4, [r0, #48]	; 0x30
}
 8005378:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800537a:	f7ff bf9f 	b.w	80052bc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 800537e:	2001      	movs	r0, #1
}
 8005380:	bc70      	pop	{r4, r5, r6}
 8005382:	4770      	bx	lr
    return HAL_BUSY;
 8005384:	2002      	movs	r0, #2
}
 8005386:	bc70      	pop	{r4, r5, r6}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop

0800538c <atoi>:
 800538c:	220a      	movs	r2, #10
 800538e:	2100      	movs	r1, #0
 8005390:	f000 b9e6 	b.w	8005760 <strtol>

08005394 <atol>:
 8005394:	220a      	movs	r2, #10
 8005396:	2100      	movs	r1, #0
 8005398:	f000 b9e2 	b.w	8005760 <strtol>

0800539c <calloc>:
 800539c:	4b02      	ldr	r3, [pc, #8]	; (80053a8 <calloc+0xc>)
 800539e:	460a      	mov	r2, r1
 80053a0:	4601      	mov	r1, r0
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	f000 b84a 	b.w	800543c <_calloc_r>
 80053a8:	2000005c 	.word	0x2000005c

080053ac <__errno>:
 80053ac:	4b01      	ldr	r3, [pc, #4]	; (80053b4 <__errno+0x8>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	2000005c 	.word	0x2000005c

080053b8 <__libc_init_array>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	4d0d      	ldr	r5, [pc, #52]	; (80053f0 <__libc_init_array+0x38>)
 80053bc:	4c0d      	ldr	r4, [pc, #52]	; (80053f4 <__libc_init_array+0x3c>)
 80053be:	1b64      	subs	r4, r4, r5
 80053c0:	10a4      	asrs	r4, r4, #2
 80053c2:	2600      	movs	r6, #0
 80053c4:	42a6      	cmp	r6, r4
 80053c6:	d109      	bne.n	80053dc <__libc_init_array+0x24>
 80053c8:	4d0b      	ldr	r5, [pc, #44]	; (80053f8 <__libc_init_array+0x40>)
 80053ca:	4c0c      	ldr	r4, [pc, #48]	; (80053fc <__libc_init_array+0x44>)
 80053cc:	f000 fd52 	bl	8005e74 <_init>
 80053d0:	1b64      	subs	r4, r4, r5
 80053d2:	10a4      	asrs	r4, r4, #2
 80053d4:	2600      	movs	r6, #0
 80053d6:	42a6      	cmp	r6, r4
 80053d8:	d105      	bne.n	80053e6 <__libc_init_array+0x2e>
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e0:	4798      	blx	r3
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7ee      	b.n	80053c4 <__libc_init_array+0xc>
 80053e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ea:	4798      	blx	r3
 80053ec:	3601      	adds	r6, #1
 80053ee:	e7f2      	b.n	80053d6 <__libc_init_array+0x1e>
 80053f0:	0800682c 	.word	0x0800682c
 80053f4:	0800682c 	.word	0x0800682c
 80053f8:	0800682c 	.word	0x0800682c
 80053fc:	08006830 	.word	0x08006830

08005400 <free>:
 8005400:	4b02      	ldr	r3, [pc, #8]	; (800540c <free+0xc>)
 8005402:	4601      	mov	r1, r0
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	f000 b829 	b.w	800545c <_free_r>
 800540a:	bf00      	nop
 800540c:	2000005c 	.word	0x2000005c

08005410 <memcpy>:
 8005410:	440a      	add	r2, r1
 8005412:	4291      	cmp	r1, r2
 8005414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005418:	d100      	bne.n	800541c <memcpy+0xc>
 800541a:	4770      	bx	lr
 800541c:	b510      	push	{r4, lr}
 800541e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005426:	4291      	cmp	r1, r2
 8005428:	d1f9      	bne.n	800541e <memcpy+0xe>
 800542a:	bd10      	pop	{r4, pc}

0800542c <memset>:
 800542c:	4402      	add	r2, r0
 800542e:	4603      	mov	r3, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	f803 1b01 	strb.w	r1, [r3], #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <_calloc_r>:
 800543c:	b513      	push	{r0, r1, r4, lr}
 800543e:	434a      	muls	r2, r1
 8005440:	4611      	mov	r1, r2
 8005442:	9201      	str	r2, [sp, #4]
 8005444:	f000 f85a 	bl	80054fc <_malloc_r>
 8005448:	4604      	mov	r4, r0
 800544a:	b118      	cbz	r0, 8005454 <_calloc_r+0x18>
 800544c:	9a01      	ldr	r2, [sp, #4]
 800544e:	2100      	movs	r1, #0
 8005450:	f7ff ffec 	bl	800542c <memset>
 8005454:	4620      	mov	r0, r4
 8005456:	b002      	add	sp, #8
 8005458:	bd10      	pop	{r4, pc}
	...

0800545c <_free_r>:
 800545c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800545e:	2900      	cmp	r1, #0
 8005460:	d048      	beq.n	80054f4 <_free_r+0x98>
 8005462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005466:	9001      	str	r0, [sp, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f1a1 0404 	sub.w	r4, r1, #4
 800546e:	bfb8      	it	lt
 8005470:	18e4      	addlt	r4, r4, r3
 8005472:	f000 f9b9 	bl	80057e8 <__malloc_lock>
 8005476:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <_free_r+0x9c>)
 8005478:	9801      	ldr	r0, [sp, #4]
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	4615      	mov	r5, r2
 800547e:	b933      	cbnz	r3, 800548e <_free_r+0x32>
 8005480:	6063      	str	r3, [r4, #4]
 8005482:	6014      	str	r4, [r2, #0]
 8005484:	b003      	add	sp, #12
 8005486:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800548a:	f000 b9b3 	b.w	80057f4 <__malloc_unlock>
 800548e:	42a3      	cmp	r3, r4
 8005490:	d90b      	bls.n	80054aa <_free_r+0x4e>
 8005492:	6821      	ldr	r1, [r4, #0]
 8005494:	1862      	adds	r2, r4, r1
 8005496:	4293      	cmp	r3, r2
 8005498:	bf04      	itt	eq
 800549a:	681a      	ldreq	r2, [r3, #0]
 800549c:	685b      	ldreq	r3, [r3, #4]
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	bf04      	itt	eq
 80054a2:	1852      	addeq	r2, r2, r1
 80054a4:	6022      	streq	r2, [r4, #0]
 80054a6:	602c      	str	r4, [r5, #0]
 80054a8:	e7ec      	b.n	8005484 <_free_r+0x28>
 80054aa:	461a      	mov	r2, r3
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b10b      	cbz	r3, 80054b4 <_free_r+0x58>
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d9fa      	bls.n	80054aa <_free_r+0x4e>
 80054b4:	6811      	ldr	r1, [r2, #0]
 80054b6:	1855      	adds	r5, r2, r1
 80054b8:	42a5      	cmp	r5, r4
 80054ba:	d10b      	bne.n	80054d4 <_free_r+0x78>
 80054bc:	6824      	ldr	r4, [r4, #0]
 80054be:	4421      	add	r1, r4
 80054c0:	1854      	adds	r4, r2, r1
 80054c2:	42a3      	cmp	r3, r4
 80054c4:	6011      	str	r1, [r2, #0]
 80054c6:	d1dd      	bne.n	8005484 <_free_r+0x28>
 80054c8:	681c      	ldr	r4, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	6053      	str	r3, [r2, #4]
 80054ce:	4421      	add	r1, r4
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	e7d7      	b.n	8005484 <_free_r+0x28>
 80054d4:	d902      	bls.n	80054dc <_free_r+0x80>
 80054d6:	230c      	movs	r3, #12
 80054d8:	6003      	str	r3, [r0, #0]
 80054da:	e7d3      	b.n	8005484 <_free_r+0x28>
 80054dc:	6825      	ldr	r5, [r4, #0]
 80054de:	1961      	adds	r1, r4, r5
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf04      	itt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	6063      	str	r3, [r4, #4]
 80054ea:	bf04      	itt	eq
 80054ec:	1949      	addeq	r1, r1, r5
 80054ee:	6021      	streq	r1, [r4, #0]
 80054f0:	6054      	str	r4, [r2, #4]
 80054f2:	e7c7      	b.n	8005484 <_free_r+0x28>
 80054f4:	b003      	add	sp, #12
 80054f6:	bd30      	pop	{r4, r5, pc}
 80054f8:	20000974 	.word	0x20000974

080054fc <_malloc_r>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	1ccd      	adds	r5, r1, #3
 8005500:	f025 0503 	bic.w	r5, r5, #3
 8005504:	3508      	adds	r5, #8
 8005506:	2d0c      	cmp	r5, #12
 8005508:	bf38      	it	cc
 800550a:	250c      	movcc	r5, #12
 800550c:	2d00      	cmp	r5, #0
 800550e:	4606      	mov	r6, r0
 8005510:	db01      	blt.n	8005516 <_malloc_r+0x1a>
 8005512:	42a9      	cmp	r1, r5
 8005514:	d903      	bls.n	800551e <_malloc_r+0x22>
 8005516:	230c      	movs	r3, #12
 8005518:	6033      	str	r3, [r6, #0]
 800551a:	2000      	movs	r0, #0
 800551c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800551e:	f000 f963 	bl	80057e8 <__malloc_lock>
 8005522:	4921      	ldr	r1, [pc, #132]	; (80055a8 <_malloc_r+0xac>)
 8005524:	680a      	ldr	r2, [r1, #0]
 8005526:	4614      	mov	r4, r2
 8005528:	b99c      	cbnz	r4, 8005552 <_malloc_r+0x56>
 800552a:	4f20      	ldr	r7, [pc, #128]	; (80055ac <_malloc_r+0xb0>)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	b923      	cbnz	r3, 800553a <_malloc_r+0x3e>
 8005530:	4621      	mov	r1, r4
 8005532:	4630      	mov	r0, r6
 8005534:	f000 f83c 	bl	80055b0 <_sbrk_r>
 8005538:	6038      	str	r0, [r7, #0]
 800553a:	4629      	mov	r1, r5
 800553c:	4630      	mov	r0, r6
 800553e:	f000 f837 	bl	80055b0 <_sbrk_r>
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	d123      	bne.n	800558e <_malloc_r+0x92>
 8005546:	230c      	movs	r3, #12
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	4630      	mov	r0, r6
 800554c:	f000 f952 	bl	80057f4 <__malloc_unlock>
 8005550:	e7e3      	b.n	800551a <_malloc_r+0x1e>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	1b5b      	subs	r3, r3, r5
 8005556:	d417      	bmi.n	8005588 <_malloc_r+0x8c>
 8005558:	2b0b      	cmp	r3, #11
 800555a:	d903      	bls.n	8005564 <_malloc_r+0x68>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	441c      	add	r4, r3
 8005560:	6025      	str	r5, [r4, #0]
 8005562:	e004      	b.n	800556e <_malloc_r+0x72>
 8005564:	6863      	ldr	r3, [r4, #4]
 8005566:	42a2      	cmp	r2, r4
 8005568:	bf0c      	ite	eq
 800556a:	600b      	streq	r3, [r1, #0]
 800556c:	6053      	strne	r3, [r2, #4]
 800556e:	4630      	mov	r0, r6
 8005570:	f000 f940 	bl	80057f4 <__malloc_unlock>
 8005574:	f104 000b 	add.w	r0, r4, #11
 8005578:	1d23      	adds	r3, r4, #4
 800557a:	f020 0007 	bic.w	r0, r0, #7
 800557e:	1ac2      	subs	r2, r0, r3
 8005580:	d0cc      	beq.n	800551c <_malloc_r+0x20>
 8005582:	1a1b      	subs	r3, r3, r0
 8005584:	50a3      	str	r3, [r4, r2]
 8005586:	e7c9      	b.n	800551c <_malloc_r+0x20>
 8005588:	4622      	mov	r2, r4
 800558a:	6864      	ldr	r4, [r4, #4]
 800558c:	e7cc      	b.n	8005528 <_malloc_r+0x2c>
 800558e:	1cc4      	adds	r4, r0, #3
 8005590:	f024 0403 	bic.w	r4, r4, #3
 8005594:	42a0      	cmp	r0, r4
 8005596:	d0e3      	beq.n	8005560 <_malloc_r+0x64>
 8005598:	1a21      	subs	r1, r4, r0
 800559a:	4630      	mov	r0, r6
 800559c:	f000 f808 	bl	80055b0 <_sbrk_r>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d1dd      	bne.n	8005560 <_malloc_r+0x64>
 80055a4:	e7cf      	b.n	8005546 <_malloc_r+0x4a>
 80055a6:	bf00      	nop
 80055a8:	20000974 	.word	0x20000974
 80055ac:	20000978 	.word	0x20000978

080055b0 <_sbrk_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d06      	ldr	r5, [pc, #24]	; (80055cc <_sbrk_r+0x1c>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4604      	mov	r4, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	f7fc fdf8 	bl	80021b0 <_sbrk>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_sbrk_r+0x1a>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_sbrk_r+0x1a>
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	20001334 	.word	0x20001334

080055d0 <siprintf>:
 80055d0:	b40e      	push	{r1, r2, r3}
 80055d2:	b500      	push	{lr}
 80055d4:	b09c      	sub	sp, #112	; 0x70
 80055d6:	ab1d      	add	r3, sp, #116	; 0x74
 80055d8:	9002      	str	r0, [sp, #8]
 80055da:	9006      	str	r0, [sp, #24]
 80055dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055e0:	4809      	ldr	r0, [pc, #36]	; (8005608 <siprintf+0x38>)
 80055e2:	9107      	str	r1, [sp, #28]
 80055e4:	9104      	str	r1, [sp, #16]
 80055e6:	4909      	ldr	r1, [pc, #36]	; (800560c <siprintf+0x3c>)
 80055e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ec:	9105      	str	r1, [sp, #20]
 80055ee:	6800      	ldr	r0, [r0, #0]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	a902      	add	r1, sp, #8
 80055f4:	f000 f960 	bl	80058b8 <_svfiprintf_r>
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	b01c      	add	sp, #112	; 0x70
 8005600:	f85d eb04 	ldr.w	lr, [sp], #4
 8005604:	b003      	add	sp, #12
 8005606:	4770      	bx	lr
 8005608:	2000005c 	.word	0x2000005c
 800560c:	ffff0208 	.word	0xffff0208

08005610 <strchr>:
 8005610:	b2c9      	uxtb	r1, r1
 8005612:	4603      	mov	r3, r0
 8005614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005618:	b11a      	cbz	r2, 8005622 <strchr+0x12>
 800561a:	428a      	cmp	r2, r1
 800561c:	d1f9      	bne.n	8005612 <strchr+0x2>
 800561e:	4618      	mov	r0, r3
 8005620:	4770      	bx	lr
 8005622:	2900      	cmp	r1, #0
 8005624:	bf18      	it	ne
 8005626:	2300      	movne	r3, #0
 8005628:	e7f9      	b.n	800561e <strchr+0xe>

0800562a <strstr>:
 800562a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800562c:	780c      	ldrb	r4, [r1, #0]
 800562e:	b164      	cbz	r4, 800564a <strstr+0x20>
 8005630:	4603      	mov	r3, r0
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	1c5e      	adds	r6, r3, #1
 8005638:	b90a      	cbnz	r2, 800563e <strstr+0x14>
 800563a:	4610      	mov	r0, r2
 800563c:	e005      	b.n	800564a <strstr+0x20>
 800563e:	4294      	cmp	r4, r2
 8005640:	d108      	bne.n	8005654 <strstr+0x2a>
 8005642:	460d      	mov	r5, r1
 8005644:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005648:	b902      	cbnz	r2, 800564c <strstr+0x22>
 800564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005650:	4297      	cmp	r7, r2
 8005652:	d0f7      	beq.n	8005644 <strstr+0x1a>
 8005654:	4633      	mov	r3, r6
 8005656:	e7ec      	b.n	8005632 <strstr+0x8>

08005658 <_strtol_l.isra.0>:
 8005658:	2b01      	cmp	r3, #1
 800565a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800565e:	d001      	beq.n	8005664 <_strtol_l.isra.0+0xc>
 8005660:	2b24      	cmp	r3, #36	; 0x24
 8005662:	d906      	bls.n	8005672 <_strtol_l.isra.0+0x1a>
 8005664:	f7ff fea2 	bl	80053ac <__errno>
 8005668:	2316      	movs	r3, #22
 800566a:	6003      	str	r3, [r0, #0]
 800566c:	2000      	movs	r0, #0
 800566e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005672:	4f3a      	ldr	r7, [pc, #232]	; (800575c <_strtol_l.isra.0+0x104>)
 8005674:	468e      	mov	lr, r1
 8005676:	4676      	mov	r6, lr
 8005678:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800567c:	5de5      	ldrb	r5, [r4, r7]
 800567e:	f015 0508 	ands.w	r5, r5, #8
 8005682:	d1f8      	bne.n	8005676 <_strtol_l.isra.0+0x1e>
 8005684:	2c2d      	cmp	r4, #45	; 0x2d
 8005686:	d134      	bne.n	80056f2 <_strtol_l.isra.0+0x9a>
 8005688:	f89e 4000 	ldrb.w	r4, [lr]
 800568c:	f04f 0801 	mov.w	r8, #1
 8005690:	f106 0e02 	add.w	lr, r6, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d05c      	beq.n	8005752 <_strtol_l.isra.0+0xfa>
 8005698:	2b10      	cmp	r3, #16
 800569a:	d10c      	bne.n	80056b6 <_strtol_l.isra.0+0x5e>
 800569c:	2c30      	cmp	r4, #48	; 0x30
 800569e:	d10a      	bne.n	80056b6 <_strtol_l.isra.0+0x5e>
 80056a0:	f89e 4000 	ldrb.w	r4, [lr]
 80056a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80056a8:	2c58      	cmp	r4, #88	; 0x58
 80056aa:	d14d      	bne.n	8005748 <_strtol_l.isra.0+0xf0>
 80056ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80056b0:	2310      	movs	r3, #16
 80056b2:	f10e 0e02 	add.w	lr, lr, #2
 80056b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80056ba:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80056be:	2600      	movs	r6, #0
 80056c0:	fbbc f9f3 	udiv	r9, ip, r3
 80056c4:	4635      	mov	r5, r6
 80056c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80056ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80056ce:	2f09      	cmp	r7, #9
 80056d0:	d818      	bhi.n	8005704 <_strtol_l.isra.0+0xac>
 80056d2:	463c      	mov	r4, r7
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	dd24      	ble.n	8005722 <_strtol_l.isra.0+0xca>
 80056d8:	2e00      	cmp	r6, #0
 80056da:	db1f      	blt.n	800571c <_strtol_l.isra.0+0xc4>
 80056dc:	45a9      	cmp	r9, r5
 80056de:	d31d      	bcc.n	800571c <_strtol_l.isra.0+0xc4>
 80056e0:	d101      	bne.n	80056e6 <_strtol_l.isra.0+0x8e>
 80056e2:	45a2      	cmp	sl, r4
 80056e4:	db1a      	blt.n	800571c <_strtol_l.isra.0+0xc4>
 80056e6:	fb05 4503 	mla	r5, r5, r3, r4
 80056ea:	2601      	movs	r6, #1
 80056ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80056f0:	e7eb      	b.n	80056ca <_strtol_l.isra.0+0x72>
 80056f2:	2c2b      	cmp	r4, #43	; 0x2b
 80056f4:	bf08      	it	eq
 80056f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80056fa:	46a8      	mov	r8, r5
 80056fc:	bf08      	it	eq
 80056fe:	f106 0e02 	addeq.w	lr, r6, #2
 8005702:	e7c7      	b.n	8005694 <_strtol_l.isra.0+0x3c>
 8005704:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005708:	2f19      	cmp	r7, #25
 800570a:	d801      	bhi.n	8005710 <_strtol_l.isra.0+0xb8>
 800570c:	3c37      	subs	r4, #55	; 0x37
 800570e:	e7e1      	b.n	80056d4 <_strtol_l.isra.0+0x7c>
 8005710:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005714:	2f19      	cmp	r7, #25
 8005716:	d804      	bhi.n	8005722 <_strtol_l.isra.0+0xca>
 8005718:	3c57      	subs	r4, #87	; 0x57
 800571a:	e7db      	b.n	80056d4 <_strtol_l.isra.0+0x7c>
 800571c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005720:	e7e4      	b.n	80056ec <_strtol_l.isra.0+0x94>
 8005722:	2e00      	cmp	r6, #0
 8005724:	da05      	bge.n	8005732 <_strtol_l.isra.0+0xda>
 8005726:	2322      	movs	r3, #34	; 0x22
 8005728:	6003      	str	r3, [r0, #0]
 800572a:	4665      	mov	r5, ip
 800572c:	b942      	cbnz	r2, 8005740 <_strtol_l.isra.0+0xe8>
 800572e:	4628      	mov	r0, r5
 8005730:	e79d      	b.n	800566e <_strtol_l.isra.0+0x16>
 8005732:	f1b8 0f00 	cmp.w	r8, #0
 8005736:	d000      	beq.n	800573a <_strtol_l.isra.0+0xe2>
 8005738:	426d      	negs	r5, r5
 800573a:	2a00      	cmp	r2, #0
 800573c:	d0f7      	beq.n	800572e <_strtol_l.isra.0+0xd6>
 800573e:	b10e      	cbz	r6, 8005744 <_strtol_l.isra.0+0xec>
 8005740:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8005744:	6011      	str	r1, [r2, #0]
 8005746:	e7f2      	b.n	800572e <_strtol_l.isra.0+0xd6>
 8005748:	2430      	movs	r4, #48	; 0x30
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1b3      	bne.n	80056b6 <_strtol_l.isra.0+0x5e>
 800574e:	2308      	movs	r3, #8
 8005750:	e7b1      	b.n	80056b6 <_strtol_l.isra.0+0x5e>
 8005752:	2c30      	cmp	r4, #48	; 0x30
 8005754:	d0a4      	beq.n	80056a0 <_strtol_l.isra.0+0x48>
 8005756:	230a      	movs	r3, #10
 8005758:	e7ad      	b.n	80056b6 <_strtol_l.isra.0+0x5e>
 800575a:	bf00      	nop
 800575c:	080066f1 	.word	0x080066f1

08005760 <strtol>:
 8005760:	4613      	mov	r3, r2
 8005762:	460a      	mov	r2, r1
 8005764:	4601      	mov	r1, r0
 8005766:	4802      	ldr	r0, [pc, #8]	; (8005770 <strtol+0x10>)
 8005768:	6800      	ldr	r0, [r0, #0]
 800576a:	f7ff bf75 	b.w	8005658 <_strtol_l.isra.0>
 800576e:	bf00      	nop
 8005770:	2000005c 	.word	0x2000005c

08005774 <_vsniprintf_r>:
 8005774:	b530      	push	{r4, r5, lr}
 8005776:	1e14      	subs	r4, r2, #0
 8005778:	4605      	mov	r5, r0
 800577a:	b09b      	sub	sp, #108	; 0x6c
 800577c:	4618      	mov	r0, r3
 800577e:	da05      	bge.n	800578c <_vsniprintf_r+0x18>
 8005780:	238b      	movs	r3, #139	; 0x8b
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005788:	b01b      	add	sp, #108	; 0x6c
 800578a:	bd30      	pop	{r4, r5, pc}
 800578c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005790:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005794:	bf14      	ite	ne
 8005796:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800579a:	4623      	moveq	r3, r4
 800579c:	9302      	str	r3, [sp, #8]
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057a4:	9100      	str	r1, [sp, #0]
 80057a6:	9104      	str	r1, [sp, #16]
 80057a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80057ac:	4602      	mov	r2, r0
 80057ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057b0:	4669      	mov	r1, sp
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 f880 	bl	80058b8 <_svfiprintf_r>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	bfbc      	itt	lt
 80057bc:	238b      	movlt	r3, #139	; 0x8b
 80057be:	602b      	strlt	r3, [r5, #0]
 80057c0:	2c00      	cmp	r4, #0
 80057c2:	d0e1      	beq.n	8005788 <_vsniprintf_r+0x14>
 80057c4:	9b00      	ldr	r3, [sp, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e7dd      	b.n	8005788 <_vsniprintf_r+0x14>

080057cc <vsniprintf>:
 80057cc:	b507      	push	{r0, r1, r2, lr}
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	460a      	mov	r2, r1
 80057d4:	4601      	mov	r1, r0
 80057d6:	4803      	ldr	r0, [pc, #12]	; (80057e4 <vsniprintf+0x18>)
 80057d8:	6800      	ldr	r0, [r0, #0]
 80057da:	f7ff ffcb 	bl	8005774 <_vsniprintf_r>
 80057de:	b003      	add	sp, #12
 80057e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80057e4:	2000005c 	.word	0x2000005c

080057e8 <__malloc_lock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <__malloc_lock+0x8>)
 80057ea:	f000 baf9 	b.w	8005de0 <__retarget_lock_acquire_recursive>
 80057ee:	bf00      	nop
 80057f0:	2000133c 	.word	0x2000133c

080057f4 <__malloc_unlock>:
 80057f4:	4801      	ldr	r0, [pc, #4]	; (80057fc <__malloc_unlock+0x8>)
 80057f6:	f000 baf4 	b.w	8005de2 <__retarget_lock_release_recursive>
 80057fa:	bf00      	nop
 80057fc:	2000133c 	.word	0x2000133c

08005800 <__ssputs_r>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	688e      	ldr	r6, [r1, #8]
 8005806:	429e      	cmp	r6, r3
 8005808:	4682      	mov	sl, r0
 800580a:	460c      	mov	r4, r1
 800580c:	4690      	mov	r8, r2
 800580e:	461f      	mov	r7, r3
 8005810:	d838      	bhi.n	8005884 <__ssputs_r+0x84>
 8005812:	898a      	ldrh	r2, [r1, #12]
 8005814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005818:	d032      	beq.n	8005880 <__ssputs_r+0x80>
 800581a:	6825      	ldr	r5, [r4, #0]
 800581c:	6909      	ldr	r1, [r1, #16]
 800581e:	eba5 0901 	sub.w	r9, r5, r1
 8005822:	6965      	ldr	r5, [r4, #20]
 8005824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800582c:	3301      	adds	r3, #1
 800582e:	444b      	add	r3, r9
 8005830:	106d      	asrs	r5, r5, #1
 8005832:	429d      	cmp	r5, r3
 8005834:	bf38      	it	cc
 8005836:	461d      	movcc	r5, r3
 8005838:	0553      	lsls	r3, r2, #21
 800583a:	d531      	bpl.n	80058a0 <__ssputs_r+0xa0>
 800583c:	4629      	mov	r1, r5
 800583e:	f7ff fe5d 	bl	80054fc <_malloc_r>
 8005842:	4606      	mov	r6, r0
 8005844:	b950      	cbnz	r0, 800585c <__ssputs_r+0x5c>
 8005846:	230c      	movs	r3, #12
 8005848:	f8ca 3000 	str.w	r3, [sl]
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585c:	6921      	ldr	r1, [r4, #16]
 800585e:	464a      	mov	r2, r9
 8005860:	f7ff fdd6 	bl	8005410 <memcpy>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800586a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	6126      	str	r6, [r4, #16]
 8005872:	6165      	str	r5, [r4, #20]
 8005874:	444e      	add	r6, r9
 8005876:	eba5 0509 	sub.w	r5, r5, r9
 800587a:	6026      	str	r6, [r4, #0]
 800587c:	60a5      	str	r5, [r4, #8]
 800587e:	463e      	mov	r6, r7
 8005880:	42be      	cmp	r6, r7
 8005882:	d900      	bls.n	8005886 <__ssputs_r+0x86>
 8005884:	463e      	mov	r6, r7
 8005886:	4632      	mov	r2, r6
 8005888:	6820      	ldr	r0, [r4, #0]
 800588a:	4641      	mov	r1, r8
 800588c:	f000 faaa 	bl	8005de4 <memmove>
 8005890:	68a3      	ldr	r3, [r4, #8]
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	1b9b      	subs	r3, r3, r6
 8005896:	4432      	add	r2, r6
 8005898:	60a3      	str	r3, [r4, #8]
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	2000      	movs	r0, #0
 800589e:	e7db      	b.n	8005858 <__ssputs_r+0x58>
 80058a0:	462a      	mov	r2, r5
 80058a2:	f000 fab9 	bl	8005e18 <_realloc_r>
 80058a6:	4606      	mov	r6, r0
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d1e1      	bne.n	8005870 <__ssputs_r+0x70>
 80058ac:	6921      	ldr	r1, [r4, #16]
 80058ae:	4650      	mov	r0, sl
 80058b0:	f7ff fdd4 	bl	800545c <_free_r>
 80058b4:	e7c7      	b.n	8005846 <__ssputs_r+0x46>
	...

080058b8 <_svfiprintf_r>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	4698      	mov	r8, r3
 80058be:	898b      	ldrh	r3, [r1, #12]
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	b09d      	sub	sp, #116	; 0x74
 80058c4:	4607      	mov	r7, r0
 80058c6:	460d      	mov	r5, r1
 80058c8:	4614      	mov	r4, r2
 80058ca:	d50e      	bpl.n	80058ea <_svfiprintf_r+0x32>
 80058cc:	690b      	ldr	r3, [r1, #16]
 80058ce:	b963      	cbnz	r3, 80058ea <_svfiprintf_r+0x32>
 80058d0:	2140      	movs	r1, #64	; 0x40
 80058d2:	f7ff fe13 	bl	80054fc <_malloc_r>
 80058d6:	6028      	str	r0, [r5, #0]
 80058d8:	6128      	str	r0, [r5, #16]
 80058da:	b920      	cbnz	r0, 80058e6 <_svfiprintf_r+0x2e>
 80058dc:	230c      	movs	r3, #12
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058e4:	e0d1      	b.n	8005a8a <_svfiprintf_r+0x1d2>
 80058e6:	2340      	movs	r3, #64	; 0x40
 80058e8:	616b      	str	r3, [r5, #20]
 80058ea:	2300      	movs	r3, #0
 80058ec:	9309      	str	r3, [sp, #36]	; 0x24
 80058ee:	2320      	movs	r3, #32
 80058f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f8:	2330      	movs	r3, #48	; 0x30
 80058fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005aa4 <_svfiprintf_r+0x1ec>
 80058fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005902:	f04f 0901 	mov.w	r9, #1
 8005906:	4623      	mov	r3, r4
 8005908:	469a      	mov	sl, r3
 800590a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800590e:	b10a      	cbz	r2, 8005914 <_svfiprintf_r+0x5c>
 8005910:	2a25      	cmp	r2, #37	; 0x25
 8005912:	d1f9      	bne.n	8005908 <_svfiprintf_r+0x50>
 8005914:	ebba 0b04 	subs.w	fp, sl, r4
 8005918:	d00b      	beq.n	8005932 <_svfiprintf_r+0x7a>
 800591a:	465b      	mov	r3, fp
 800591c:	4622      	mov	r2, r4
 800591e:	4629      	mov	r1, r5
 8005920:	4638      	mov	r0, r7
 8005922:	f7ff ff6d 	bl	8005800 <__ssputs_r>
 8005926:	3001      	adds	r0, #1
 8005928:	f000 80aa 	beq.w	8005a80 <_svfiprintf_r+0x1c8>
 800592c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592e:	445a      	add	r2, fp
 8005930:	9209      	str	r2, [sp, #36]	; 0x24
 8005932:	f89a 3000 	ldrb.w	r3, [sl]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 80a2 	beq.w	8005a80 <_svfiprintf_r+0x1c8>
 800593c:	2300      	movs	r3, #0
 800593e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005946:	f10a 0a01 	add.w	sl, sl, #1
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	9307      	str	r3, [sp, #28]
 800594e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005952:	931a      	str	r3, [sp, #104]	; 0x68
 8005954:	4654      	mov	r4, sl
 8005956:	2205      	movs	r2, #5
 8005958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800595c:	4851      	ldr	r0, [pc, #324]	; (8005aa4 <_svfiprintf_r+0x1ec>)
 800595e:	f7fa fc47 	bl	80001f0 <memchr>
 8005962:	9a04      	ldr	r2, [sp, #16]
 8005964:	b9d8      	cbnz	r0, 800599e <_svfiprintf_r+0xe6>
 8005966:	06d0      	lsls	r0, r2, #27
 8005968:	bf44      	itt	mi
 800596a:	2320      	movmi	r3, #32
 800596c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005970:	0711      	lsls	r1, r2, #28
 8005972:	bf44      	itt	mi
 8005974:	232b      	movmi	r3, #43	; 0x2b
 8005976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800597a:	f89a 3000 	ldrb.w	r3, [sl]
 800597e:	2b2a      	cmp	r3, #42	; 0x2a
 8005980:	d015      	beq.n	80059ae <_svfiprintf_r+0xf6>
 8005982:	9a07      	ldr	r2, [sp, #28]
 8005984:	4654      	mov	r4, sl
 8005986:	2000      	movs	r0, #0
 8005988:	f04f 0c0a 	mov.w	ip, #10
 800598c:	4621      	mov	r1, r4
 800598e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005992:	3b30      	subs	r3, #48	; 0x30
 8005994:	2b09      	cmp	r3, #9
 8005996:	d94e      	bls.n	8005a36 <_svfiprintf_r+0x17e>
 8005998:	b1b0      	cbz	r0, 80059c8 <_svfiprintf_r+0x110>
 800599a:	9207      	str	r2, [sp, #28]
 800599c:	e014      	b.n	80059c8 <_svfiprintf_r+0x110>
 800599e:	eba0 0308 	sub.w	r3, r0, r8
 80059a2:	fa09 f303 	lsl.w	r3, r9, r3
 80059a6:	4313      	orrs	r3, r2
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	46a2      	mov	sl, r4
 80059ac:	e7d2      	b.n	8005954 <_svfiprintf_r+0x9c>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	9103      	str	r1, [sp, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bfbb      	ittet	lt
 80059ba:	425b      	neglt	r3, r3
 80059bc:	f042 0202 	orrlt.w	r2, r2, #2
 80059c0:	9307      	strge	r3, [sp, #28]
 80059c2:	9307      	strlt	r3, [sp, #28]
 80059c4:	bfb8      	it	lt
 80059c6:	9204      	strlt	r2, [sp, #16]
 80059c8:	7823      	ldrb	r3, [r4, #0]
 80059ca:	2b2e      	cmp	r3, #46	; 0x2e
 80059cc:	d10c      	bne.n	80059e8 <_svfiprintf_r+0x130>
 80059ce:	7863      	ldrb	r3, [r4, #1]
 80059d0:	2b2a      	cmp	r3, #42	; 0x2a
 80059d2:	d135      	bne.n	8005a40 <_svfiprintf_r+0x188>
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	9203      	str	r2, [sp, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bfb8      	it	lt
 80059e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059e4:	3402      	adds	r4, #2
 80059e6:	9305      	str	r3, [sp, #20]
 80059e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ab4 <_svfiprintf_r+0x1fc>
 80059ec:	7821      	ldrb	r1, [r4, #0]
 80059ee:	2203      	movs	r2, #3
 80059f0:	4650      	mov	r0, sl
 80059f2:	f7fa fbfd 	bl	80001f0 <memchr>
 80059f6:	b140      	cbz	r0, 8005a0a <_svfiprintf_r+0x152>
 80059f8:	2340      	movs	r3, #64	; 0x40
 80059fa:	eba0 000a 	sub.w	r0, r0, sl
 80059fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005a02:	9b04      	ldr	r3, [sp, #16]
 8005a04:	4303      	orrs	r3, r0
 8005a06:	3401      	adds	r4, #1
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0e:	4826      	ldr	r0, [pc, #152]	; (8005aa8 <_svfiprintf_r+0x1f0>)
 8005a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a14:	2206      	movs	r2, #6
 8005a16:	f7fa fbeb 	bl	80001f0 <memchr>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d038      	beq.n	8005a90 <_svfiprintf_r+0x1d8>
 8005a1e:	4b23      	ldr	r3, [pc, #140]	; (8005aac <_svfiprintf_r+0x1f4>)
 8005a20:	bb1b      	cbnz	r3, 8005a6a <_svfiprintf_r+0x1b2>
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	3307      	adds	r3, #7
 8005a26:	f023 0307 	bic.w	r3, r3, #7
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	9303      	str	r3, [sp, #12]
 8005a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a30:	4433      	add	r3, r6
 8005a32:	9309      	str	r3, [sp, #36]	; 0x24
 8005a34:	e767      	b.n	8005906 <_svfiprintf_r+0x4e>
 8005a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	e7a5      	b.n	800598c <_svfiprintf_r+0xd4>
 8005a40:	2300      	movs	r3, #0
 8005a42:	3401      	adds	r4, #1
 8005a44:	9305      	str	r3, [sp, #20]
 8005a46:	4619      	mov	r1, r3
 8005a48:	f04f 0c0a 	mov.w	ip, #10
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a52:	3a30      	subs	r2, #48	; 0x30
 8005a54:	2a09      	cmp	r2, #9
 8005a56:	d903      	bls.n	8005a60 <_svfiprintf_r+0x1a8>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0c5      	beq.n	80059e8 <_svfiprintf_r+0x130>
 8005a5c:	9105      	str	r1, [sp, #20]
 8005a5e:	e7c3      	b.n	80059e8 <_svfiprintf_r+0x130>
 8005a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a64:	4604      	mov	r4, r0
 8005a66:	2301      	movs	r3, #1
 8005a68:	e7f0      	b.n	8005a4c <_svfiprintf_r+0x194>
 8005a6a:	ab03      	add	r3, sp, #12
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	462a      	mov	r2, r5
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <_svfiprintf_r+0x1f8>)
 8005a72:	a904      	add	r1, sp, #16
 8005a74:	4638      	mov	r0, r7
 8005a76:	f3af 8000 	nop.w
 8005a7a:	1c42      	adds	r2, r0, #1
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	d1d6      	bne.n	8005a2e <_svfiprintf_r+0x176>
 8005a80:	89ab      	ldrh	r3, [r5, #12]
 8005a82:	065b      	lsls	r3, r3, #25
 8005a84:	f53f af2c 	bmi.w	80058e0 <_svfiprintf_r+0x28>
 8005a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a8a:	b01d      	add	sp, #116	; 0x74
 8005a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a90:	ab03      	add	r3, sp, #12
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	462a      	mov	r2, r5
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <_svfiprintf_r+0x1f8>)
 8005a98:	a904      	add	r1, sp, #16
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f000 f87a 	bl	8005b94 <_printf_i>
 8005aa0:	e7eb      	b.n	8005a7a <_svfiprintf_r+0x1c2>
 8005aa2:	bf00      	nop
 8005aa4:	080067f1 	.word	0x080067f1
 8005aa8:	080067fb 	.word	0x080067fb
 8005aac:	00000000 	.word	0x00000000
 8005ab0:	08005801 	.word	0x08005801
 8005ab4:	080067f7 	.word	0x080067f7

08005ab8 <_printf_common>:
 8005ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005abc:	4616      	mov	r6, r2
 8005abe:	4699      	mov	r9, r3
 8005ac0:	688a      	ldr	r2, [r1, #8]
 8005ac2:	690b      	ldr	r3, [r1, #16]
 8005ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	bfb8      	it	lt
 8005acc:	4613      	movlt	r3, r2
 8005ace:	6033      	str	r3, [r6, #0]
 8005ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	b10a      	cbz	r2, 8005ade <_printf_common+0x26>
 8005ada:	3301      	adds	r3, #1
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	0699      	lsls	r1, r3, #26
 8005ae2:	bf42      	ittt	mi
 8005ae4:	6833      	ldrmi	r3, [r6, #0]
 8005ae6:	3302      	addmi	r3, #2
 8005ae8:	6033      	strmi	r3, [r6, #0]
 8005aea:	6825      	ldr	r5, [r4, #0]
 8005aec:	f015 0506 	ands.w	r5, r5, #6
 8005af0:	d106      	bne.n	8005b00 <_printf_common+0x48>
 8005af2:	f104 0a19 	add.w	sl, r4, #25
 8005af6:	68e3      	ldr	r3, [r4, #12]
 8005af8:	6832      	ldr	r2, [r6, #0]
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	42ab      	cmp	r3, r5
 8005afe:	dc26      	bgt.n	8005b4e <_printf_common+0x96>
 8005b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b04:	1e13      	subs	r3, r2, #0
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	bf18      	it	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	0692      	lsls	r2, r2, #26
 8005b0e:	d42b      	bmi.n	8005b68 <_printf_common+0xb0>
 8005b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b14:	4649      	mov	r1, r9
 8005b16:	4638      	mov	r0, r7
 8005b18:	47c0      	blx	r8
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d01e      	beq.n	8005b5c <_printf_common+0xa4>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	68e5      	ldr	r5, [r4, #12]
 8005b22:	6832      	ldr	r2, [r6, #0]
 8005b24:	f003 0306 	and.w	r3, r3, #6
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	bf08      	it	eq
 8005b2c:	1aad      	subeq	r5, r5, r2
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	6922      	ldr	r2, [r4, #16]
 8005b32:	bf0c      	ite	eq
 8005b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b38:	2500      	movne	r5, #0
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	bfc4      	itt	gt
 8005b3e:	1a9b      	subgt	r3, r3, r2
 8005b40:	18ed      	addgt	r5, r5, r3
 8005b42:	2600      	movs	r6, #0
 8005b44:	341a      	adds	r4, #26
 8005b46:	42b5      	cmp	r5, r6
 8005b48:	d11a      	bne.n	8005b80 <_printf_common+0xc8>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e008      	b.n	8005b60 <_printf_common+0xa8>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4652      	mov	r2, sl
 8005b52:	4649      	mov	r1, r9
 8005b54:	4638      	mov	r0, r7
 8005b56:	47c0      	blx	r8
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d103      	bne.n	8005b64 <_printf_common+0xac>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b64:	3501      	adds	r5, #1
 8005b66:	e7c6      	b.n	8005af6 <_printf_common+0x3e>
 8005b68:	18e1      	adds	r1, r4, r3
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	2030      	movs	r0, #48	; 0x30
 8005b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b72:	4422      	add	r2, r4
 8005b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	e7c7      	b.n	8005b10 <_printf_common+0x58>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4622      	mov	r2, r4
 8005b84:	4649      	mov	r1, r9
 8005b86:	4638      	mov	r0, r7
 8005b88:	47c0      	blx	r8
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d0e6      	beq.n	8005b5c <_printf_common+0xa4>
 8005b8e:	3601      	adds	r6, #1
 8005b90:	e7d9      	b.n	8005b46 <_printf_common+0x8e>
	...

08005b94 <_printf_i>:
 8005b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	460c      	mov	r4, r1
 8005b9a:	4691      	mov	r9, r2
 8005b9c:	7e27      	ldrb	r7, [r4, #24]
 8005b9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ba0:	2f78      	cmp	r7, #120	; 0x78
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	469a      	mov	sl, r3
 8005ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005baa:	d807      	bhi.n	8005bbc <_printf_i+0x28>
 8005bac:	2f62      	cmp	r7, #98	; 0x62
 8005bae:	d80a      	bhi.n	8005bc6 <_printf_i+0x32>
 8005bb0:	2f00      	cmp	r7, #0
 8005bb2:	f000 80d8 	beq.w	8005d66 <_printf_i+0x1d2>
 8005bb6:	2f58      	cmp	r7, #88	; 0x58
 8005bb8:	f000 80a3 	beq.w	8005d02 <_printf_i+0x16e>
 8005bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc4:	e03a      	b.n	8005c3c <_printf_i+0xa8>
 8005bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bca:	2b15      	cmp	r3, #21
 8005bcc:	d8f6      	bhi.n	8005bbc <_printf_i+0x28>
 8005bce:	a001      	add	r0, pc, #4	; (adr r0, 8005bd4 <_printf_i+0x40>)
 8005bd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c41 	.word	0x08005c41
 8005bdc:	08005bbd 	.word	0x08005bbd
 8005be0:	08005bbd 	.word	0x08005bbd
 8005be4:	08005bbd 	.word	0x08005bbd
 8005be8:	08005bbd 	.word	0x08005bbd
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005bbd 	.word	0x08005bbd
 8005bf4:	08005bbd 	.word	0x08005bbd
 8005bf8:	08005bbd 	.word	0x08005bbd
 8005bfc:	08005bbd 	.word	0x08005bbd
 8005c00:	08005d4d 	.word	0x08005d4d
 8005c04:	08005c71 	.word	0x08005c71
 8005c08:	08005d2f 	.word	0x08005d2f
 8005c0c:	08005bbd 	.word	0x08005bbd
 8005c10:	08005bbd 	.word	0x08005bbd
 8005c14:	08005d6f 	.word	0x08005d6f
 8005c18:	08005bbd 	.word	0x08005bbd
 8005c1c:	08005c71 	.word	0x08005c71
 8005c20:	08005bbd 	.word	0x08005bbd
 8005c24:	08005bbd 	.word	0x08005bbd
 8005c28:	08005d37 	.word	0x08005d37
 8005c2c:	680b      	ldr	r3, [r1, #0]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	600a      	str	r2, [r1, #0]
 8005c34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0a3      	b.n	8005d88 <_printf_i+0x1f4>
 8005c40:	6825      	ldr	r5, [r4, #0]
 8005c42:	6808      	ldr	r0, [r1, #0]
 8005c44:	062e      	lsls	r6, r5, #24
 8005c46:	f100 0304 	add.w	r3, r0, #4
 8005c4a:	d50a      	bpl.n	8005c62 <_printf_i+0xce>
 8005c4c:	6805      	ldr	r5, [r0, #0]
 8005c4e:	600b      	str	r3, [r1, #0]
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	da03      	bge.n	8005c5c <_printf_i+0xc8>
 8005c54:	232d      	movs	r3, #45	; 0x2d
 8005c56:	426d      	negs	r5, r5
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5c:	485e      	ldr	r0, [pc, #376]	; (8005dd8 <_printf_i+0x244>)
 8005c5e:	230a      	movs	r3, #10
 8005c60:	e019      	b.n	8005c96 <_printf_i+0x102>
 8005c62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c66:	6805      	ldr	r5, [r0, #0]
 8005c68:	600b      	str	r3, [r1, #0]
 8005c6a:	bf18      	it	ne
 8005c6c:	b22d      	sxthne	r5, r5
 8005c6e:	e7ef      	b.n	8005c50 <_printf_i+0xbc>
 8005c70:	680b      	ldr	r3, [r1, #0]
 8005c72:	6825      	ldr	r5, [r4, #0]
 8005c74:	1d18      	adds	r0, r3, #4
 8005c76:	6008      	str	r0, [r1, #0]
 8005c78:	0628      	lsls	r0, r5, #24
 8005c7a:	d501      	bpl.n	8005c80 <_printf_i+0xec>
 8005c7c:	681d      	ldr	r5, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <_printf_i+0xf2>
 8005c80:	0669      	lsls	r1, r5, #25
 8005c82:	d5fb      	bpl.n	8005c7c <_printf_i+0xe8>
 8005c84:	881d      	ldrh	r5, [r3, #0]
 8005c86:	4854      	ldr	r0, [pc, #336]	; (8005dd8 <_printf_i+0x244>)
 8005c88:	2f6f      	cmp	r7, #111	; 0x6f
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2308      	moveq	r3, #8
 8005c8e:	230a      	movne	r3, #10
 8005c90:	2100      	movs	r1, #0
 8005c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c96:	6866      	ldr	r6, [r4, #4]
 8005c98:	60a6      	str	r6, [r4, #8]
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	bfa2      	ittt	ge
 8005c9e:	6821      	ldrge	r1, [r4, #0]
 8005ca0:	f021 0104 	bicge.w	r1, r1, #4
 8005ca4:	6021      	strge	r1, [r4, #0]
 8005ca6:	b90d      	cbnz	r5, 8005cac <_printf_i+0x118>
 8005ca8:	2e00      	cmp	r6, #0
 8005caa:	d04d      	beq.n	8005d48 <_printf_i+0x1b4>
 8005cac:	4616      	mov	r6, r2
 8005cae:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cb2:	fb03 5711 	mls	r7, r3, r1, r5
 8005cb6:	5dc7      	ldrb	r7, [r0, r7]
 8005cb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cbc:	462f      	mov	r7, r5
 8005cbe:	42bb      	cmp	r3, r7
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	d9f4      	bls.n	8005cae <_printf_i+0x11a>
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d10b      	bne.n	8005ce0 <_printf_i+0x14c>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	07df      	lsls	r7, r3, #31
 8005ccc:	d508      	bpl.n	8005ce0 <_printf_i+0x14c>
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	6861      	ldr	r1, [r4, #4]
 8005cd2:	4299      	cmp	r1, r3
 8005cd4:	bfde      	ittt	le
 8005cd6:	2330      	movle	r3, #48	; 0x30
 8005cd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cdc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005ce0:	1b92      	subs	r2, r2, r6
 8005ce2:	6122      	str	r2, [r4, #16]
 8005ce4:	f8cd a000 	str.w	sl, [sp]
 8005ce8:	464b      	mov	r3, r9
 8005cea:	aa03      	add	r2, sp, #12
 8005cec:	4621      	mov	r1, r4
 8005cee:	4640      	mov	r0, r8
 8005cf0:	f7ff fee2 	bl	8005ab8 <_printf_common>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d14c      	bne.n	8005d92 <_printf_i+0x1fe>
 8005cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cfc:	b004      	add	sp, #16
 8005cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d02:	4835      	ldr	r0, [pc, #212]	; (8005dd8 <_printf_i+0x244>)
 8005d04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	680e      	ldr	r6, [r1, #0]
 8005d0c:	061f      	lsls	r7, r3, #24
 8005d0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d12:	600e      	str	r6, [r1, #0]
 8005d14:	d514      	bpl.n	8005d40 <_printf_i+0x1ac>
 8005d16:	07d9      	lsls	r1, r3, #31
 8005d18:	bf44      	itt	mi
 8005d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d1e:	6023      	strmi	r3, [r4, #0]
 8005d20:	b91d      	cbnz	r5, 8005d2a <_printf_i+0x196>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	f023 0320 	bic.w	r3, r3, #32
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	e7b0      	b.n	8005c90 <_printf_i+0xfc>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	f043 0320 	orr.w	r3, r3, #32
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	2378      	movs	r3, #120	; 0x78
 8005d38:	4828      	ldr	r0, [pc, #160]	; (8005ddc <_printf_i+0x248>)
 8005d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d3e:	e7e3      	b.n	8005d08 <_printf_i+0x174>
 8005d40:	065e      	lsls	r6, r3, #25
 8005d42:	bf48      	it	mi
 8005d44:	b2ad      	uxthmi	r5, r5
 8005d46:	e7e6      	b.n	8005d16 <_printf_i+0x182>
 8005d48:	4616      	mov	r6, r2
 8005d4a:	e7bb      	b.n	8005cc4 <_printf_i+0x130>
 8005d4c:	680b      	ldr	r3, [r1, #0]
 8005d4e:	6826      	ldr	r6, [r4, #0]
 8005d50:	6960      	ldr	r0, [r4, #20]
 8005d52:	1d1d      	adds	r5, r3, #4
 8005d54:	600d      	str	r5, [r1, #0]
 8005d56:	0635      	lsls	r5, r6, #24
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	d501      	bpl.n	8005d60 <_printf_i+0x1cc>
 8005d5c:	6018      	str	r0, [r3, #0]
 8005d5e:	e002      	b.n	8005d66 <_printf_i+0x1d2>
 8005d60:	0671      	lsls	r1, r6, #25
 8005d62:	d5fb      	bpl.n	8005d5c <_printf_i+0x1c8>
 8005d64:	8018      	strh	r0, [r3, #0]
 8005d66:	2300      	movs	r3, #0
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	4616      	mov	r6, r2
 8005d6c:	e7ba      	b.n	8005ce4 <_printf_i+0x150>
 8005d6e:	680b      	ldr	r3, [r1, #0]
 8005d70:	1d1a      	adds	r2, r3, #4
 8005d72:	600a      	str	r2, [r1, #0]
 8005d74:	681e      	ldr	r6, [r3, #0]
 8005d76:	6862      	ldr	r2, [r4, #4]
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f7fa fa38 	bl	80001f0 <memchr>
 8005d80:	b108      	cbz	r0, 8005d86 <_printf_i+0x1f2>
 8005d82:	1b80      	subs	r0, r0, r6
 8005d84:	6060      	str	r0, [r4, #4]
 8005d86:	6863      	ldr	r3, [r4, #4]
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d90:	e7a8      	b.n	8005ce4 <_printf_i+0x150>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	4632      	mov	r2, r6
 8005d96:	4649      	mov	r1, r9
 8005d98:	4640      	mov	r0, r8
 8005d9a:	47d0      	blx	sl
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d0ab      	beq.n	8005cf8 <_printf_i+0x164>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	079b      	lsls	r3, r3, #30
 8005da4:	d413      	bmi.n	8005dce <_printf_i+0x23a>
 8005da6:	68e0      	ldr	r0, [r4, #12]
 8005da8:	9b03      	ldr	r3, [sp, #12]
 8005daa:	4298      	cmp	r0, r3
 8005dac:	bfb8      	it	lt
 8005dae:	4618      	movlt	r0, r3
 8005db0:	e7a4      	b.n	8005cfc <_printf_i+0x168>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4632      	mov	r2, r6
 8005db6:	4649      	mov	r1, r9
 8005db8:	4640      	mov	r0, r8
 8005dba:	47d0      	blx	sl
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d09b      	beq.n	8005cf8 <_printf_i+0x164>
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	9903      	ldr	r1, [sp, #12]
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	42ab      	cmp	r3, r5
 8005dca:	dcf2      	bgt.n	8005db2 <_printf_i+0x21e>
 8005dcc:	e7eb      	b.n	8005da6 <_printf_i+0x212>
 8005dce:	2500      	movs	r5, #0
 8005dd0:	f104 0619 	add.w	r6, r4, #25
 8005dd4:	e7f5      	b.n	8005dc2 <_printf_i+0x22e>
 8005dd6:	bf00      	nop
 8005dd8:	08006802 	.word	0x08006802
 8005ddc:	08006813 	.word	0x08006813

08005de0 <__retarget_lock_acquire_recursive>:
 8005de0:	4770      	bx	lr

08005de2 <__retarget_lock_release_recursive>:
 8005de2:	4770      	bx	lr

08005de4 <memmove>:
 8005de4:	4288      	cmp	r0, r1
 8005de6:	b510      	push	{r4, lr}
 8005de8:	eb01 0402 	add.w	r4, r1, r2
 8005dec:	d902      	bls.n	8005df4 <memmove+0x10>
 8005dee:	4284      	cmp	r4, r0
 8005df0:	4623      	mov	r3, r4
 8005df2:	d807      	bhi.n	8005e04 <memmove+0x20>
 8005df4:	1e43      	subs	r3, r0, #1
 8005df6:	42a1      	cmp	r1, r4
 8005df8:	d008      	beq.n	8005e0c <memmove+0x28>
 8005dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e02:	e7f8      	b.n	8005df6 <memmove+0x12>
 8005e04:	4402      	add	r2, r0
 8005e06:	4601      	mov	r1, r0
 8005e08:	428a      	cmp	r2, r1
 8005e0a:	d100      	bne.n	8005e0e <memmove+0x2a>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e16:	e7f7      	b.n	8005e08 <memmove+0x24>

08005e18 <_realloc_r>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	460e      	mov	r6, r1
 8005e20:	b921      	cbnz	r1, 8005e2c <_realloc_r+0x14>
 8005e22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e26:	4611      	mov	r1, r2
 8005e28:	f7ff bb68 	b.w	80054fc <_malloc_r>
 8005e2c:	b922      	cbnz	r2, 8005e38 <_realloc_r+0x20>
 8005e2e:	f7ff fb15 	bl	800545c <_free_r>
 8005e32:	4625      	mov	r5, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e38:	f000 f814 	bl	8005e64 <_malloc_usable_size_r>
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d20f      	bcs.n	8005e60 <_realloc_r+0x48>
 8005e40:	4621      	mov	r1, r4
 8005e42:	4638      	mov	r0, r7
 8005e44:	f7ff fb5a 	bl	80054fc <_malloc_r>
 8005e48:	4605      	mov	r5, r0
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d0f2      	beq.n	8005e34 <_realloc_r+0x1c>
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4622      	mov	r2, r4
 8005e52:	f7ff fadd 	bl	8005410 <memcpy>
 8005e56:	4631      	mov	r1, r6
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7ff faff 	bl	800545c <_free_r>
 8005e5e:	e7e9      	b.n	8005e34 <_realloc_r+0x1c>
 8005e60:	4635      	mov	r5, r6
 8005e62:	e7e7      	b.n	8005e34 <_realloc_r+0x1c>

08005e64 <_malloc_usable_size_r>:
 8005e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e68:	1f18      	subs	r0, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bfbc      	itt	lt
 8005e6e:	580b      	ldrlt	r3, [r1, r0]
 8005e70:	18c0      	addlt	r0, r0, r3
 8005e72:	4770      	bx	lr

08005e74 <_init>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	bf00      	nop
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr

08005e80 <_fini>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	bf00      	nop
 8005e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e86:	bc08      	pop	{r3}
 8005e88:	469e      	mov	lr, r3
 8005e8a:	4770      	bx	lr
