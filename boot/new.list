
new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005168  08005168  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005170  08005170  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08005178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f2c  200000bc  08005234  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20000fe8  08005234  00020fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc64  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003792  00000000  00000000  0003dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  000414e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a124  00000000  00000000  00042060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018516  00000000  00000000  0005c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a0e5a  00000000  00000000  0007469a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001154f4  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00010875  00000000  00000000  00115547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000018d0  00000000  00000000  00125dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d54  00000000  00000000  00127690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004930 	.word	0x08004930

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	08004930 	.word	0x08004930

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <crc32>:
uint32_t cr = ~orig;
const uint8_t *p;
uint32_t n;
uint8_t i;

  	for (n = size, p = buf; n != 0;) {
 8000588:	b31a      	cbz	r2, 80005d2 <crc32+0x4a>
{
 800058a:	b470      	push	{r4, r5, r6}
 800058c:	4d11      	ldr	r5, [pc, #68]	; (80005d4 <crc32+0x4c>)
 800058e:	43c4      	mvns	r4, r0
    	if (n >= 8) {
 8000590:	2a07      	cmp	r2, #7
 8000592:	d80d      	bhi.n	80005b0 <crc32+0x28>
    		for (i = 0; i < 8; i++) CRC32(cr, *(p + i));
    		p += 8;
    		n -= 8;
    	} else {
    		CRC32(cr, *p);
 8000594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000598:	4063      	eors	r3, r4
 800059a:	b2db      	uxtb	r3, r3
    		p++;
    		n--;
 800059c:	3a01      	subs	r2, #1
    		CRC32(cr, *p);
 800059e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80005a2:	ea83 2414 	eor.w	r4, r3, r4, lsr #8
  	for (n = size, p = buf; n != 0;) {
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d1f2      	bne.n	8000590 <crc32+0x8>
 80005aa:	43e0      	mvns	r0, r4
    	}
  	}

  	return ~cr;
}
 80005ac:	bc70      	pop	{r4, r5, r6}
 80005ae:	4770      	bx	lr
 80005b0:	1e48      	subs	r0, r1, #1
 80005b2:	1dce      	adds	r6, r1, #7
    		for (i = 0; i < 8; i++) CRC32(cr, *(p + i));
 80005b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80005b8:	4063      	eors	r3, r4
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4286      	cmp	r6, r0
 80005be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80005c2:	ea83 2414 	eor.w	r4, r3, r4, lsr #8
 80005c6:	d1f5      	bne.n	80005b4 <crc32+0x2c>
    		n -= 8;
 80005c8:	3a08      	subs	r2, #8
    		p += 8;
 80005ca:	3108      	adds	r1, #8
  	for (n = size, p = buf; n != 0;) {
 80005cc:	2a00      	cmp	r2, #0
 80005ce:	d1df      	bne.n	8000590 <crc32+0x8>
 80005d0:	e7eb      	b.n	80005aa <crc32+0x22>
}
 80005d2:	4770      	bx	lr
 80005d4:	08004a18 	.word	0x08004a18

080005d8 <Logger>:
//----------------------------------------------------------------------
//----------------------------------------------------------------------
//#ifdef SET_LOGGER

void Logger(const char *tag, bool addTime, const char *fmt, ...)
{
 80005d8:	b40c      	push	{r2, r3}
 80005da:	b508      	push	{r3, lr}
	}

	va_end(args);
#else
	//logReady = false;
	HAL_Delay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f001 fc65 	bl	8001eac <HAL_Delay>
	//logReady = true;
#endif
}
 80005e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80005e6:	b002      	add	sp, #8
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <HAL_FLASH_EndOfOperationCallback>:
	return ret;
}
//----------------------------------------------------------------------
void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
	if (bootMode) progDone = true;
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <HAL_FLASH_EndOfOperationCallback+0x10>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b113      	cbz	r3, 80005f8 <HAL_FLASH_EndOfOperationCallback+0xc>
 80005f2:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_FLASH_EndOfOperationCallback+0x14>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	2000057c 	.word	0x2000057c
 8000600:	20000114 	.word	0x20000114

08000604 <dmaCB>:
//----------------------------------------------------------------------
void dmaCB(DMA_HandleTypeDef *dmem)
{
	if (dmem == dmaMem) dmaDone = true;
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <dmaCB+0x14>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4283      	cmp	r3, r0
 800060a:	d000      	beq.n	800060e <dmaCB+0xa>
}
 800060c:	4770      	bx	lr
	if (dmem == dmaMem) dmaDone = true;
 800060e:	4b03      	ldr	r3, [pc, #12]	; (800061c <dmaCB+0x18>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000003c 	.word	0x2000003c
 800061c:	200000fc 	.word	0x200000fc

08000620 <flash_erase>:
//----------------------------------------------------------------------
void flash_erase(uint8_t sector)
{
 8000620:	b500      	push	{lr}
uint32_t error = 0;
 8000622:	2300      	movs	r3, #0
{
 8000624:	b087      	sub	sp, #28

FLASH_EraseInitTypeDef FLASH_EraseInitStruct =
 8000626:	2101      	movs	r1, #1
 8000628:	2202      	movs	r2, #2
 800062a:	e9cd 3002 	strd	r3, r0, [sp, #8]
 800062e:	e9cd 3300 	strd	r3, r3, [sp]
 8000632:	e9cd 1204 	strd	r1, r2, [sp, #16]
	.Sector = (uint32_t)sector,
	.NbSectors = 1,
	.VoltageRange = FLASH_VOLTAGE_RANGE_3
};

    if (HAL_FLASH_Unlock() != HAL_OK) {
 8000636:	f001 fff9 	bl	800262c <HAL_FLASH_Unlock>
 800063a:	b138      	cbz	r0, 800064c <flash_erase+0x2c>
    	devError |= devFlash;
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <flash_erase+0x4c>)
 800063e:	6813      	ldr	r3, [r2, #0]
 8000640:	f043 030c 	orr.w	r3, r3, #12
 8000644:	6013      	str	r3, [r2, #0]
    }

    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error) != HAL_OK) devError |= devFlash;

    HAL_FLASH_Lock();
}
 8000646:	b007      	add	sp, #28
 8000648:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error) != HAL_OK) devError |= devFlash;
 800064c:	a801      	add	r0, sp, #4
 800064e:	4669      	mov	r1, sp
 8000650:	f002 f8e6 	bl	8002820 <HAL_FLASHEx_Erase>
 8000654:	b120      	cbz	r0, 8000660 <flash_erase+0x40>
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <flash_erase+0x4c>)
 8000658:	6813      	ldr	r3, [r2, #0]
 800065a:	f043 030c 	orr.w	r3, r3, #12
 800065e:	6013      	str	r3, [r2, #0]
    HAL_FLASH_Lock();
 8000660:	f001 fff8 	bl	8002654 <HAL_FLASH_Lock>
}
 8000664:	b007      	add	sp, #28
 8000666:	f85d fb04 	ldr.w	pc, [sp], #4
 800066a:	bf00      	nop
 800066c:	20000164 	.word	0x20000164

08000670 <flash_write>:
//----------------------------------------------------------------------
uint8_t flash_write(volatile uint32_t *address, uint32_t *data, uint16_t size)
{
 8000670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000674:	4607      	mov	r7, r0
 8000676:	460d      	mov	r5, r1
 8000678:	4616      	mov	r6, r2
	if (HAL_FLASH_Unlock() != HAL_OK) {
 800067a:	f001 ffd7 	bl	800262c <HAL_FLASH_Unlock>
 800067e:	b9f0      	cbnz	r0, 80006be <flash_write+0x4e>
		devError |= devFlash;
		return 1;
	}

	for (int i = 0; i < size; i++) {
 8000680:	4680      	mov	r8, r0
 8000682:	b336      	cbz	r6, 80006d2 <flash_write+0x62>
 8000684:	3d04      	subs	r5, #4
 8000686:	4604      	mov	r4, r0
 8000688:	e001      	b.n	800068e <flash_write+0x1e>
 800068a:	42b4      	cmp	r4, r6
 800068c:	d021      	beq.n	80006d2 <flash_write+0x62>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (*address) + (i * 4), data[i]) != HAL_OK) {
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8000694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8000698:	2300      	movs	r3, #0
 800069a:	2002      	movs	r0, #2
	for (int i = 0; i < size; i++) {
 800069c:	3401      	adds	r4, #1
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (*address) + (i * 4), data[i]) != HAL_OK) {
 800069e:	f002 f80d 	bl	80026bc <HAL_FLASH_Program>
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d0f1      	beq.n	800068a <flash_write+0x1a>
			devError |= devFlash;
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <flash_write+0x6c>)
 80006a8:	6813      	ldr	r3, [r2, #0]
			HAL_FLASH_Lock();
 80006aa:	f04f 0801 	mov.w	r8, #1
			devError |= devFlash;
 80006ae:	f043 030c 	orr.w	r3, r3, #12
 80006b2:	6013      	str	r3, [r2, #0]
			HAL_FLASH_Lock();
 80006b4:	f001 ffce 	bl	8002654 <HAL_FLASH_Lock>
	}

	HAL_FLASH_Lock();

	return 0;
}
 80006b8:	4640      	mov	r0, r8
 80006ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		devError |= devFlash;
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <flash_write+0x6c>)
 80006c0:	6813      	ldr	r3, [r2, #0]
		return 1;
 80006c2:	f04f 0801 	mov.w	r8, #1
		devError |= devFlash;
 80006c6:	f043 030c 	orr.w	r3, r3, #12
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	4640      	mov	r0, r8
 80006ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	HAL_FLASH_Lock();
 80006d2:	f001 ffbf 	bl	8002654 <HAL_FLASH_Lock>
}
 80006d6:	4640      	mov	r0, r8
 80006d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006dc:	20000164 	.word	0x20000164

080006e0 <progBlk>:
//----------------------------------------------------------------------
uint8_t progBlk(uint32_t faddr, const uint8_t *buf, int len)
{
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	b083      	sub	sp, #12
 80006e4:	4e20      	ldr	r6, [pc, #128]	; (8000768 <progBlk+0x88>)
 80006e6:	9001      	str	r0, [sp, #4]
 80006e8:	4617      	mov	r7, r2
uint8_t ret = 1;

	int8_t sector = addr2Sector(faddr);
 80006ea:	2300      	movs	r3, #0
 80006ec:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 80006f0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80006f4:	e003      	b.n	80006fe <progBlk+0x1e>
 80006f6:	f8d1 5001 	ldr.w	r5, [r1, #1]
 80006fa:	f8d1 4005 	ldr.w	r4, [r1, #5]
	for (i = 0; i < MAX_FLASH_SECTOR; i++) {
 80006fe:	3301      	adds	r3, #1
 8000700:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
		if ( (adr >= sadr) && (adr < eadr) ) {
 8000704:	42a8      	cmp	r0, r5
 8000706:	4431      	add	r1, r6
		uint32_t eadr = sadr + allFlash[i].len;
 8000708:	442c      	add	r4, r5
		if ( (adr >= sadr) && (adr < eadr) ) {
 800070a:	d301      	bcc.n	8000710 <progBlk+0x30>
 800070c:	42a0      	cmp	r0, r4
 800070e:	d308      	bcc.n	8000722 <progBlk+0x42>
	for (i = 0; i < MAX_FLASH_SECTOR; i++) {
 8000710:	2b08      	cmp	r3, #8
 8000712:	d1f0      	bne.n	80006f6 <progBlk+0x16>
	HAL_Delay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f001 fbc9 	bl	8001eac <HAL_Delay>
uint8_t ret = 1;
 800071a:	2401      	movs	r4, #1
		else
			Logger(NULL, false, "done. ret=%u. %u ms (Err=%d)%s", ret, HAL_GetTick() - ts, devError, eol);
	}

	return ret;
}
 800071c:	4620      	mov	r0, r4
 800071e:	b003      	add	sp, #12
 8000720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_Delay(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f001 fbc2 	bl	8001eac <HAL_Delay>
		uint32_t ts = HAL_GetTick();
 8000728:	f001 fbba 	bl	8001ea0 <HAL_GetTick>
	HAL_Delay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f001 fbbd 	bl	8001eac <HAL_Delay>
		if (!flash_write(&faddr, (uint32_t *)vrem, len / sizeof(uint32_t))) ret = 0;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <progBlk+0x8c>)
 8000734:	f3c7 028f 	ubfx	r2, r7, #2, #16
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	a801      	add	r0, sp, #4
 800073c:	f7ff ff98 	bl	8000670 <flash_write>
 8000740:	4604      	mov	r4, r0
 8000742:	b938      	cbnz	r0, 8000754 <progBlk+0x74>
			Logger(NULL, false, "done. %u ms%s", HAL_GetTick() - ts, eol);
 8000744:	f001 fbac 	bl	8001ea0 <HAL_GetTick>
	HAL_Delay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f001 fbaf 	bl	8001eac <HAL_Delay>
}
 800074e:	4620      	mov	r0, r4
 8000750:	b003      	add	sp, #12
 8000752:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Logger(NULL, false, "done. ret=%u. %u ms (Err=%d)%s", ret, HAL_GetTick() - ts, devError, eol);
 8000754:	f001 fba4 	bl	8001ea0 <HAL_GetTick>
	HAL_Delay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f001 fba7 	bl	8001eac <HAL_Delay>
uint8_t ret = 1;
 800075e:	2401      	movs	r4, #1
}
 8000760:	4620      	mov	r0, r4
 8000762:	b003      	add	sp, #12
 8000764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000766:	bf00      	nop
 8000768:	080049d0 	.word	0x080049d0
 800076c:	20000158 	.word	0x20000158

08000770 <doAPI>:
//----------------------------------------------------------------------
uint32_t doAPI(uint32_t *aRet)
{
 8000770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000774:	ed2d 8b02 	vpush	{d8}
uint32_t tim = 0;
bool loop = true;
bool dstop = false;
uint32_t blk_len = MAX_VREM_BUF;
char *uk = NULL;
unsigned int fsize = hdr.len;
 8000778:	4ea9      	ldr	r6, [pc, #676]	; (8000a20 <doAPI+0x2b0>)
uint32_t ret = 0, txRet = *aRet;
 800077a:	6803      	ldr	r3, [r0, #0]
				}
				else
				if (check_tmr10(tim)) devError |= devTimeout;
			break;
		}
		if (devError) loop = false;
 800077c:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8000a6c <doAPI+0x2fc>
{
 8000780:	b08d      	sub	sp, #52	; 0x34
	action = do_none;
 8000782:	f04f 0a00 	mov.w	sl, #0
uint32_t ret = 0, txRet = *aRet;
 8000786:	9304      	str	r3, [sp, #16]
unsigned int fsize = hdr.len;
 8000788:	68b3      	ldr	r3, [r6, #8]
 800078a:	9305      	str	r3, [sp, #20]
unsigned int fcrc = hdr.crc;
 800078c:	68f3      	ldr	r3, [r6, #12]
 800078e:	9306      	str	r3, [sp, #24]
unsigned int fadr = hdr.adr;
 8000790:	6873      	ldr	r3, [r6, #4]
 8000792:	9307      	str	r3, [sp, #28]
	action = do_none;
 8000794:	4ba3      	ldr	r3, [pc, #652]	; (8000a24 <doAPI+0x2b4>)
{
 8000796:	9008      	str	r0, [sp, #32]
				tim = get_tmr10(_30s);
 8000798:	f640 30b8 	movw	r0, #3000	; 0xbb8
	action = do_none;
 800079c:	f883 a000 	strb.w	sl, [r3]
				tim = get_tmr10(_30s);
 80007a0:	f000 fc44 	bl	800102c <get_tmr10>
		if (devError) loop = false;
 80007a4:	f8d9 3000 	ldr.w	r3, [r9]
 80007a8:	b1b3      	cbz	r3, 80007d8 <doAPI+0x68>
	}

	blkRdy = 1;
 80007aa:	4a9f      	ldr	r2, [pc, #636]	; (8000a28 <doAPI+0x2b8>)
	startAPI = false;
 80007ac:	4b9f      	ldr	r3, [pc, #636]	; (8000a2c <doAPI+0x2bc>)
 80007ae:	f8cd a00c 	str.w	sl, [sp, #12]
	blkRdy = 1;
 80007b2:	2101      	movs	r1, #1
 80007b4:	7011      	strb	r1, [r2, #0]
	startAPI = false;
 80007b6:	f883 a000 	strb.w	sl, [r3]
	if (!dstop) {
		HAL_UART_DMAStop(uartPort);
 80007ba:	4c9d      	ldr	r4, [pc, #628]	; (8000a30 <doAPI+0x2c0>)
 80007bc:	6820      	ldr	r0, [r4, #0]
 80007be:	f002 fffb 	bl	80037b8 <HAL_UART_DMAStop>
		HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 80007c2:	6820      	ldr	r0, [r4, #0]
 80007c4:	499b      	ldr	r1, [pc, #620]	; (8000a34 <doAPI+0x2c4>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	f002 ff8a 	bl	80036e0 <HAL_UART_Receive_IT>
	}

	return ret;
}
 80007cc:	9803      	ldr	r0, [sp, #12]
 80007ce:	b00d      	add	sp, #52	; 0x34
 80007d0:	ecbd 8b02 	vpop	{d8}
 80007d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007d8:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8000a28 <doAPI+0x2b8>
		if (devError) loop = false;
 80007dc:	9303      	str	r3, [sp, #12]
 80007de:	4605      	mov	r5, r0
 80007e0:	9309      	str	r3, [sp, #36]	; 0x24
					if (apiCmd == apiProg) {// 'prog:1024:0x12cdc0a5'
 80007e2:	4c95      	ldr	r4, [pc, #596]	; (8000a38 <doAPI+0x2c8>)
				if (startAPI) {
 80007e4:	4b91      	ldr	r3, [pc, #580]	; (8000a2c <doAPI+0x2bc>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d064      	beq.n	80008ba <doAPI+0x14a>
					if (apiCmd == apiProg) {// 'prog:1024:0x12cdc0a5'
 80007f0:	f994 3000 	ldrsb.w	r3, [r4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d150      	bne.n	800089a <doAPI+0x12a>
						if (file_size >= MAX_VREM_BUF) {
 80007f8:	4b90      	ldr	r3, [pc, #576]	; (8000a3c <doAPI+0x2cc>)
 80007fa:	920a      	str	r2, [sp, #40]	; 0x28
 80007fc:	f8d3 c000 	ldr.w	ip, [r3]
						action = do_prog;
 8000800:	4a88      	ldr	r2, [pc, #544]	; (8000a24 <doAPI+0x2b4>)
 8000802:	2301      	movs	r3, #1
						if (file_size >= MAX_VREM_BUF) {
 8000804:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
						action = do_prog;
 8000808:	7013      	strb	r3, [r2, #0]
						if (file_size >= MAX_VREM_BUF) {
 800080a:	f080 822f 	bcs.w	8000c6c <doAPI+0x4fc>
						if (blk_len > 0) {
 800080e:	f1bc 0f00 	cmp.w	ip, #0
 8000812:	f000 80a3 	beq.w	800095c <doAPI+0x1ec>
 8000816:	46e0      	mov	r8, ip
	if (!file_size || !apiAddr) return;
 8000818:	4b89      	ldr	r3, [pc, #548]	; (8000a40 <doAPI+0x2d0>)
 800081a:	681f      	ldr	r7, [r3, #0]
 800081c:	2f00      	cmp	r7, #0
 800081e:	f000 80a6 	beq.w	800096e <doAPI+0x1fe>
	uint32_t eadr = sadr + file_size - 1;
 8000822:	eb0c 0e07 	add.w	lr, ip, r7
 8000826:	2300      	movs	r3, #0
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 8000828:	4d86      	ldr	r5, [pc, #536]	; (8000a44 <doAPI+0x2d4>)
	uint32_t eadr = sadr + file_size - 1;
 800082a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	uint32_t len = 0;
 800082e:	469a      	mov	sl, r3
	uint32_t eadr = sadr + file_size - 1;
 8000830:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000834:	e00c      	b.n	8000850 <doAPI+0xe0>
				needErase[i] = 1;
 8000836:	4984      	ldr	r1, [pc, #528]	; (8000a48 <doAPI+0x2d8>)
 8000838:	f04f 0001 	mov.w	r0, #1
 800083c:	5458      	strb	r0, [r3, r1]
				len += allFlash[i].len;
 800083e:	4492      	add	sl, r2
	for (uint8_t i = 0; i < MAX_FLASH_SECTOR; i++) {
 8000840:	3301      	adds	r3, #1
 8000842:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8000846:	2b08      	cmp	r3, #8
 8000848:	442a      	add	r2, r5
 800084a:	d014      	beq.n	8000876 <doAPI+0x106>
 800084c:	f8d2 1001 	ldr.w	r1, [r2, #1]
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 8000850:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
		if (allFlash[i].adr >= sadr) {
 8000854:	428f      	cmp	r7, r1
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 8000856:	442a      	add	r2, r5
 8000858:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
		if (allFlash[i].adr >= sadr) {
 800085c:	d8f0      	bhi.n	8000840 <doAPI+0xd0>
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 800085e:	f8d2 2005 	ldr.w	r2, [r2, #5]
 8000862:	4410      	add	r0, r2
 8000864:	4586      	cmp	lr, r0
				if (file_size < (len +allFlash[i].len)) {
 8000866:	eb02 010a 	add.w	r1, r2, sl
			if ((allFlash[i].adr + allFlash[i].len - 1) <= eadr) {
 800086a:	d2e4      	bcs.n	8000836 <doAPI+0xc6>
				if (file_size < (len +allFlash[i].len)) {
 800086c:	458c      	cmp	ip, r1
 800086e:	d2e7      	bcs.n	8000840 <doAPI+0xd0>
					needErase[i] = 1;
 8000870:	4a75      	ldr	r2, [pc, #468]	; (8000a48 <doAPI+0x2d8>)
 8000872:	2101      	movs	r1, #1
 8000874:	54d1      	strb	r1, [r2, r3]
					break;
 8000876:	4f75      	ldr	r7, [pc, #468]	; (8000a4c <doAPI+0x2dc>)
	uint32_t eadr = sadr + file_size - 1;
 8000878:	2500      	movs	r5, #0
 800087a:	e003      	b.n	8000884 <doAPI+0x114>
	for (uint8_t i = 0; i < MAX_FLASH_SECTOR; i++) {
 800087c:	3501      	adds	r5, #1
 800087e:	b2ed      	uxtb	r5, r5
 8000880:	2d08      	cmp	r5, #8
 8000882:	d072      	beq.n	800096a <doAPI+0x1fa>
		if (needErase[i]) {
 8000884:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0f7      	beq.n	800087c <doAPI+0x10c>
	HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f001 fb0d 	bl	8001eac <HAL_Delay>
			flash_erase(i);
 8000892:	4628      	mov	r0, r5
 8000894:	f7ff fec4 	bl	8000620 <flash_erase>
 8000898:	e7f0      	b.n	800087c <doAPI+0x10c>
					} else if (apiCmd == apiRead) {
 800089a:	2b01      	cmp	r3, #1
 800089c:	f000 81b0 	beq.w	8000c00 <doAPI+0x490>
					} else if (apiCmd == apiStop) {
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d00f      	beq.n	80008c4 <doAPI+0x154>
					} else if (apiCmd == apiSwitch) {
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d04e      	beq.n	8000946 <doAPI+0x1d6>
				} else if (apiCmd == apiDone) {
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d04c      	beq.n	8000946 <doAPI+0x1d6>
				} else devError |= devCmd;
 80008ac:	f8d9 3000 	ldr.w	r3, [r9]
 80008b0:	f043 030a 	orr.w	r3, r3, #10
 80008b4:	f8c9 3000 	str.w	r3, [r9]
		if (devError) loop = false;
 80008b8:	e045      	b.n	8000946 <doAPI+0x1d6>
				} else if (check_tmr10(tim)) {
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 fbbc 	bl	8001038 <check_tmr10>
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d13a      	bne.n	800093a <doAPI+0x1ca>
		if (devError) loop = false;
 80008c4:	f8d9 3000 	ldr.w	r3, [r9]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d13c      	bne.n	8000946 <doAPI+0x1d6>
 80008cc:	e78a      	b.n	80007e4 <doAPI+0x74>
					if (blkRdy) {
 80008ce:	f89b 3000 	ldrb.w	r3, [fp]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 81ff 	beq.w	8000cd6 <doAPI+0x566>
						apiCrc = crc32(apiCrc, vrem, blk_len);
 80008d8:	4a5d      	ldr	r2, [pc, #372]	; (8000a50 <doAPI+0x2e0>)
						apiAddrCur += blk_len;
 80008da:	f8da 3000 	ldr.w	r3, [sl]
						apiCrc = crc32(apiCrc, vrem, blk_len);
 80008de:	6811      	ldr	r1, [r2, #0]
 80008e0:	4a5c      	ldr	r2, [pc, #368]	; (8000a54 <doAPI+0x2e4>)
						apiAddrCur += blk_len;
 80008e2:	4443      	add	r3, r8
						apiCrc = crc32(apiCrc, vrem, blk_len);
 80008e4:	6810      	ldr	r0, [r2, #0]
						apiAddrCur += blk_len;
 80008e6:	f8ca 3000 	str.w	r3, [sl]
						apiCrc = crc32(apiCrc, vrem, blk_len);
 80008ea:	4642      	mov	r2, r8
						blkRdy = 0;
 80008ec:	2500      	movs	r5, #0
 80008ee:	f88b 5000 	strb.w	r5, [fp]
						apiCrc = crc32(apiCrc, vrem, blk_len);
 80008f2:	f7ff fe49 	bl	8000588 <crc32>
 80008f6:	4a57      	ldr	r2, [pc, #348]	; (8000a54 <doAPI+0x2e4>)
						if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 80008f8:	4957      	ldr	r1, [pc, #348]	; (8000a58 <doAPI+0x2e8>)
						apiCrc = crc32(apiCrc, vrem, blk_len);
 80008fa:	6010      	str	r0, [r2, #0]
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);
 80008fc:	4a57      	ldr	r2, [pc, #348]	; (8000a5c <doAPI+0x2ec>)
						if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 80008fe:	4858      	ldr	r0, [pc, #352]	; (8000a60 <doAPI+0x2f0>)
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);
 8000900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000904:	6193      	str	r3, [r2, #24]
						if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 8000906:	f003 fbee 	bl	80040e6 <strstr>
						txRet += blk_len;
 800090a:	9b04      	ldr	r3, [sp, #16]
 800090c:	4443      	add	r3, r8
 800090e:	9304      	str	r3, [sp, #16]
						if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 8000910:	b100      	cbz	r0, 8000914 <doAPI+0x1a4>
 8000912:	7005      	strb	r5, [r0, #0]
	HAL_Delay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f001 fac9 	bl	8001eac <HAL_Delay>
						if (txRet < hdr.len) {
 800091a:	68b5      	ldr	r5, [r6, #8]
 800091c:	9b04      	ldr	r3, [sp, #16]
 800091e:	429d      	cmp	r5, r3
 8000920:	f240 8200 	bls.w	8000d24 <doAPI+0x5b4>
							if ((txRet + blk_len) > hdr.len) {
 8000924:	4443      	add	r3, r8
 8000926:	429d      	cmp	r5, r3
 8000928:	ee08 7a10 	vmov	s16, r7
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 800092c:	4638      	mov	r0, r7
							if ((txRet + blk_len) > hdr.len) {
 800092e:	f0c0 81eb 	bcc.w	8000d08 <doAPI+0x598>
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000932:	f000 fb81 	bl	8001038 <check_tmr10>
 8000936:	2800      	cmp	r0, #0
 8000938:	d03b      	beq.n	80009b2 <doAPI+0x242>
				if (check_tmr10(tim)) devError |= devTimeout;
 800093a:	f8d9 3000 	ldr.w	r3, [r9]
 800093e:	f043 0306 	orr.w	r3, r3, #6
 8000942:	f8c9 3000 	str.w	r3, [r9]
	blkRdy = 1;
 8000946:	2201      	movs	r2, #1
 8000948:	f88b 2000 	strb.w	r2, [fp]
	startAPI = false;
 800094c:	4a37      	ldr	r2, [pc, #220]	; (8000a2c <doAPI+0x2bc>)
 800094e:	2300      	movs	r3, #0
 8000950:	7013      	strb	r3, [r2, #0]
	if (!dstop) {
 8000952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000954:	2b00      	cmp	r3, #0
 8000956:	f47f af39 	bne.w	80007cc <doAPI+0x5c>
 800095a:	e72e      	b.n	80007ba <doAPI+0x4a>
							devError |= devProg;
 800095c:	f8d9 3000 	ldr.w	r3, [r9]
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	f8c9 3000 	str.w	r3, [r9]
		if (devError) loop = false;
 8000968:	e7ed      	b.n	8000946 <doAPI+0x1d6>
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <doAPI+0x2d0>)
 800096c:	681f      	ldr	r7, [r3, #0]
							apiAddrCur = apiAddr;
 800096e:	f8df a100 	ldr.w	sl, [pc, #256]	; 8000a70 <doAPI+0x300>
	HAL_Delay(1);
 8000972:	2001      	movs	r0, #1
							apiAddrCur = apiAddr;
 8000974:	f8ca 7000 	str.w	r7, [sl]
	HAL_Delay(1);
 8000978:	f001 fa98 	bl	8001eac <HAL_Delay>
							tim = get_tmr10(_5s);
 800097c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000980:	f000 fb54 	bl	800102c <get_tmr10>
		if (devError) loop = false;
 8000984:	f8d9 3000 	ldr.w	r3, [r9]
							tim = get_tmr10(_5s);
 8000988:	4607      	mov	r7, r0
		if (devError) loop = false;
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1db      	bne.n	8000946 <doAPI+0x1d6>
 800098e:	ee08 7a10 	vmov	s16, r7
				if (apiCmd == apiProg) {
 8000992:	f994 5000 	ldrsb.w	r5, [r4]
 8000996:	b1a5      	cbz	r5, 80009c2 <doAPI+0x252>
				} else if (apiCmd == apiRead) {
 8000998:	2d01      	cmp	r5, #1
 800099a:	f000 8114 	beq.w	8000bc6 <doAPI+0x456>
				} else if (apiCmd == apiStop) {
 800099e:	2d02      	cmp	r5, #2
 80009a0:	d0d1      	beq.n	8000946 <doAPI+0x1d6>
				} else if (apiCmd == apiDone) {
 80009a2:	2d04      	cmp	r5, #4
 80009a4:	d0cf      	beq.n	8000946 <doAPI+0x1d6>
				} else if (check_tmr10(tim)) {
 80009a6:	ee18 0a10 	vmov	r0, s16
 80009aa:	f000 fb45 	bl	8001038 <check_tmr10>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d1c3      	bne.n	800093a <doAPI+0x1ca>
		if (devError) loop = false;
 80009b2:	f8d9 3000 	ldr.w	r3, [r9]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1c5      	bne.n	8000946 <doAPI+0x1d6>
				if (apiCmd == apiProg) {
 80009ba:	f994 5000 	ldrsb.w	r5, [r4]
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d1ea      	bne.n	8000998 <doAPI+0x228>
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 80009c2:	4926      	ldr	r1, [pc, #152]	; (8000a5c <doAPI+0x2ec>)
					Report(NULL, false, "ready%s", eol);
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <doAPI+0x2f4>)
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 80009c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ca:	618a      	str	r2, [r1, #24]
					Report(NULL, false, "ready%s", eol);
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <doAPI+0x2f8>)
 80009d0:	4629      	mov	r1, r5
 80009d2:	4628      	mov	r0, r5
 80009d4:	f000 feea 	bl	80017ac <Report>
					memset(vrem, 0xff, MAX_VREM_BUF);
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <doAPI+0x2e0>)
					blkRdy = 0;
 80009da:	f88b 5000 	strb.w	r5, [fp]
					memset(vrem, 0xff, MAX_VREM_BUF);
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e4:	21ff      	movs	r1, #255	; 0xff
 80009e6:	f003 fa7f 	bl	8003ee8 <memset>
					if (blk_len < MAX_VREM_BUF) {
 80009ea:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
						uint32_t plus = blk_len % 4;
 80009ee:	bf3c      	itt	cc
 80009f0:	f008 0303 	andcc.w	r3, r8, #3
						blk_len += plus;
 80009f4:	4498      	addcc	r8, r3
					if (HAL_UART_Receive_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <doAPI+0x2e0>)
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <doAPI+0x2c0>)
 80009fa:	6811      	ldr	r1, [r2, #0]
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8000a02:	bf28      	it	cs
 8000a04:	f44f 6880 	movcs.w	r8, #1024	; 0x400
 8000a08:	fa1f f288 	uxth.w	r2, r8
 8000a0c:	f003 fa02 	bl	8003e14 <HAL_UART_Receive_DMA>
 8000a10:	b380      	cbz	r0, 8000a74 <doAPI+0x304>
							devError |= devUART;
 8000a12:	f8d9 3000 	ldr.w	r3, [r9]
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f8c9 3000 	str.w	r3, [r9]
		if (devError) loop = false;
 8000a1e:	e792      	b.n	8000946 <doAPI+0x1d6>
 8000a20:	20000998 	.word	0x20000998
 8000a24:	200000d8 	.word	0x200000d8
 8000a28:	20000038 	.word	0x20000038
 8000a2c:	2000016e 	.word	0x2000016e
 8000a30:	20000044 	.word	0x20000044
 8000a34:	20000580 	.word	0x20000580
 8000a38:	2000002c 	.word	0x2000002c
 8000a3c:	20000108 	.word	0x20000108
 8000a40:	20000024 	.word	0x20000024
 8000a44:	080049d0 	.word	0x080049d0
 8000a48:	2000010c 	.word	0x2000010c
 8000a4c:	2000010b 	.word	0x2000010b
 8000a50:	20000158 	.word	0x20000158
 8000a54:	200000dc 	.word	0x200000dc
 8000a58:	08004984 	.word	0x08004984
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	20000118 	.word	0x20000118
 8000a64:	20000040 	.word	0x20000040
 8000a68:	08004960 	.word	0x08004960
 8000a6c:	20000164 	.word	0x20000164
 8000a70:	20000028 	.word	0x20000028
						tim = get_tmr10(_10s);
 8000a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a78:	f000 fad8 	bl	800102c <get_tmr10>
		if (devError) loop = false;
 8000a7c:	f8d9 3000 	ldr.w	r3, [r9]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f47f af60 	bne.w	8000946 <doAPI+0x1d6>
 8000a86:	4607      	mov	r7, r0
				if (apiCmd == apiProg) {
 8000a88:	f994 5000 	ldrsb.w	r5, [r4]
 8000a8c:	bb05      	cbnz	r5, 8000ad0 <doAPI+0x360>
					if (blkRdy) {
 8000a8e:	f89b 3000 	ldrb.w	r3, [fp]
						if (check_tmr10(tim)) devError |= devTimeout;
 8000a92:	4638      	mov	r0, r7
					if (blkRdy) {
 8000a94:	b32b      	cbz	r3, 8000ae2 <doAPI+0x372>
						if (!progBlk(apiAddrCur, vrem, blk_len)) {//prog is OK
 8000a96:	4bb7      	ldr	r3, [pc, #732]	; (8000d74 <doAPI+0x604>)
 8000a98:	f8da 0000 	ldr.w	r0, [sl]
 8000a9c:	6819      	ldr	r1, [r3, #0]
						blkRdy = 0;
 8000a9e:	f88b 5000 	strb.w	r5, [fp]
						if (!progBlk(apiAddrCur, vrem, blk_len)) {//prog is OK
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	f7ff fe1c 	bl	80006e0 <progBlk>
						ret += blk_len;
 8000aa8:	9b03      	ldr	r3, [sp, #12]
 8000aaa:	4443      	add	r3, r8
 8000aac:	ee08 7a10 	vmov	s16, r7
 8000ab0:	9303      	str	r3, [sp, #12]
						if (!progBlk(apiAddrCur, vrem, blk_len)) {//prog is OK
 8000ab2:	4605      	mov	r5, r0
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	f000 80dc 	beq.w	8000c72 <doAPI+0x502>
							devError |= devProg;
 8000aba:	f8d9 3000 	ldr.w	r3, [r9]
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);//OFF
 8000abe:	4aae      	ldr	r2, [pc, #696]	; (8000d78 <doAPI+0x608>)
							devError |= devProg;
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	f8c9 3000 	str.w	r3, [r9]
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);//OFF
 8000ac8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000acc:	6193      	str	r3, [r2, #24]
		if (devError) loop = false;
 8000ace:	e73a      	b.n	8000946 <doAPI+0x1d6>
				} else if (apiCmd == apiRead) {
 8000ad0:	2d01      	cmp	r5, #1
 8000ad2:	d011      	beq.n	8000af8 <doAPI+0x388>
				} else if (apiCmd == apiStop) {
 8000ad4:	2d02      	cmp	r5, #2
 8000ad6:	f43f af36 	beq.w	8000946 <doAPI+0x1d6>
				} else if (apiCmd == apiDone) {
 8000ada:	2d04      	cmp	r5, #4
 8000adc:	f47f aee6 	bne.w	80008ac <doAPI+0x13c>
 8000ae0:	e731      	b.n	8000946 <doAPI+0x1d6>
						if (check_tmr10(tim)) devError |= devTimeout;
 8000ae2:	f000 faa9 	bl	8001038 <check_tmr10>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	f47f af27 	bne.w	800093a <doAPI+0x1ca>
		if (devError) loop = false;
 8000aec:	f8d9 3000 	ldr.w	r3, [r9]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f47f af28 	bne.w	8000946 <doAPI+0x1d6>
 8000af6:	e7c7      	b.n	8000a88 <doAPI+0x318>
					if (dmaDone) {
 8000af8:	4ba0      	ldr	r3, [pc, #640]	; (8000d7c <doAPI+0x60c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
						if (check_tmr10(tim)) devError |= devTimeout;
 8000afc:	4638      	mov	r0, r7
					if (dmaDone) {
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0ef      	beq.n	8000ae2 <doAPI+0x372>
						if (HAL_UART_Transmit_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 8000b02:	4a9f      	ldr	r2, [pc, #636]	; (8000d80 <doAPI+0x610>)
						uartReady = false;
 8000b04:	4f9f      	ldr	r7, [pc, #636]	; (8000d84 <doAPI+0x614>)
						if (HAL_UART_Transmit_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 8000b06:	6810      	ldr	r0, [r2, #0]
 8000b08:	4a9a      	ldr	r2, [pc, #616]	; (8000d74 <doAPI+0x604>)
						dmaDone = 0;
 8000b0a:	2300      	movs	r3, #0
						uartReady = false;
 8000b0c:	703b      	strb	r3, [r7, #0]
						dmaDone = 0;
 8000b0e:	4f9b      	ldr	r7, [pc, #620]	; (8000d7c <doAPI+0x60c>)
						if (HAL_UART_Transmit_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 8000b10:	6811      	ldr	r1, [r2, #0]
						dmaDone = 0;
 8000b12:	703b      	strb	r3, [r7, #0]
						if (HAL_UART_Transmit_DMA(uartPort, vrem, blk_len) != HAL_OK) {
 8000b14:	fa1f f288 	uxth.w	r2, r8
 8000b18:	f002 fe0c 	bl	8003734 <HAL_UART_Transmit_DMA>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	f47f af78 	bne.w	8000a12 <doAPI+0x2a2>
							blk_cnt++;
 8000b22:	4a99      	ldr	r2, [pc, #612]	; (8000d88 <doAPI+0x618>)
 8000b24:	6813      	ldr	r3, [r2, #0]
	HAL_Delay(1);
 8000b26:	4628      	mov	r0, r5
							blk_cnt++;
 8000b28:	3301      	adds	r3, #1
 8000b2a:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 8000b2c:	f001 f9be 	bl	8001eac <HAL_Delay>
							tim = get_tmr10(_10s);
 8000b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b34:	f000 fa7a 	bl	800102c <get_tmr10>
		if (devError) loop = false;
 8000b38:	f8d9 3000 	ldr.w	r3, [r9]
							tim = get_tmr10(_10s);
 8000b3c:	4605      	mov	r5, r0
		if (devError) loop = false;
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f47f af01 	bne.w	8000946 <doAPI+0x1d6>
				if (apiCmd == apiRead) {
 8000b44:	f994 3000 	ldrsb.w	r3, [r4]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	f47f aead 	bne.w	80008a8 <doAPI+0x138>
					if (uartReady) {
 8000b4e:	4f8d      	ldr	r7, [pc, #564]	; (8000d84 <doAPI+0x614>)
 8000b50:	783b      	ldrb	r3, [r7, #0]
						if (check_tmr10(tim)) devError |= devTimeout;
 8000b52:	4628      	mov	r0, r5
					if (uartReady) {
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 80ca 	beq.w	8000cee <doAPI+0x57e>
						uartReady = false;
 8000b5a:	2100      	movs	r1, #0
						memset(tmp, 0, sizeof(tmp));
 8000b5c:	2240      	movs	r2, #64	; 0x40
 8000b5e:	488b      	ldr	r0, [pc, #556]	; (8000d8c <doAPI+0x61c>)
						uartReady = false;
 8000b60:	7039      	strb	r1, [r7, #0]
						blkRdy = 0;
 8000b62:	f88b 1000 	strb.w	r1, [fp]
						memset(tmp, 0, sizeof(tmp));
 8000b66:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b68:	f003 f9be 	bl	8003ee8 <memset>
						if (HAL_UART_Receive_DMA(uartPort, (uint8_t *)tmp, (uint16_t)strlen(_next)) != HAL_OK) {
 8000b6c:	4b88      	ldr	r3, [pc, #544]	; (8000d90 <doAPI+0x620>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f7ff fb36 	bl	80001e0 <strlen>
 8000b74:	4b82      	ldr	r3, [pc, #520]	; (8000d80 <doAPI+0x610>)
 8000b76:	4985      	ldr	r1, [pc, #532]	; (8000d8c <doAPI+0x61c>)
 8000b78:	b282      	uxth	r2, r0
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	f003 f94a 	bl	8003e14 <HAL_UART_Receive_DMA>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	f47f af46 	bne.w	8000a12 <doAPI+0x2a2>
							tim = get_tmr10(_10s);
 8000b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8a:	f000 fa4f 	bl	800102c <get_tmr10>
		if (devError) loop = false;
 8000b8e:	f8d9 3000 	ldr.w	r3, [r9]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f47f aed7 	bne.w	8000946 <doAPI+0x1d6>
 8000b98:	4607      	mov	r7, r0
				if (apiCmd == apiRead) {
 8000b9a:	f994 5000 	ldrsb.w	r5, [r4]
 8000b9e:	2d01      	cmp	r5, #1
 8000ba0:	f43f ae95 	beq.w	80008ce <doAPI+0x15e>
				} else if (apiCmd == apiDone) {
 8000ba4:	3d04      	subs	r5, #4
 8000ba6:	bf18      	it	ne
 8000ba8:	2501      	movne	r5, #1
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000baa:	4638      	mov	r0, r7
 8000bac:	f000 fa44 	bl	8001038 <check_tmr10>
 8000bb0:	f8d9 3000 	ldr.w	r3, [r9]
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	f47f aec2 	bne.w	800093e <doAPI+0x1ce>
		if (devError) loop = false;
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f47f aec3 	bne.w	8000946 <doAPI+0x1d6>
	while (loop) {
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d1ea      	bne.n	8000b9a <doAPI+0x42a>
 8000bc4:	e6bf      	b.n	8000946 <doAPI+0x1d6>
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 8000bc6:	4a6c      	ldr	r2, [pc, #432]	; (8000d78 <doAPI+0x608>)
					dmaDone = 0;
 8000bc8:	4f6c      	ldr	r7, [pc, #432]	; (8000d7c <doAPI+0x60c>)
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_Delay(1);
 8000bce:	4628      	mov	r0, r5
					_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);//ON
 8000bd0:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 8000bd2:	f001 f96b 	bl	8001eac <HAL_Delay>
					if (HAL_DMA_Start_IT(dmaMem, apiAddrCur, (uint32_t)vrem, blk_len) != HAL_OK) {
 8000bd6:	4b6f      	ldr	r3, [pc, #444]	; (8000d94 <doAPI+0x624>)
 8000bd8:	4a66      	ldr	r2, [pc, #408]	; (8000d74 <doAPI+0x604>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	f8da 1000 	ldr.w	r1, [sl]
					dmaDone = 0;
 8000be2:	2500      	movs	r5, #0
					if (HAL_DMA_Start_IT(dmaMem, apiAddrCur, (uint32_t)vrem, blk_len) != HAL_OK) {
 8000be4:	4643      	mov	r3, r8
					dmaDone = 0;
 8000be6:	703d      	strb	r5, [r7, #0]
					if (HAL_DMA_Start_IT(dmaMem, apiAddrCur, (uint32_t)vrem, blk_len) != HAL_OK) {
 8000be8:	f001 fa80 	bl	80020ec <HAL_DMA_Start_IT>
 8000bec:	2800      	cmp	r0, #0
 8000bee:	f43f af41 	beq.w	8000a74 <doAPI+0x304>
						devError |= devDma;
 8000bf2:	f8d9 3000 	ldr.w	r3, [r9]
 8000bf6:	f043 030b 	orr.w	r3, r3, #11
 8000bfa:	f8c9 3000 	str.w	r3, [r9]
		if (devError) loop = false;
 8000bfe:	e6a2      	b.n	8000946 <doAPI+0x1d6>
						if (action == do_prog) {
 8000c00:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <doAPI+0x628>)
 8000c02:	920a      	str	r2, [sp, #40]	; 0x28
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	f000 80a9 	beq.w	8000d5e <doAPI+0x5ee>
						} else action |= do_read;
 8000c0c:	4a62      	ldr	r2, [pc, #392]	; (8000d98 <doAPI+0x628>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	7013      	strb	r3, [r2, #0]
						sprintf(tmp, "ready:0x%08X:0x%08X%s", fsize, fcrc, eol);
 8000c14:	4b61      	ldr	r3, [pc, #388]	; (8000d9c <doAPI+0x62c>)
 8000c16:	4962      	ldr	r1, [pc, #392]	; (8000da0 <doAPI+0x630>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	e9dd 7305 	ldrd	r7, r3, [sp, #20]
 8000c20:	485a      	ldr	r0, [pc, #360]	; (8000d8c <doAPI+0x61c>)
						apiAddrCur = fadr;
 8000c22:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8000dc8 <doAPI+0x658>
						sprintf(tmp, "ready:0x%08X:0x%08X%s", fsize, fcrc, eol);
 8000c26:	463a      	mov	r2, r7
 8000c28:	f003 fa30 	bl	800408c <siprintf>
						Report(NULL, false, "%s", tmp);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <doAPI+0x61c>)
 8000c30:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <doAPI+0x634>)
 8000c32:	4608      	mov	r0, r1
 8000c34:	f000 fdba 	bl	80017ac <Report>
	HAL_Delay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f001 f937 	bl	8001eac <HAL_Delay>
						blk_cnt = 0;
 8000c3e:	4b52      	ldr	r3, [pc, #328]	; (8000d88 <doAPI+0x618>)
						apiLen = fsize;
 8000c40:	4a59      	ldr	r2, [pc, #356]	; (8000da8 <doAPI+0x638>)
						apiAddrCur = fadr;
 8000c42:	9907      	ldr	r1, [sp, #28]
						apiLen = fsize;
 8000c44:	6017      	str	r7, [r2, #0]
						blk_cnt = 0;
 8000c46:	2500      	movs	r5, #0
						tim = get_tmr10(_5s);
 8000c48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
						blk_cnt = 0;
 8000c4c:	601d      	str	r5, [r3, #0]
						apiAddrCur = fadr;
 8000c4e:	f8ca 1000 	str.w	r1, [sl]
						tim = get_tmr10(_5s);
 8000c52:	f000 f9eb 	bl	800102c <get_tmr10>
		if (devError) loop = false;
 8000c56:	f8d9 3000 	ldr.w	r3, [r9]
						tim = get_tmr10(_5s);
 8000c5a:	4607      	mov	r7, r0
		if (devError) loop = false;
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d031      	beq.n	8000cc4 <doAPI+0x554>
	startAPI = false;
 8000c60:	4a52      	ldr	r2, [pc, #328]	; (8000dac <doAPI+0x63c>)
	blkRdy = 1;
 8000c62:	2301      	movs	r3, #1
	startAPI = false;
 8000c64:	7015      	strb	r5, [r2, #0]
	blkRdy = 1;
 8000c66:	f88b 3000 	strb.w	r3, [fp]
	if (!dstop) {
 8000c6a:	e5a6      	b.n	80007ba <doAPI+0x4a>
							blk_len = MAX_VREM_BUF;
 8000c6c:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8000c70:	e5d2      	b.n	8000818 <doAPI+0xa8>
							api_crc = crc32(api_crc, vrem, blk_len);
 8000c72:	4a40      	ldr	r2, [pc, #256]	; (8000d74 <doAPI+0x604>)
							apiAddrCur += blk_len;
 8000c74:	f8da 3000 	ldr.w	r3, [sl]
							api_crc = crc32(api_crc, vrem, blk_len);
 8000c78:	6811      	ldr	r1, [r2, #0]
 8000c7a:	4a4d      	ldr	r2, [pc, #308]	; (8000db0 <doAPI+0x640>)
							apiAddrCur += blk_len;
 8000c7c:	4443      	add	r3, r8
							api_crc = crc32(api_crc, vrem, blk_len);
 8000c7e:	6810      	ldr	r0, [r2, #0]
							apiAddrCur += blk_len;
 8000c80:	f8ca 3000 	str.w	r3, [sl]
							api_crc = crc32(api_crc, vrem, blk_len);
 8000c84:	4617      	mov	r7, r2
 8000c86:	4642      	mov	r2, r8
 8000c88:	f7ff fc7e 	bl	8000588 <crc32>
							if (ret < file_size) {
 8000c8c:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <doAPI+0x644>)
 8000c8e:	9903      	ldr	r1, [sp, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
							api_crc = crc32(api_crc, vrem, blk_len);
 8000c92:	6038      	str	r0, [r7, #0]
							if (ret < file_size) {
 8000c94:	428b      	cmp	r3, r1
 8000c96:	460a      	mov	r2, r1
 8000c98:	f240 8098 	bls.w	8000dcc <doAPI+0x65c>
								if ((ret + blk_len) > file_size) {
 8000c9c:	4442      	add	r2, r8
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d201      	bcs.n	8000ca6 <doAPI+0x536>
									blk_len = file_size - ret;
 8000ca2:	eba3 0801 	sub.w	r8, r3, r1
								Report(NULL, false, "ready%s", eol);
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <doAPI+0x62c>)
								startAPI = true;
 8000ca8:	4f40      	ldr	r7, [pc, #256]	; (8000dac <doAPI+0x63c>)
								Report(NULL, false, "ready%s", eol);
 8000caa:	4a43      	ldr	r2, [pc, #268]	; (8000db8 <doAPI+0x648>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4608      	mov	r0, r1
								startAPI = true;
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	703d      	strb	r5, [r7, #0]
								Report(NULL, false, "ready%s", eol);
 8000cb6:	f000 fd79 	bl	80017ac <Report>
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);//OFF
 8000cba:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <doAPI+0x608>)
 8000cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	e676      	b.n	80009b2 <doAPI+0x242>
						dstop = false;
 8000cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8000cc6:	9b05      	ldr	r3, [sp, #20]
 8000cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ccc:	bf28      	it	cs
 8000cce:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8000cd2:	4698      	mov	r8, r3
 8000cd4:	e65b      	b.n	800098e <doAPI+0x21e>
						if (check_tmr10(tim)) devError |= devTimeout;
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	f000 f9ae 	bl	8001038 <check_tmr10>
 8000cdc:	4605      	mov	r5, r0
 8000cde:	b188      	cbz	r0, 8000d04 <doAPI+0x594>
 8000ce0:	f8d9 3000 	ldr.w	r3, [r9]
 8000ce4:	f043 0306 	orr.w	r3, r3, #6
 8000ce8:	f8c9 3000 	str.w	r3, [r9]
 8000cec:	e75d      	b.n	8000baa <doAPI+0x43a>
						if (check_tmr10(tim)) devError |= devTimeout;
 8000cee:	f000 f9a3 	bl	8001038 <check_tmr10>
 8000cf2:	f8d9 3000 	ldr.w	r3, [r9]
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	f47f ae21 	bne.w	800093e <doAPI+0x1ce>
		if (devError) loop = false;
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f47f ae22 	bne.w	8000946 <doAPI+0x1d6>
 8000d02:	e71f      	b.n	8000b44 <doAPI+0x3d4>
 8000d04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d06:	e750      	b.n	8000baa <doAPI+0x43a>
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000d08:	f000 f996 	bl	8001038 <check_tmr10>
 8000d0c:	f8d9 3000 	ldr.w	r3, [r9]
 8000d10:	2800      	cmp	r0, #0
 8000d12:	f47f ae14 	bne.w	800093e <doAPI+0x1ce>
		if (devError) loop = false;
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f47f ae15 	bne.w	8000946 <doAPI+0x1d6>
								blk_len = hdr.len - txRet;
 8000d1c:	9b04      	ldr	r3, [sp, #16]
 8000d1e:	eba5 0803 	sub.w	r8, r5, r3
 8000d22:	e636      	b.n	8000992 <doAPI+0x222>
							*aRet = txRet;
 8000d24:	9b08      	ldr	r3, [sp, #32]
							memset(tmp, 0, sizeof(tmp));
 8000d26:	4819      	ldr	r0, [pc, #100]	; (8000d8c <doAPI+0x61c>)
							*aRet = txRet;
 8000d28:	461a      	mov	r2, r3
 8000d2a:	9b04      	ldr	r3, [sp, #16]
 8000d2c:	6013      	str	r3, [r2, #0]
							memset(tmp, 0, sizeof(tmp));
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2240      	movs	r2, #64	; 0x40
 8000d32:	f003 f8d9 	bl	8003ee8 <memset>
							if (HAL_UART_Receive_DMA(uartPort, (uint8_t *)tmp, (uint16_t)strlen(_done)) != HAL_OK) {
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <doAPI+0x64c>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	f7ff fa51 	bl	80001e0 <strlen>
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <doAPI+0x610>)
 8000d40:	4912      	ldr	r1, [pc, #72]	; (8000d8c <doAPI+0x61c>)
 8000d42:	b282      	uxth	r2, r0
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	f003 f865 	bl	8003e14 <HAL_UART_Receive_DMA>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d05a      	beq.n	8000e04 <doAPI+0x694>
								devError |= devUART;
 8000d4e:	f8d9 3000 	ldr.w	r3, [r9]
 8000d52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	f8c9 3000 	str.w	r3, [r9]
 8000d5c:	e725      	b.n	8000baa <doAPI+0x43a>
							fsize = file_size;
 8000d5e:	4915      	ldr	r1, [pc, #84]	; (8000db4 <doAPI+0x644>)
							fcrc = file_crc;
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <doAPI+0x650>)
							fadr = apiAddr;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <doAPI+0x654>)
							fsize = file_size;
 8000d64:	6809      	ldr	r1, [r1, #0]
							fcrc = file_crc;
 8000d66:	6812      	ldr	r2, [r2, #0]
							fadr = apiAddr;
 8000d68:	681b      	ldr	r3, [r3, #0]
							fsize = file_size;
 8000d6a:	9105      	str	r1, [sp, #20]
							fcrc = file_crc;
 8000d6c:	9206      	str	r2, [sp, #24]
							fadr = apiAddr;
 8000d6e:	9307      	str	r3, [sp, #28]
 8000d70:	e750      	b.n	8000c14 <doAPI+0x4a4>
 8000d72:	bf00      	nop
 8000d74:	20000158 	.word	0x20000158
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	200000fc 	.word	0x200000fc
 8000d80:	20000044 	.word	0x20000044
 8000d84:	20000048 	.word	0x20000048
 8000d88:	200000f8 	.word	0x200000f8
 8000d8c:	20000118 	.word	0x20000118
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	2000003c 	.word	0x2000003c
 8000d98:	200000d8 	.word	0x200000d8
 8000d9c:	20000040 	.word	0x20000040
 8000da0:	08004948 	.word	0x08004948
 8000da4:	08004ed8 	.word	0x08004ed8
 8000da8:	200000f0 	.word	0x200000f0
 8000dac:	2000016e 	.word	0x2000016e
 8000db0:	200000f4 	.word	0x200000f4
 8000db4:	20000108 	.word	0x20000108
 8000db8:	08004960 	.word	0x08004960
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	20000104 	.word	0x20000104
 8000dc4:	20000024 	.word	0x20000024
 8000dc8:	20000028 	.word	0x20000028
								HAL_UART_DMAStop(uartPort);
 8000dcc:	4c37      	ldr	r4, [pc, #220]	; (8000eac <doAPI+0x73c>)
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	f002 fcf2 	bl	80037b8 <HAL_UART_DMAStop>
								startAPI = false;
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <doAPI+0x740>)
								HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8000dd6:	4937      	ldr	r1, [pc, #220]	; (8000eb4 <doAPI+0x744>)
 8000dd8:	6820      	ldr	r0, [r4, #0]
								startAPI = false;
 8000dda:	701d      	strb	r5, [r3, #0]
								HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f002 fc7f 	bl	80036e0 <HAL_UART_Receive_IT>
								tim = get_tmr10(_10s);
 8000de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de6:	f000 f921 	bl	800102c <get_tmr10>
						_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_RESET);//OFF
 8000dea:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <doAPI+0x748>)
 8000dec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000df0:	6193      	str	r3, [r2, #24]
		if (devError) loop = false;
 8000df2:	f8d9 3000 	ldr.w	r3, [r9]
 8000df6:	462f      	mov	r7, r5
								tim = get_tmr10(_10s);
 8000df8:	4605      	mov	r5, r0
		if (devError) loop = false;
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d14f      	bne.n	8000e9e <doAPI+0x72e>
								dstop = true;
 8000dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e00:	9309      	str	r3, [sp, #36]	; 0x24
 8000e02:	e4ee      	b.n	80007e2 <doAPI+0x72>
								tim = get_tmr10(_6s);
 8000e04:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000e08:	f000 f910 	bl	800102c <get_tmr10>
 8000e0c:	4604      	mov	r4, r0
				if (check_tmr10(tim)) devError |= devTimeout;//devError |= devCmd;
 8000e0e:	f000 f913 	bl	8001038 <check_tmr10>
 8000e12:	f8d9 3000 	ldr.w	r3, [r9]
 8000e16:	2800      	cmp	r0, #0
 8000e18:	f47f ad91 	bne.w	800093e <doAPI+0x1ce>
		if (devError) loop = false;
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f47f ad92 	bne.w	8000946 <doAPI+0x1d6>
				if (blkRdy) {
 8000e22:	f89b 3000 	ldrb.w	r3, [fp]
				if (check_tmr10(tim)) devError |= devTimeout;
 8000e26:	4620      	mov	r0, r4
				if (blkRdy) {
 8000e28:	b333      	cbz	r3, 8000e78 <doAPI+0x708>
					HAL_UART_DMAStop(uartPort);
 8000e2a:	4d20      	ldr	r5, [pc, #128]	; (8000eac <doAPI+0x73c>)
					uartReady = false;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <doAPI+0x74c>)
					HAL_UART_DMAStop(uartPort);
 8000e2e:	6828      	ldr	r0, [r5, #0]
					blkRdy = 0;
 8000e30:	2400      	movs	r4, #0
					uartReady = false;
 8000e32:	701c      	strb	r4, [r3, #0]
					blkRdy = 0;
 8000e34:	f88b 4000 	strb.w	r4, [fp]
					HAL_UART_DMAStop(uartPort);
 8000e38:	f002 fcbe 	bl	80037b8 <HAL_UART_DMAStop>
					startAPI = false;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <doAPI+0x740>)
					HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8000e3e:	491d      	ldr	r1, [pc, #116]	; (8000eb4 <doAPI+0x744>)
 8000e40:	6828      	ldr	r0, [r5, #0]
					startAPI = false;
 8000e42:	701c      	strb	r4, [r3, #0]
					HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f002 fc4b 	bl	80036e0 <HAL_UART_Receive_IT>
					if ((uk = strstr(tmp, "\r\n")) != NULL) *uk = '\0';
 8000e4a:	491d      	ldr	r1, [pc, #116]	; (8000ec0 <doAPI+0x750>)
 8000e4c:	481d      	ldr	r0, [pc, #116]	; (8000ec4 <doAPI+0x754>)
 8000e4e:	f003 f94a 	bl	80040e6 <strstr>
 8000e52:	b100      	cbz	r0, 8000e56 <doAPI+0x6e6>
 8000e54:	7004      	strb	r4, [r0, #0]
	HAL_Delay(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f001 f828 	bl	8001eac <HAL_Delay>
		if (devError) loop = false;
 8000e5c:	f8d9 3000 	ldr.w	r3, [r9]
	blkRdy = 1;
 8000e60:	2201      	movs	r2, #1
		if (devError) loop = false;
 8000e62:	b98b      	cbnz	r3, 8000e88 <doAPI+0x718>
	startAPI = false;
 8000e64:	4912      	ldr	r1, [pc, #72]	; (8000eb0 <doAPI+0x740>)
}
 8000e66:	9803      	ldr	r0, [sp, #12]
	startAPI = false;
 8000e68:	700b      	strb	r3, [r1, #0]
	blkRdy = 1;
 8000e6a:	f88b 2000 	strb.w	r2, [fp]
}
 8000e6e:	b00d      	add	sp, #52	; 0x34
 8000e70:	ecbd 8b02 	vpop	{d8}
 8000e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (check_tmr10(tim)) devError |= devTimeout;
 8000e78:	f000 f8de 	bl	8001038 <check_tmr10>
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	f47f ad5c 	bne.w	800093a <doAPI+0x1ca>
		if (devError) loop = false;
 8000e82:	f8d9 3000 	ldr.w	r3, [r9]
 8000e86:	e7c9      	b.n	8000e1c <doAPI+0x6ac>
}
 8000e88:	9803      	ldr	r0, [sp, #12]
	blkRdy = 1;
 8000e8a:	f88b 2000 	strb.w	r2, [fp]
	startAPI = false;
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <doAPI+0x740>)
 8000e90:	2300      	movs	r3, #0
 8000e92:	7013      	strb	r3, [r2, #0]
}
 8000e94:	b00d      	add	sp, #52	; 0x34
 8000e96:	ecbd 8b02 	vpop	{d8}
 8000e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	startAPI = false;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <doAPI+0x740>)
	blkRdy = 1;
 8000ea0:	2301      	movs	r3, #1
	startAPI = false;
 8000ea2:	7017      	strb	r7, [r2, #0]
	blkRdy = 1;
 8000ea4:	f88b 3000 	strb.w	r3, [fp]
	if (!dstop) {
 8000ea8:	e490      	b.n	80007cc <doAPI+0x5c>
 8000eaa:	bf00      	nop
 8000eac:	20000044 	.word	0x20000044
 8000eb0:	2000016e 	.word	0x2000016e
 8000eb4:	20000580 	.word	0x20000580
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	20000048 	.word	0x20000048
 8000ec0:	08004984 	.word	0x08004984
 8000ec4:	20000118 	.word	0x20000118

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	2300      	movs	r3, #0
{
 8000ecc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000ed2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000eda:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4920      	ldr	r1, [pc, #128]	; (8000f60 <SystemClock_Config+0x98>)
 8000ee0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee2:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee6:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000eec:	6408      	str	r0, [r1, #64]	; 0x40
 8000eee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ef0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000ef4:	9101      	str	r1, [sp, #4]
 8000ef6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	6813      	ldr	r3, [r2, #0]
 8000f04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f08:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0a:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f14:	200c      	movs	r0, #12
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f18:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f20:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f22:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f24:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f26:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f2a:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2e:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f30:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f001 fdd7 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000f36:	b108      	cbz	r0, 8000f3c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f44:	a803      	add	r0, sp, #12
 8000f46:	2103      	movs	r1, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	e9cd 4304 	strd	r4, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f50:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f52:	f001 ffe3 	bl	8002f1c <HAL_RCC_ClockConfig>
 8000f56:	b108      	cbz	r0, 8000f5c <SystemClock_Config+0x94>
 8000f58:	b672      	cpsid	i
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <SystemClock_Config+0x92>
}
 8000f5c:	b015      	add	sp, #84	; 0x54
 8000f5e:	bd30      	pop	{r4, r5, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40007000 	.word	0x40007000

08000f68 <hex2bin>:
{
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	b085      	sub	sp, #20
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8000f6c:	2400      	movs	r4, #0
 8000f6e:	2330      	movs	r3, #48	; 0x30
 8000f70:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8000f74:	f8ad 4004 	strh.w	r4, [sp, #4]
    if (!len || !buf) return ret;
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	d053      	beq.n	8001024 <hex2bin+0xbc>
 8000f7c:	b3c0      	cbz	r0, 8000ff0 <hex2bin+0x88>
    if (len > 8) len = 8;
 8000f7e:	2908      	cmp	r1, #8
 8000f80:	460a      	mov	r2, r1
 8000f82:	bf28      	it	cs
 8000f84:	2208      	movcs	r2, #8
    k = 8 - len;
 8000f86:	f1c2 0308 	rsb	r3, r2, #8
    memcpy(&mas[k], buf, len);
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	a802      	add	r0, sp, #8
 8000f8e:	fa50 f083 	uxtab	r0, r0, r3
 8000f92:	f002 ff9b 	bl	8003ecc <memcpy>
    k = j = 0;
 8000f96:	4627      	mov	r7, r4
uint32_t dword, ret = 0;
 8000f98:	4620      	mov	r0, r4
 8000f9a:	aa02      	add	r2, sp, #8
    memcpy(&mas[k], buf, len);
 8000f9c:	2118      	movs	r1, #24
        jk = j + 2;
 8000f9e:	1cbc      	adds	r4, r7, #2
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4694      	mov	ip, r2
 8000fa4:	b2e7      	uxtb	r7, r4
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8000fa6:	f81c 6b01 	ldrb.w	r6, [ip], #1
 8000faa:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
 8000fae:	b2ed      	uxtb	r5, r5
 8000fb0:	f10d 0e10 	add.w	lr, sp, #16
 8000fb4:	f003 0401 	and.w	r4, r3, #1
 8000fb8:	2d09      	cmp	r5, #9
 8000fba:	4474      	add	r4, lr
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8000fbc:	f1a6 0e61 	sub.w	lr, r6, #97	; 0x61
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8000fc0:	d818      	bhi.n	8000ff4 <hex2bin+0x8c>
 8000fc2:	f804 5c0c 	strb.w	r5, [r4, #-12]
        for (i = j; i < jk; i++) {
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	42bb      	cmp	r3, r7
 8000fcc:	d1eb      	bne.n	8000fa6 <hex2bin+0x3e>
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8000fce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000fd2:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
        ret |= (dword << 8*(4 - k - 1));
 8000fde:	408b      	lsls	r3, r1
    while (k < 4) {
 8000fe0:	2f08      	cmp	r7, #8
 8000fe2:	f102 0202 	add.w	r2, r2, #2
        ret |= (dword << 8*(4 - k - 1));
 8000fe6:	ea40 0003 	orr.w	r0, r0, r3
    while (k < 4) {
 8000fea:	f1a1 0108 	sub.w	r1, r1, #8
 8000fee:	d1d6      	bne.n	8000f9e <hex2bin+0x36>
}
 8000ff0:	b005      	add	sp, #20
 8000ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8000ff4:	ad04      	add	r5, sp, #16
 8000ff6:	f003 0401 	and.w	r4, r3, #1
 8000ffa:	f1be 0f05 	cmp.w	lr, #5
 8000ffe:	442c      	add	r4, r5
 8001000:	f1a6 0e57 	sub.w	lr, r6, #87	; 0x57
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001004:	f1a6 0541 	sub.w	r5, r6, #65	; 0x41
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8001008:	d802      	bhi.n	8001010 <hex2bin+0xa8>
 800100a:	f804 ec0c 	strb.w	lr, [r4, #-12]
 800100e:	e7da      	b.n	8000fc6 <hex2bin+0x5e>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001010:	2d05      	cmp	r5, #5
 8001012:	f003 0401 	and.w	r4, r3, #1
 8001016:	d8d6      	bhi.n	8000fc6 <hex2bin+0x5e>
 8001018:	ad04      	add	r5, sp, #16
 800101a:	442c      	add	r4, r5
 800101c:	3e37      	subs	r6, #55	; 0x37
 800101e:	f804 6c0c 	strb.w	r6, [r4, #-12]
 8001022:	e7d0      	b.n	8000fc6 <hex2bin+0x5e>
    if (!len || !buf) return ret;
 8001024:	4608      	mov	r0, r1
}
 8001026:	b005      	add	sp, #20
 8001028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102a:	bf00      	nop

0800102c <get_tmr10>:
	return mSecCounter;
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <get_tmr10+0x8>)
	return (get_mSecCounter() + ms);
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4418      	add	r0, r3
 8001032:	4770      	bx	lr
 8001034:	20000168 	.word	0x20000168

08001038 <check_tmr10>:
	return mSecCounter;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <check_tmr10+0x10>)
	return (get_mSecCounter() >= ms ? true : false);
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4283      	cmp	r3, r0
 800103e:	bf34      	ite	cc
 8001040:	2000      	movcc	r0, #0
 8001042:	2001      	movcs	r0, #1
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000168 	.word	0x20000168

0800104c <errLedOn>:
{
 800104c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_SET);//LED OFF
 800104e:	2201      	movs	r2, #1
{
 8001050:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_SET);//LED OFF
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	4808      	ldr	r0, [pc, #32]	; (8001078 <errLedOn+0x2c>)
 8001058:	f001 fd36 	bl	8002ac8 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 800105c:	2019      	movs	r0, #25
 800105e:	f000 ff25 	bl	8001eac <HAL_Delay>
	if (on) HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_RESET);//LED ON
 8001062:	b904      	cbnz	r4, 8001066 <errLedOn+0x1a>
}
 8001064:	bd10      	pop	{r4, pc}
 8001066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (on) HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_RESET);//LED ON
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <errLedOn+0x2c>)
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001072:	f001 bd29 	b.w	8002ac8 <HAL_GPIO_WritePin>
 8001076:	bf00      	nop
 8001078:	40020400 	.word	0x40020400

0800107c <main>:
{
 800107c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	2400      	movs	r4, #0
{
 8001082:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8001084:	f000 fee6 	bl	8001e54 <HAL_Init>
  SystemClock_Config();
 8001088:	f7ff ff1e 	bl	8000ec8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8001090:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	4e9d      	ldr	r6, [pc, #628]	; (800130c <main+0x290>)
 8001096:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	9413      	str	r4, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|MQ_ALARM_Pin|PWRC_BLE_Pin, GPIO_PIN_RESET);
 800109c:	4f9c      	ldr	r7, [pc, #624]	; (8001310 <main+0x294>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800109e:	489d      	ldr	r0, [pc, #628]	; (8001314 <main+0x298>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6333      	str	r3, [r6, #48]	; 0x30
 80010a6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	9309      	str	r3, [sp, #36]	; 0x24
 80010ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b0:	940a      	str	r4, [sp, #40]	; 0x28
 80010b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b8:	6333      	str	r3, [r6, #48]	; 0x30
 80010ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c0:	930a      	str	r3, [sp, #40]	; 0x28
 80010c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80010c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6333      	str	r3, [r6, #48]	; 0x30
 80010ce:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80010d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	940c      	str	r4, [sp, #48]	; 0x30
 80010da:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6333      	str	r3, [r6, #48]	; 0x30
 80010e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010ea:	4622      	mov	r2, r4
 80010ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010f2:	f001 fce9 	bl	8002ac8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|MQ_ALARM_Pin|PWRC_BLE_Pin, GPIO_PIN_RESET);
 80010f6:	4622      	mov	r2, r4
 80010f8:	4638      	mov	r0, r7
 80010fa:	f241 1102 	movw	r1, #4354	; 0x1102
 80010fe:	f001 fce3 	bl	8002ac8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ERR_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 8001102:	4638      	mov	r0, r7
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 800110a:	f001 fcdd 	bl	8002ac8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	4881      	ldr	r0, [pc, #516]	; (8001318 <main+0x29c>)
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	f001 fcd7 	bl	8002ac8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = LED_Pin;
 800111c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001120:	487c      	ldr	r0, [pc, #496]	; (8001314 <main+0x298>)
 8001122:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800112c:	f001 fbda 	bl	80028e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 8001130:	4879      	ldr	r0, [pc, #484]	; (8001318 <main+0x29c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 8001134:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001136:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 800113e:	f001 fbd1 	bl	80028e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001142:	a90f      	add	r1, sp, #60	; 0x3c
 8001144:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = digMQ_Pin;
 8001146:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001150:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001154:	f001 fbc6 	bl	80028e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001158:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(digMQ_GPIO_Port, &GPIO_InitStruct);
 800115c:	a90f      	add	r1, sp, #60	; 0x3c
 800115e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001160:	e9cd 830f 	strd	r8, r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(digMQ_GPIO_Port, &GPIO_InitStruct);
 8001166:	f001 fbbd 	bl	80028e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ERR_Pin|LCD_DC_Pin;
 800116a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	a90f      	add	r1, sp, #60	; 0x3c
 8001170:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ERR_Pin|LCD_DC_Pin;
 8001172:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001174:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001178:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f001 fbb3 	bl	80028e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MQ_ALARM_Pin|PWRC_BLE_Pin;
 800117e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	a90f      	add	r1, sp, #60	; 0x3c
 8001184:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = MQ_ALARM_Pin|PWRC_BLE_Pin;
 8001186:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	e9cd 5910 	strd	r5, r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f001 fba9 	bl	80028e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001192:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001196:	4860      	ldr	r0, [pc, #384]	; (8001318 <main+0x29c>)
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001198:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800119a:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119c:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011a0:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f001 fb9f 	bl	80028e4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011a6:	4622      	mov	r2, r4
 80011a8:	4621      	mov	r1, r4
 80011aa:	2008      	movs	r0, #8
 80011ac:	f000 fea4 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011b0:	2008      	movs	r0, #8
 80011b2:	f000 fed9 	bl	8001f68 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	9407      	str	r4, [sp, #28]
 80011b8:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80011ba:	4858      	ldr	r0, [pc, #352]	; (800131c <main+0x2a0>)
 80011bc:	4a58      	ldr	r2, [pc, #352]	; (8001320 <main+0x2a4>)
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80011be:	6044      	str	r4, [r0, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6333      	str	r3, [r6, #48]	; 0x30
 80011c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c8:	6144      	str	r4, [r0, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	9307      	str	r3, [sp, #28]
 80011d0:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	9408      	str	r4, [sp, #32]
 80011d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d6:	6184      	str	r4, [r0, #24]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011dc:	6333      	str	r3, [r6, #48]	; 0x30
 80011de:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80011e0:	61c4      	str	r4, [r0, #28]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	9e08      	ldr	r6, [sp, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ea:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80011ee:	f04f 0e80 	mov.w	lr, #128	; 0x80
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80011f2:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80011f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80011fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011fe:	2603      	movs	r6, #3
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001200:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001204:	e9c0 ec02 	strd	lr, ip, [r0, #8]
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8001208:	6002      	str	r2, [r0, #0]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800120a:	6101      	str	r1, [r0, #16]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800120c:	6203      	str	r3, [r0, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800120e:	6286      	str	r6, [r0, #40]	; 0x28
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001210:	f000 fed2 	bl	8001fb8 <HAL_DMA_Init>
 8001214:	b108      	cbz	r0, 800121a <main+0x19e>
 8001216:	b672      	cpsid	i
  while (1)
 8001218:	e7fe      	b.n	8001218 <main+0x19c>
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800121a:	4604      	mov	r4, r0
 800121c:	4602      	mov	r2, r0
 800121e:	4629      	mov	r1, r5
 8001220:	200b      	movs	r0, #11
 8001222:	f000 fe69 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001226:	200b      	movs	r0, #11
 8001228:	f000 fe9e 	bl	8001f68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 800122c:	4622      	mov	r2, r4
 800122e:	4629      	mov	r1, r5
 8001230:	200c      	movs	r0, #12
 8001232:	f000 fe61 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001236:	200c      	movs	r0, #12
 8001238:	f000 fe96 	bl	8001f68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800123c:	4622      	mov	r2, r4
 800123e:	2105      	movs	r1, #5
 8001240:	200f      	movs	r0, #15
 8001242:	f000 fe59 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001246:	200f      	movs	r0, #15
 8001248:	f000 fe8e 	bl	8001f68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 4, 0);
 800124c:	4622      	mov	r2, r4
 800124e:	4641      	mov	r1, r8
 8001250:	2038      	movs	r0, #56	; 0x38
 8001252:	f000 fe51 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001256:	2038      	movs	r0, #56	; 0x38
 8001258:	f000 fe86 	bl	8001f68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 3, 0);
 800125c:	4631      	mov	r1, r6
 800125e:	4622      	mov	r2, r4
 8001260:	203a      	movs	r0, #58	; 0x3a
 8001262:	f000 fe49 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001266:	203a      	movs	r0, #58	; 0x3a
 8001268:	f000 fe7e 	bl	8001f68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 800126c:	4631      	mov	r1, r6
 800126e:	4622      	mov	r2, r4
 8001270:	2045      	movs	r0, #69	; 0x45
 8001272:	f000 fe41 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001276:	2045      	movs	r0, #69	; 0x45
 8001278:	f000 fe76 	bl	8001f68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 3, 0);
 800127c:	4631      	mov	r1, r6
 800127e:	4622      	mov	r2, r4
 8001280:	2046      	movs	r0, #70	; 0x46
  htim3.Instance = TIM3;
 8001282:	4e28      	ldr	r6, [pc, #160]	; (8001324 <main+0x2a8>)
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 3, 0);
 8001284:	f000 fe38 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001288:	2046      	movs	r0, #70	; 0x46
 800128a:	f000 fe6d 	bl	8001f68 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 800128e:	4926      	ldr	r1, [pc, #152]	; (8001328 <main+0x2ac>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001290:	940f      	str	r4, [sp, #60]	; 0x3c
  htim3.Init.Prescaler = 9999;
 8001292:	f242 720f 	movw	r2, #9999	; 0x270f
  htim3.Init.Period = 99;
 8001296:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001298:	4630      	mov	r0, r6
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim3.Init.Prescaler = 9999;
 800129e:	e9c6 1200 	strd	r1, r2, [r6]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	940d      	str	r4, [sp, #52]	; 0x34
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	60b4      	str	r4, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	61b4      	str	r4, [r6, #24]
  htim3.Init.Period = 99;
 80012ac:	60f3      	str	r3, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b0:	f002 f8da 	bl	8003468 <HAL_TIM_Base_Init>
 80012b4:	b108      	cbz	r0, 80012ba <main+0x23e>
 80012b6:	b672      	cpsid	i
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <main+0x23c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012be:	a90f      	add	r1, sp, #60	; 0x3c
 80012c0:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c2:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c4:	f001 ff1c 	bl	8003100 <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b108      	cbz	r0, 80012d0 <main+0x254>
 80012cc:	b672      	cpsid	i
  while (1)
 80012ce:	e7fe      	b.n	80012ce <main+0x252>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d0:	a90d      	add	r1, sp, #52	; 0x34
 80012d2:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d8:	f002 f8f4 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	b108      	cbz	r0, 80012e2 <main+0x266>
 80012de:	b672      	cpsid	i
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <main+0x264>
  huart1.Instance = USART1;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <main+0x2b0>)
 80012e4:	4a12      	ldr	r2, [pc, #72]	; (8001330 <main+0x2b4>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80012e6:	6118      	str	r0, [r3, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e8:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart1.Init.BaudRate = 230400;
 80012f0:	f44f 3161 	mov.w	r1, #230400	; 0x38400
  huart1.Instance = USART1;
 80012f4:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f6:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f8:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 230400;
 80012fa:	6059      	str	r1, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012fc:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012fe:	f002 f9bf 	bl	8003680 <HAL_UART_Init>
 8001302:	4682      	mov	sl, r0
 8001304:	b1b0      	cbz	r0, 8001334 <main+0x2b8>
 8001306:	b672      	cpsid	i
  while (1)
 8001308:	e7fe      	b.n	8001308 <main+0x28c>
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020000 	.word	0x40020000
 800131c:	20000a04 	.word	0x20000a04
 8001320:	40026410 	.word	0x40026410
 8001324:	20000b18 	.word	0x20000b18
 8001328:	40000400 	.word	0x40000400
 800132c:	20000d28 	.word	0x20000d28
 8001330:	40011000 	.word	0x40011000
  HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8001334:	4bbb      	ldr	r3, [pc, #748]	; (8001624 <main+0x5a8>)
 8001336:	49bc      	ldr	r1, [pc, #752]	; (8001628 <main+0x5ac>)
 8001338:	6818      	ldr	r0, [r3, #0]
  	Logger(NULL, false, "%s", eol);
 800133a:	f8df 8368 	ldr.w	r8, [pc, #872]	; 80016a4 <main+0x628>
  	Logger(name, true, "Start %s with BOOT_PIN=%d%s", version, vpin, eol);
 800133e:	f8df 9368 	ldr.w	r9, [pc, #872]	; 80016a8 <main+0x62c>
  HAL_UART_Receive_IT(uartPort, &rxByte, 1);
 8001342:	462a      	mov	r2, r5
 8001344:	f002 f9cc 	bl	80036e0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001348:	4630      	mov	r0, r6
 800134a:	f001 fea5 	bl	8003098 <HAL_TIM_Base_Start_IT>
  	bootMode = true;
 800134e:	4bb7      	ldr	r3, [pc, #732]	; (800162c <main+0x5b0>)
  	HAL_Delay(1000);
 8001350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  	bootMode = true;
 8001354:	701d      	strb	r5, [r3, #0]
  	HAL_Delay(1000);
 8001356:	f000 fda9 	bl	8001eac <HAL_Delay>
  	Logger(NULL, false, "%s", eol);
 800135a:	f8d8 3000 	ldr.w	r3, [r8]
 800135e:	4ab4      	ldr	r2, [pc, #720]	; (8001630 <main+0x5b4>)
 8001360:	4651      	mov	r1, sl
 8001362:	4650      	mov	r0, sl
 8001364:	f7ff f938 	bl	80005d8 <Logger>
  	int vpin = HAL_GPIO_ReadPin(BOOT_PORT_PIN, BOOT_PIN);
 8001368:	4629      	mov	r1, r5
 800136a:	48b2      	ldr	r0, [pc, #712]	; (8001634 <main+0x5b8>)
 800136c:	f001 fba6 	bl	8002abc <HAL_GPIO_ReadPin>
  	Logger(name, true, "Start %s with BOOT_PIN=%d%s", version, vpin, eol);
 8001370:	f8d8 2000 	ldr.w	r2, [r8]
 8001374:	4bb0      	ldr	r3, [pc, #704]	; (8001638 <main+0x5bc>)
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	9000      	str	r0, [sp, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4aaf      	ldr	r2, [pc, #700]	; (800163c <main+0x5c0>)
 800137e:	4629      	mov	r1, r5
  	int vpin = HAL_GPIO_ReadPin(BOOT_PORT_PIN, BOOT_PIN);
 8001380:	4606      	mov	r6, r0
  	Logger(name, true, "Start %s with BOOT_PIN=%d%s", version, vpin, eol);
 8001382:	f8d9 0000 	ldr.w	r0, [r9]
 8001386:	f7ff f927 	bl	80005d8 <Logger>
  	_writePin(GPIOB, ERR_Pin, GPIO_PIN_RESET);
 800138a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800138e:	61bb      	str	r3, [r7, #24]
  		_togglePin(GPIOB, ERR_Pin);
 8001390:	463d      	mov	r5, r7
  	_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);
 8001392:	61bc      	str	r4, [r7, #24]
 8001394:	2407      	movs	r4, #7
  		HAL_Delay(250);
 8001396:	20fa      	movs	r0, #250	; 0xfa
 8001398:	f000 fd88 	bl	8001eac <HAL_Delay>
  		_togglePin(GPIOB, ERR_Pin);
 800139c:	696b      	ldr	r3, [r5, #20]
 800139e:	041a      	lsls	r2, r3, #16
 80013a0:	43db      	mvns	r3, r3
 80013a2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61ab      	str	r3, [r5, #24]
  		_togglePin(GPIOB, MQ_ALARM_Pin);
 80013ae:	696b      	ldr	r3, [r5, #20]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	43db      	mvns	r3, r3
 80013b4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80013b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013bc:	4313      	orrs	r3, r2
  	for (int i = 0; i < 7; i++) {
 80013be:	3c01      	subs	r4, #1
  		_togglePin(GPIOB, MQ_ALARM_Pin);
 80013c0:	61ab      	str	r3, [r5, #24]
  	for (int i = 0; i < 7; i++) {
 80013c2:	d1e8      	bne.n	8001396 <main+0x31a>
  	dstat = HAL_DMA_RegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID, &dmaCB);
 80013c4:	4f9e      	ldr	r7, [pc, #632]	; (8001640 <main+0x5c4>)
  	dmaDone = false;
 80013c6:	4d9f      	ldr	r5, [pc, #636]	; (8001644 <main+0x5c8>)
  	uint32_t addr = SPEC_AREA_ADR;
 80013c8:	4b9f      	ldr	r3, [pc, #636]	; (8001648 <main+0x5cc>)
  	dstat = HAL_DMA_RegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID, &dmaCB);
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	4a9f      	ldr	r2, [pc, #636]	; (800164c <main+0x5d0>)
  	dmaDone = false;
 80013ce:	702c      	strb	r4, [r5, #0]
  	dstat = HAL_DMA_RegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID, &dmaCB);
 80013d0:	4621      	mov	r1, r4
  	uint32_t addr = SPEC_AREA_ADR;
 80013d2:	930f      	str	r3, [sp, #60]	; 0x3c
  	dstat = HAL_DMA_RegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID, &dmaCB);
 80013d4:	f001 f812 	bl	80023fc <HAL_DMA_RegisterCallback>
  	if (dstat == HAL_OK) {
 80013d8:	b320      	cbz	r0, 8001424 <main+0x3a8>
    } else devError |= devDma;
 80013da:	4a9d      	ldr	r2, [pc, #628]	; (8001650 <main+0x5d4>)
 80013dc:	6813      	ldr	r3, [r2, #0]
 80013de:	f043 030b 	orr.w	r3, r3, #11
 80013e2:	6013      	str	r3, [r2, #0]
    		_togglePin(GPIOB, ERR_Pin);
 80013e4:	4c9b      	ldr	r4, [pc, #620]	; (8001654 <main+0x5d8>)
 80013e6:	2507      	movs	r5, #7
    		HAL_Delay(150);
 80013e8:	2096      	movs	r0, #150	; 0x96
 80013ea:	f000 fd5f 	bl	8001eac <HAL_Delay>
    		_togglePin(GPIOB, ERR_Pin);
 80013ee:	6963      	ldr	r3, [r4, #20]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	43db      	mvns	r3, r3
 80013f4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61a3      	str	r3, [r4, #24]
    		_togglePin(GPIOB, MQ_ALARM_Pin);
 8001400:	6963      	ldr	r3, [r4, #20]
 8001402:	041a      	lsls	r2, r3, #16
 8001404:	43db      	mvns	r3, r3
 8001406:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	4313      	orrs	r3, r2
    	for (int i = 0; i < 7; i++) {
 8001410:	3d01      	subs	r5, #1
    		_togglePin(GPIOB, MQ_ALARM_Pin);
 8001412:	61a3      	str	r3, [r4, #24]
    	for (int i = 0; i < 7; i++) {
 8001414:	d1e8      	bne.n	80013e8 <main+0x36c>
    	LOOP_FOREVER();
 8001416:	2001      	movs	r0, #1
 8001418:	f000 fd48 	bl	8001eac <HAL_Delay>
 800141c:	2001      	movs	r0, #1
 800141e:	f000 fd45 	bl	8001eac <HAL_Delay>
 8001422:	e7f8      	b.n	8001416 <main+0x39a>
  		if (HAL_DMA_Start_IT(dmaMem, addr, (uint32_t)&hdr, sizeof(api_hdr_t)) != HAL_OK) devError |= devDma;
 8001424:	4a8c      	ldr	r2, [pc, #560]	; (8001658 <main+0x5dc>)
 8001426:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001428:	6838      	ldr	r0, [r7, #0]
  		dmaDone = false;
 800142a:	702c      	strb	r4, [r5, #0]
  		if (HAL_DMA_Start_IT(dmaMem, addr, (uint32_t)&hdr, sizeof(api_hdr_t)) != HAL_OK) devError |= devDma;
 800142c:	2310      	movs	r3, #16
 800142e:	f000 fe5d 	bl	80020ec <HAL_DMA_Start_IT>
 8001432:	2800      	cmp	r0, #0
 8001434:	f040 808e 	bne.w	8001554 <main+0x4d8>
 8001438:	2464      	movs	r4, #100	; 0x64
 800143a:	e005      	b.n	8001448 <main+0x3cc>
  			while(!dmaDone && --sch) HAL_Delay(1);
 800143c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001440:	f000 8088 	beq.w	8001554 <main+0x4d8>
 8001444:	f000 fd32 	bl	8001eac <HAL_Delay>
 8001448:	782b      	ldrb	r3, [r5, #0]
 800144a:	3c01      	subs	r4, #1
 800144c:	2001      	movs	r0, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f4      	beq.n	800143c <main+0x3c0>
    if (devError) {
 8001452:	4d7f      	ldr	r5, [pc, #508]	; (8001650 <main+0x5d4>)
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8081 	bne.w	800155e <main+0x4e2>
    						(unsigned int)hdr.crc,
 800145c:	4c7e      	ldr	r4, [pc, #504]	; (8001658 <main+0x5dc>)
 800145e:	68e3      	ldr	r3, [r4, #12]
    						(unsigned int)hdr.len,
 8001460:	68a0      	ldr	r0, [r4, #8]
    						(unsigned int)hdr.adr,
 8001462:	6861      	ldr	r1, [r4, #4]
    						(unsigned int)hdr.mark,
 8001464:	6822      	ldr	r2, [r4, #0]
    	Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 8001466:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800146a:	e9cd 2100 	strd	r2, r1, [sp]
 800146e:	f8d8 3000 	ldr.w	r3, [r8]
 8001472:	9304      	str	r3, [sp, #16]
 8001474:	4a79      	ldr	r2, [pc, #484]	; (800165c <main+0x5e0>)
 8001476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001478:	f8d9 0000 	ldr.w	r0, [r9]
 800147c:	2101      	movs	r1, #1
 800147e:	f7ff f8ab 	bl	80005d8 <Logger>
    if (vpin == GPIO_PIN_SET) {
 8001482:	2e01      	cmp	r6, #1
 8001484:	d104      	bne.n	8001490 <main+0x414>
    	if ( (hdr.mark == API_MARKER) && (hdr.adr == API_START_ADR) && hdr.len && (hdr.crc != 0xFFFFFFFF)) {
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	4b75      	ldr	r3, [pc, #468]	; (8001660 <main+0x5e4>)
 800148a:	429a      	cmp	r2, r3
 800148c:	f000 812d 	beq.w	80016ea <main+0x66e>
    	vrem = (uint8_t *)calloc(1, MAX_VREM_BUF);//get memory for data buffer
 8001490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001494:	2001      	movs	r0, #1
 8001496:	f002 fcdf 	bl	8003e58 <calloc>
 800149a:	4e72      	ldr	r6, [pc, #456]	; (8001664 <main+0x5e8>)
 800149c:	6030      	str	r0, [r6, #0]
    	if (!vrem) {
 800149e:	2800      	cmp	r0, #0
 80014a0:	f000 8114 	beq.w	80016cc <main+0x650>
    	uint32_t the_len = doAPI(&fLen);
 80014a4:	4870      	ldr	r0, [pc, #448]	; (8001668 <main+0x5ec>)
 80014a6:	f7ff f963 	bl	8000770 <doAPI>
    	if (vrem) free(vrem);
 80014aa:	6833      	ldr	r3, [r6, #0]
    	uint32_t the_len = doAPI(&fLen);
 80014ac:	4606      	mov	r6, r0
    	if (vrem) free(vrem);
 80014ae:	b113      	cbz	r3, 80014b6 <main+0x43a>
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fd03 	bl	8003ebc <free>
    	if (the_len || fLen) {
 80014b6:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <main+0x5ec>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4333      	orrs	r3, r6
 80014bc:	d00c      	beq.n	80014d8 <main+0x45c>
    		if (apiCmd != apiSwitch) HAL_Delay(1500);
 80014be:	4b6b      	ldr	r3, [pc, #428]	; (800166c <main+0x5f0>)
 80014c0:	f993 3000 	ldrsb.w	r3, [r3]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d003      	beq.n	80014d0 <main+0x454>
 80014c8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014cc:	f000 fcee 	bl	8001eac <HAL_Delay>
    		if (action == do_prog) {
 80014d0:	4b67      	ldr	r3, [pc, #412]	; (8001670 <main+0x5f4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d047      	beq.n	8001568 <main+0x4ec>
    	errLedOn(devError ? true : false);
 80014d8:	6828      	ldr	r0, [r5, #0]
 80014da:	3800      	subs	r0, #0
 80014dc:	bf18      	it	ne
 80014de:	2001      	movne	r0, #1
 80014e0:	f7ff fdb4 	bl	800104c <errLedOn>
    	if (devError) {
 80014e4:	682a      	ldr	r2, [r5, #0]
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	f000 810d 	beq.w	8001706 <main+0x68a>
    		Logger(name, true, "action '%s': Error #%lu '%s'%s", allAction[action], devError, errName(devError), eol);
 80014ec:	4960      	ldr	r1, [pc, #384]	; (8001670 <main+0x5f4>)
 80014ee:	4b61      	ldr	r3, [pc, #388]	; (8001674 <main+0x5f8>)
 80014f0:	7809      	ldrb	r1, [r1, #0]
 80014f2:	f8d9 0000 	ldr.w	r0, [r9]
 80014f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	switch (err) {
 80014fa:	2a10      	cmp	r2, #16
 80014fc:	bf96      	itet	ls
 80014fe:	495e      	ldrls	r1, [pc, #376]	; (8001678 <main+0x5fc>)
    		Logger(name, true, "action '%s': Error #%lu '%s'%s", allAction[action], devError, errName(devError), eol);
 8001500:	4d5e      	ldrhi	r5, [pc, #376]	; (800167c <main+0x600>)
 8001502:	f851 5022 	ldrls.w	r5, [r1, r2, lsl #2]
 8001506:	f8d8 1000 	ldr.w	r1, [r8]
 800150a:	9102      	str	r1, [sp, #8]
 800150c:	e9cd 2500 	strd	r2, r5, [sp]
 8001510:	2101      	movs	r1, #1
 8001512:	4a5b      	ldr	r2, [pc, #364]	; (8001680 <main+0x604>)
 8001514:	f7ff f860 	bl	80005d8 <Logger>
    		HAL_Delay(1000);
 8001518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151c:	f000 fcc6 	bl	8001eac <HAL_Delay>
    if (dstat == HAL_OK) HAL_DMA_UnRegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID);
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	2100      	movs	r1, #0
 8001524:	f000 ff96 	bl	8002454 <HAL_DMA_UnRegisterCallback>
    Logger(name, true, "Switch to application by address 0x%X%s", (unsigned int)hdr.adr, eol);
 8001528:	f8d8 3000 	ldr.w	r3, [r8]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	6863      	ldr	r3, [r4, #4]
 8001530:	f8d9 0000 	ldr.w	r0, [r9]
 8001534:	4a53      	ldr	r2, [pc, #332]	; (8001684 <main+0x608>)
 8001536:	2101      	movs	r1, #1
 8001538:	f7ff f84e 	bl	80005d8 <Logger>
    uint32_t appJump = *((volatile uint32_t *)(API_START_ADR + 4));
 800153c:	4b52      	ldr	r3, [pc, #328]	; (8001688 <main+0x60c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b672      	cpsid	i
    __set_MSP(*((volatile uint32_t *)API_START_ADR));
 8001542:	4a52      	ldr	r2, [pc, #328]	; (800168c <main+0x610>)
 8001544:	6812      	ldr	r2, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001546:	f382 8808 	msr	MSP, r2
    GoToApp();//switch to API
 800154a:	4798      	blx	r3
}
 800154c:	2000      	movs	r0, #0
 800154e:	b014      	add	sp, #80	; 0x50
 8001550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  			if (!sch && !dmaDone) devError |= devDma;
 8001554:	4a3e      	ldr	r2, [pc, #248]	; (8001650 <main+0x5d4>)
 8001556:	6813      	ldr	r3, [r2, #0]
 8001558:	f043 030b 	orr.w	r3, r3, #11
 800155c:	6013      	str	r3, [r2, #0]
    	if (dstat == HAL_OK) HAL_DMA_UnRegisterCallback(dmaMem, HAL_DMA_XFER_CPLT_CB_ID);
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	2100      	movs	r1, #0
 8001562:	f000 ff77 	bl	8002454 <HAL_DMA_UnRegisterCallback>
 8001566:	e73d      	b.n	80013e4 <main+0x368>
    			apiHdr.len = file_size;
 8001568:	4b49      	ldr	r3, [pc, #292]	; (8001690 <main+0x614>)
    			apiHdr.crc = file_crc;
 800156a:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <main+0x618>)
    			apiHdr.len = file_size;
 800156c:	6819      	ldr	r1, [r3, #0]
    			apiHdr.mark = API_MARKER;
 800156e:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <main+0x61c>)
    			apiHdr.crc = file_crc;
 8001570:	6812      	ldr	r2, [r2, #0]
    			apiHdr.len = file_size;
 8001572:	6099      	str	r1, [r3, #8]
    			apiHdr.mark = API_MARKER;
 8001574:	200f      	movs	r0, #15
 8001576:	f06f 060f 	mvn.w	r6, #15
 800157a:	7018      	strb	r0, [r3, #0]
 800157c:	f06f 005a 	mvn.w	r0, #90	; 0x5a
 8001580:	705e      	strb	r6, [r3, #1]
 8001582:	7098      	strb	r0, [r3, #2]
 8001584:	265a      	movs	r6, #90	; 0x5a
    			apiHdr.adr = API_START_ADR;
 8001586:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    			apiHdr.mark = API_MARKER;
 800158a:	70de      	strb	r6, [r3, #3]
    			apiHdr.adr = API_START_ADR;
 800158c:	7158      	strb	r0, [r3, #5]
 800158e:	2608      	movs	r6, #8
    			apiHdr.mark = API_MARKER;
 8001590:	2000      	movs	r0, #0
    			apiHdr.adr = API_START_ADR;
 8001592:	71de      	strb	r6, [r3, #7]
    			apiHdr.crc = file_crc;
 8001594:	60da      	str	r2, [r3, #12]
    			apiHdr.adr = API_START_ADR;
 8001596:	7118      	strb	r0, [r3, #4]
 8001598:	7198      	strb	r0, [r3, #6]
    				if (apiHdr.len && apiHdr.crc) {
 800159a:	2900      	cmp	r1, #0
 800159c:	f000 808d 	beq.w	80016ba <main+0x63e>
 80015a0:	2a00      	cmp	r2, #0
 80015a2:	f000 808a 	beq.w	80016ba <main+0x63e>
    					if ( (hdr.mark != apiHdr.mark) || (hdr.adr != apiHdr.adr) ||
 80015a6:	6820      	ldr	r0, [r4, #0]
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <main+0x5e4>)
 80015aa:	4298      	cmp	r0, r3
 80015ac:	d103      	bne.n	80015b6 <main+0x53a>
 80015ae:	6860      	ldr	r0, [r4, #4]
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <main+0x610>)
 80015b2:	4298      	cmp	r0, r3
 80015b4:	d07a      	beq.n	80016ac <main+0x630>
    						Logger(name, true, "SPEC_AREA not empty -> erase sector #7...");
 80015b6:	2101      	movs	r1, #1
 80015b8:	4a38      	ldr	r2, [pc, #224]	; (800169c <main+0x620>)
 80015ba:	f8d9 0000 	ldr.w	r0, [r9]
 80015be:	f7ff f80b 	bl	80005d8 <Logger>
    						flash_erase(7);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f7ff f82c 	bl	8000620 <flash_erase>
    						if (!devError)
 80015c8:	6829      	ldr	r1, [r5, #0]
 80015ca:	2900      	cmp	r1, #0
 80015cc:	d077      	beq.n	80016be <main+0x642>
	switch (err) {
 80015ce:	2910      	cmp	r1, #16
 80015d0:	bf98      	it	ls
 80015d2:	4b29      	ldrls	r3, [pc, #164]	; (8001678 <main+0x5fc>)
    							Logger(NULL, false, " done.(error:'%s')%s", errName(devError), eol);
 80015d4:	f8d8 2000 	ldr.w	r2, [r8]
 80015d8:	bf98      	it	ls
 80015da:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
 80015de:	9200      	str	r2, [sp, #0]
 80015e0:	f04f 0100 	mov.w	r1, #0
    						if (!devError)
 80015e4:	bf88      	it	hi
 80015e6:	4b25      	ldrhi	r3, [pc, #148]	; (800167c <main+0x600>)
    							Logger(NULL, false, " done.(error:'%s')%s", errName(devError), eol);
 80015e8:	4a2d      	ldr	r2, [pc, #180]	; (80016a0 <main+0x624>)
 80015ea:	4608      	mov	r0, r1
 80015ec:	f7fe fff4 	bl	80005d8 <Logger>
    						flash_write(&addr, (uint32_t *)&Hdr->mark, sizeof(api_hdr_t)/sizeof(uint32_t));
 80015f0:	4929      	ldr	r1, [pc, #164]	; (8001698 <main+0x61c>)
 80015f2:	a80f      	add	r0, sp, #60	; 0x3c
 80015f4:	2204      	movs	r2, #4
 80015f6:	f7ff f83b 	bl	8000670 <flash_write>
    						Hdr = &apiHdr;
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <main+0x61c>)
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 80015fc:	f8d8 2000 	ldr.w	r2, [r8]
 8001600:	9204      	str	r2, [sp, #16]
										(unsigned int)Hdr->crc,
 8001602:	68da      	ldr	r2, [r3, #12]
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 8001604:	9203      	str	r2, [sp, #12]
										(unsigned int)Hdr->len,
 8001606:	689a      	ldr	r2, [r3, #8]
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 8001608:	9202      	str	r2, [sp, #8]
										(unsigned int)Hdr->adr,
 800160a:	685a      	ldr	r2, [r3, #4]
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 800160c:	9201      	str	r2, [sp, #4]
										(unsigned int)Hdr->mark,
 800160e:	681b      	ldr	r3, [r3, #0]
    				Logger(name, true, "Hdr(0x%X): mark=0x%X adr=0x%X len=0x%X crc=0x%X%s",
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <main+0x5e0>)
 8001614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001616:	f8d9 0000 	ldr.w	r0, [r9]
 800161a:	2101      	movs	r1, #1
 800161c:	f7fe ffdc 	bl	80005d8 <Logger>
 8001620:	e75a      	b.n	80014d8 <main+0x45c>
 8001622:	bf00      	nop
 8001624:	20000044 	.word	0x20000044
 8001628:	20000580 	.word	0x20000580
 800162c:	2000057c 	.word	0x2000057c
 8001630:	08004ed8 	.word	0x08004ed8
 8001634:	40020000 	.word	0x40020000
 8001638:	20000034 	.word	0x20000034
 800163c:	08004e1c 	.word	0x08004e1c
 8001640:	2000003c 	.word	0x2000003c
 8001644:	200000fc 	.word	0x200000fc
 8001648:	0807fff0 	.word	0x0807fff0
 800164c:	08000605 	.word	0x08000605
 8001650:	20000164 	.word	0x20000164
 8001654:	40020400 	.word	0x40020400
 8001658:	20000998 	.word	0x20000998
 800165c:	08004e38 	.word	0x08004e38
 8001660:	5aa5f00f 	.word	0x5aa5f00f
 8001664:	20000158 	.word	0x20000158
 8001668:	20000100 	.word	0x20000100
 800166c:	2000002c 	.word	0x2000002c
 8001670:	200000d8 	.word	0x200000d8
 8001674:	20000018 	.word	0x20000018
 8001678:	08004fd0 	.word	0x08004fd0
 800167c:	08004e18 	.word	0x08004e18
 8001680:	08004ebc 	.word	0x08004ebc
 8001684:	08004edc 	.word	0x08004edc
 8001688:	08008004 	.word	0x08008004
 800168c:	08008000 	.word	0x08008000
 8001690:	20000108 	.word	0x20000108
 8001694:	20000104 	.word	0x20000104
 8001698:	200000e0 	.word	0x200000e0
 800169c:	08004e6c 	.word	0x08004e6c
 80016a0:	08004ea4 	.word	0x08004ea4
 80016a4:	20000040 	.word	0x20000040
 80016a8:	20000030 	.word	0x20000030
    								(hdr.len != apiHdr.len) || (hdr.crc != apiHdr.crc) ) {
 80016ac:	68a3      	ldr	r3, [r4, #8]
    					if ( (hdr.mark != apiHdr.mark) || (hdr.adr != apiHdr.adr) ||
 80016ae:	4299      	cmp	r1, r3
 80016b0:	d181      	bne.n	80015b6 <main+0x53a>
    								(hdr.len != apiHdr.len) || (hdr.crc != apiHdr.crc) ) {
 80016b2:	68e3      	ldr	r3, [r4, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	f47f af7e 	bne.w	80015b6 <main+0x53a>
    			api_hdr_t *Hdr = &hdr;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <main+0x6c0>)
 80016bc:	e79e      	b.n	80015fc <main+0x580>
    							Logger(NULL, false, " done.%s", eol);
 80016be:	f8d8 3000 	ldr.w	r3, [r8]
 80016c2:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <main+0x6c4>)
 80016c4:	4608      	mov	r0, r1
 80016c6:	f7fe ff87 	bl	80005d8 <Logger>
 80016ca:	e791      	b.n	80015f0 <main+0x574>
    		devError |= devMem;
 80016cc:	682b      	ldr	r3, [r5, #0]
    		_writePin(GPIOB, ERR_Pin, GPIO_PIN_RESET);
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <main+0x6c8>)
    		devError |= devMem;
 80016d0:	f043 0305 	orr.w	r3, r3, #5
    		_writePin(GPIOB, ERR_Pin, GPIO_PIN_RESET);
 80016d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    		_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);
 80016d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    		devError |= devMem;
 80016dc:	602b      	str	r3, [r5, #0]
    		_writePin(GPIOB, ERR_Pin, GPIO_PIN_RESET);
 80016de:	6190      	str	r0, [r2, #24]
    		_writePin(GPIOB, MQ_ALARM_Pin, GPIO_PIN_SET);
 80016e0:	6191      	str	r1, [r2, #24]
    		LOOP_FOREVER();
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 fbe2 	bl	8001eac <HAL_Delay>
 80016e8:	e7fb      	b.n	80016e2 <main+0x666>
    	if ( (hdr.mark == API_MARKER) && (hdr.adr == API_START_ADR) && hdr.len && (hdr.crc != 0xFFFFFFFF)) {
 80016ea:	6862      	ldr	r2, [r4, #4]
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <main+0x6cc>)
 80016ee:	429a      	cmp	r2, r3
 80016f0:	f47f aece 	bne.w	8001490 <main+0x414>
 80016f4:	68a3      	ldr	r3, [r4, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f43f aeca 	beq.w	8001490 <main+0x414>
 80016fc:	68e3      	ldr	r3, [r4, #12]
 80016fe:	3301      	adds	r3, #1
 8001700:	f47f af0e 	bne.w	8001520 <main+0x4a4>
 8001704:	e6c4      	b.n	8001490 <main+0x414>
    			_togglePin(GPIOB, ERR_Pin);
 8001706:	4d0f      	ldr	r5, [pc, #60]	; (8001744 <main+0x6c8>)
 8001708:	2606      	movs	r6, #6
    			HAL_Delay(250);
 800170a:	20fa      	movs	r0, #250	; 0xfa
 800170c:	f000 fbce 	bl	8001eac <HAL_Delay>
    			_togglePin(GPIOB, ERR_Pin);
 8001710:	696b      	ldr	r3, [r5, #20]
 8001712:	041a      	lsls	r2, r3, #16
 8001714:	43db      	mvns	r3, r3
 8001716:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800171a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171e:	4313      	orrs	r3, r2
 8001720:	61ab      	str	r3, [r5, #24]
    			_togglePin(GPIOB, MQ_ALARM_Pin);
 8001722:	696b      	ldr	r3, [r5, #20]
 8001724:	041a      	lsls	r2, r3, #16
 8001726:	43db      	mvns	r3, r3
 8001728:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800172c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001730:	4313      	orrs	r3, r2
    		for (int i = 0; i < 6; i++) {
 8001732:	3e01      	subs	r6, #1
    			_togglePin(GPIOB, MQ_ALARM_Pin);
 8001734:	61ab      	str	r3, [r5, #24]
    		for (int i = 0; i < 6; i++) {
 8001736:	d1e8      	bne.n	800170a <main+0x68e>
 8001738:	e6f2      	b.n	8001520 <main+0x4a4>
 800173a:	bf00      	nop
 800173c:	20000998 	.word	0x20000998
 8001740:	08004e98 	.word	0x08004e98
 8001744:	40020400 	.word	0x40020400
 8001748:	08008000 	.word	0x08008000

0800174c <sec2str>:
	return SecCounter;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <sec2str+0x48>)
	sec %= (60 * 60 * 24);
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <sec2str+0x4c>)
	sec %= 60;
 8001750:	4912      	ldr	r1, [pc, #72]	; (800179c <sec2str+0x50>)
{
 8001752:	b570      	push	{r4, r5, r6, lr}
	return SecCounter;
 8001754:	681c      	ldr	r4, [r3, #0]
	sec %= (60 * 60 * 24);
 8001756:	4e12      	ldr	r6, [pc, #72]	; (80017a0 <sec2str+0x54>)
	sec %= (60 * 60);
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <sec2str+0x58>)
	sec %= (60 * 60 * 24);
 800175a:	fba2 5204 	umull	r5, r2, r2, r4
 800175e:	0c15      	lsrs	r5, r2, #16
 8001760:	fb06 4515 	mls	r5, r6, r5, r4
	sec %= (60 * 60);
 8001764:	fba3 4305 	umull	r4, r3, r3, r5
 8001768:	0adc      	lsrs	r4, r3, #11
 800176a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 800176e:	fb06 5414 	mls	r4, r6, r4, r5
	sec %= 60;
 8001772:	fba1 5104 	umull	r5, r1, r1, r4
 8001776:	0949      	lsrs	r1, r1, #5
 8001778:	ebc1 1501 	rsb	r5, r1, r1, lsl #4
{
 800177c:	b082      	sub	sp, #8
	sec %= 60;
 800177e:	eba4 0485 	sub.w	r4, r4, r5, lsl #2
	return (sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec));
 8001782:	e9cd 1400 	strd	r1, r4, [sp]
 8001786:	0c12      	lsrs	r2, r2, #16
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <sec2str+0x5c>)
 800178a:	0adb      	lsrs	r3, r3, #11
 800178c:	f002 fc7e 	bl	800408c <siprintf>
}
 8001790:	b002      	add	sp, #8
 8001792:	bd70      	pop	{r4, r5, r6, pc}
 8001794:	2000015c 	.word	0x2000015c
 8001798:	c22e4507 	.word	0xc22e4507
 800179c:	88888889 	.word	0x88888889
 80017a0:	00015180 	.word	0x00015180
 80017a4:	91a2b3c5 	.word	0x91a2b3c5
 80017a8:	08004f04 	.word	0x08004f04

080017ac <Report>:
{
 80017ac:	b40c      	push	{r2, r3}
 80017ae:	b570      	push	{r4, r5, r6, lr}
	*buff = '\0';
 80017b0:	4d27      	ldr	r5, [pc, #156]	; (8001850 <Report+0xa4>)
 80017b2:	2300      	movs	r3, #0
{
 80017b4:	b082      	sub	sp, #8
 80017b6:	4606      	mov	r6, r0
	*buff = '\0';
 80017b8:	702b      	strb	r3, [r5, #0]
	if (addTime) {
 80017ba:	2900      	cmp	r1, #0
 80017bc:	d139      	bne.n	8001832 <Report+0x86>
int dl = 0;
 80017be:	460c      	mov	r4, r1
	if (tag) dl += sprintf(buff+strlen(buff), "[%s] ", tag);
 80017c0:	b146      	cbz	r6, 80017d4 <Report+0x28>
 80017c2:	4823      	ldr	r0, [pc, #140]	; (8001850 <Report+0xa4>)
 80017c4:	f7fe fd0c 	bl	80001e0 <strlen>
 80017c8:	4922      	ldr	r1, [pc, #136]	; (8001854 <Report+0xa8>)
 80017ca:	4632      	mov	r2, r6
 80017cc:	4428      	add	r0, r5
 80017ce:	f002 fc5d 	bl	800408c <siprintf>
 80017d2:	4404      	add	r4, r0
	vsnprintf(buff + dl, len - dl, fmt, args);
 80017d4:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
	va_start(args, fmt);
 80017d8:	ab07      	add	r3, sp, #28
	vsnprintf(buff + dl, len - dl, fmt, args);
 80017da:	9a06      	ldr	r2, [sp, #24]
	va_start(args, fmt);
 80017dc:	9301      	str	r3, [sp, #4]
	vsnprintf(buff + dl, len - dl, fmt, args);
 80017de:	1928      	adds	r0, r5, r4
 80017e0:	f002 fd52 	bl	8004288 <vsniprintf>
	uartReady = false;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <Report+0xac>)
	if (HAL_UART_Transmit_DMA(uartPort, (uint8_t *)buff, strlen(buff)) != HAL_OK) devError |= devUART;
 80017e6:	481a      	ldr	r0, [pc, #104]	; (8001850 <Report+0xa4>)
 80017e8:	4c1c      	ldr	r4, [pc, #112]	; (800185c <Report+0xb0>)
	uartReady = false;
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(uartPort, (uint8_t *)buff, strlen(buff)) != HAL_OK) devError |= devUART;
 80017ee:	f7fe fcf7 	bl	80001e0 <strlen>
 80017f2:	4917      	ldr	r1, [pc, #92]	; (8001850 <Report+0xa4>)
 80017f4:	b282      	uxth	r2, r0
 80017f6:	6820      	ldr	r0, [r4, #0]
 80017f8:	f001 ff9c 	bl	8003734 <HAL_UART_Transmit_DMA>
 80017fc:	b170      	cbz	r0, 800181c <Report+0x70>
 80017fe:	4a18      	ldr	r2, [pc, #96]	; (8001860 <Report+0xb4>)
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e008      	b.n	800181c <Report+0x70>
		if (HAL_UART_GetState(uartPort) == HAL_UART_STATE_BUSY_RX) break;
 800180a:	6820      	ldr	r0, [r4, #0]
 800180c:	f002 faae 	bl	8003d6c <HAL_UART_GetState>
 8001810:	2822      	cmp	r0, #34	; 0x22
		HAL_Delay(1);
 8001812:	f04f 0001 	mov.w	r0, #1
		if (HAL_UART_GetState(uartPort) == HAL_UART_STATE_BUSY_RX) break;
 8001816:	d006      	beq.n	8001826 <Report+0x7a>
		HAL_Delay(1);
 8001818:	f000 fb48 	bl	8001eac <HAL_Delay>
	while (HAL_UART_GetState(uartPort) != HAL_UART_STATE_READY) {
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	f002 faa5 	bl	8003d6c <HAL_UART_GetState>
 8001822:	2820      	cmp	r0, #32
 8001824:	d1f1      	bne.n	800180a <Report+0x5e>
}
 8001826:	2000      	movs	r0, #0
 8001828:	b002      	add	sp, #8
 800182a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800182e:	b002      	add	sp, #8
 8001830:	4770      	bx	lr
		dl = sec2str(buff);
 8001832:	4628      	mov	r0, r5
 8001834:	f7ff ff8a 	bl	800174c <sec2str>
 8001838:	4604      	mov	r4, r0
		strcat(buff, "| ");
 800183a:	4628      	mov	r0, r5
 800183c:	f7fe fcd0 	bl	80001e0 <strlen>
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <Report+0xb8>)
 8001842:	182a      	adds	r2, r5, r0
 8001844:	8819      	ldrh	r1, [r3, #0]
 8001846:	789b      	ldrb	r3, [r3, #2]
 8001848:	5229      	strh	r1, [r5, r0]
		dl += 2;
 800184a:	3402      	adds	r4, #2
		strcat(buff, "| ");
 800184c:	7093      	strb	r3, [r2, #2]
		dl += 2;
 800184e:	e7b7      	b.n	80017c0 <Report+0x14>
 8001850:	20000170 	.word	0x20000170
 8001854:	08004f20 	.word	0x08004f20
 8001858:	20000048 	.word	0x20000048
 800185c:	20000044 	.word	0x20000044
 8001860:	20000164 	.word	0x20000164
 8001864:	08004f1c 	.word	0x08004f1c

08001868 <uartParse>:
{
 8001868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!startAPI) {
 800186c:	4c6a      	ldr	r4, [pc, #424]	; (8001a18 <uartParse+0x1b0>)
 800186e:	7823      	ldrb	r3, [r4, #0]
 8001870:	bb6b      	cbnz	r3, 80018ce <uartParse+0x66>
 8001872:	f003 01ff 	and.w	r1, r3, #255	; 0xff
		if (rxByte != BACK_SPACE) {
 8001876:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <uartParse+0x1b4>)
			rxBuf[rxInd & 0x3ff] = (char)rxByte;
 8001878:	4d69      	ldr	r5, [pc, #420]	; (8001a20 <uartParse+0x1b8>)
		if (rxByte != BACK_SPACE) {
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	2a08      	cmp	r2, #8
 800187e:	d01f      	beq.n	80018c0 <uartParse+0x58>
			rxBuf[rxInd & 0x3ff] = (char)rxByte;
 8001880:	882b      	ldrh	r3, [r5, #0]
 8001882:	4e68      	ldr	r6, [pc, #416]	; (8001a24 <uartParse+0x1bc>)
 8001884:	f3c3 0009 	ubfx	r0, r3, #0, #10
	if (rxByte == 0x0a) {//end of line
 8001888:	2a0a      	cmp	r2, #10
			rxBuf[rxInd & 0x3ff] = (char)rxByte;
 800188a:	5432      	strb	r2, [r6, r0]
	if (rxByte == 0x0a) {//end of line
 800188c:	d124      	bne.n	80018d8 <uartParse+0x70>
		rxBuf[rxInd] = '\0';
 800188e:	54f1      	strb	r1, [r6, r3]
		if (rxInd > 0) if (rxBuf[rxInd - 1] == '\r') rxBuf[rxInd - 1] = '\0';
 8001890:	b123      	cbz	r3, 800189c <uartParse+0x34>
 8001892:	3b01      	subs	r3, #1
 8001894:	5cf2      	ldrb	r2, [r6, r3]
 8001896:	2a0d      	cmp	r2, #13
 8001898:	bf08      	it	eq
 800189a:	54f1      	strbeq	r1, [r6, r3]
		if ((ui = strstr(rxBuf, _progfw))) {//const char *_progfw = "prog:17308:0x4549ABBB";
 800189c:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <uartParse+0x1c0>)
 800189e:	4861      	ldr	r0, [pc, #388]	; (8001a24 <uartParse+0x1bc>)
 80018a0:	681f      	ldr	r7, [r3, #0]
 80018a2:	4639      	mov	r1, r7
 80018a4:	f002 fc1f 	bl	80040e6 <strstr>
 80018a8:	b1c8      	cbz	r0, 80018de <uartParse+0x76>
			if (ui == rxBuf) {
 80018aa:	42b0      	cmp	r0, r6
 80018ac:	d039      	beq.n	8001922 <uartParse+0xba>
		rxInd = 0;
 80018ae:	2100      	movs	r1, #0
 80018b0:	8029      	strh	r1, [r5, #0]
		memset(rxBuf, 0, sizeof(rxBuf));
 80018b2:	485c      	ldr	r0, [pc, #368]	; (8001a24 <uartParse+0x1bc>)
}
 80018b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		memset(rxBuf, 0, sizeof(rxBuf));
 80018b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018bc:	f002 bb14 	b.w	8003ee8 <memset>
			if (rxInd) rxInd--;
 80018c0:	882b      	ldrh	r3, [r5, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	bf38      	it	cc
 80018c6:	2301      	movcc	r3, #1
	} else rxInd++;
 80018c8:	802b      	strh	r3, [r5, #0]
}
 80018ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		blkRdy = 1;
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <uartParse+0x1c4>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
}
 80018d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018d8:	3301      	adds	r3, #1
 80018da:	b29b      	uxth	r3, r3
 80018dc:	e7f4      	b.n	80018c8 <uartParse+0x60>
		} else if ((ui = strstr(rxBuf, _getfw))) {//const char *_getfw = "read\r\n";
 80018de:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <uartParse+0x1c8>)
 80018e0:	4850      	ldr	r0, [pc, #320]	; (8001a24 <uartParse+0x1bc>)
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	f002 fbff 	bl	80040e6 <strstr>
 80018e8:	b148      	cbz	r0, 80018fe <uartParse+0x96>
			if (ui == rxBuf) {
 80018ea:	42b0      	cmp	r0, r6
 80018ec:	d1df      	bne.n	80018ae <uartParse+0x46>
				if (!startAPI) {
 80018ee:	7823      	ldrb	r3, [r4, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1dc      	bne.n	80018ae <uartParse+0x46>
					apiCmd = apiRead;
 80018f4:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <uartParse+0x1cc>)
					startAPI = true;
 80018f6:	2301      	movs	r3, #1
					apiCmd = apiRead;
 80018f8:	7013      	strb	r3, [r2, #0]
					startAPI = true;
 80018fa:	7023      	strb	r3, [r4, #0]
					apiCmd = apiRead;
 80018fc:	e7d7      	b.n	80018ae <uartParse+0x46>
		} else if ((ui = strstr(rxBuf, _apiStop))) {
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <uartParse+0x1d0>)
 8001900:	4848      	ldr	r0, [pc, #288]	; (8001a24 <uartParse+0x1bc>)
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	f002 fbef 	bl	80040e6 <strstr>
 8001908:	2800      	cmp	r0, #0
 800190a:	d051      	beq.n	80019b0 <uartParse+0x148>
			if (ui == rxBuf) {
 800190c:	42b0      	cmp	r0, r6
 800190e:	d1ce      	bne.n	80018ae <uartParse+0x46>
				if (!startAPI) {
 8001910:	7823      	ldrb	r3, [r4, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1cb      	bne.n	80018ae <uartParse+0x46>
					apiCmd = apiStop;
 8001916:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <uartParse+0x1cc>)
 8001918:	2102      	movs	r1, #2
					startAPI = true;
 800191a:	2301      	movs	r3, #1
					apiCmd = apiStop;
 800191c:	7011      	strb	r1, [r2, #0]
					startAPI = true;
 800191e:	7023      	strb	r3, [r4, #0]
					apiCmd = apiStop;
 8001920:	e7c5      	b.n	80018ae <uartParse+0x46>
				ui += strlen(_progfw);
 8001922:	4638      	mov	r0, r7
 8001924:	f7fe fc5c 	bl	80001e0 <strlen>
 8001928:	4406      	add	r6, r0
				char *uki = strchr(ui, ':');
 800192a:	4630      	mov	r0, r6
 800192c:	213a      	movs	r1, #58	; 0x3a
 800192e:	f002 fbcd 	bl	80040cc <strchr>
				if (uki) {
 8001932:	4680      	mov	r8, r0
 8001934:	2800      	cmp	r0, #0
 8001936:	d0ba      	beq.n	80018ae <uartParse+0x46>
					char *ucrc = strstr(uki, "0x");
 8001938:	4940      	ldr	r1, [pc, #256]	; (8001a3c <uartParse+0x1d4>)
 800193a:	f002 fbd4 	bl	80040e6 <strstr>
					if (ucrc) {
 800193e:	2800      	cmp	r0, #0
 8001940:	d031      	beq.n	80019a6 <uartParse+0x13e>
						ucrc += 2;
 8001942:	1c87      	adds	r7, r0, #2
						file_crc = hex2bin(ucrc, strlen(ucrc));
 8001944:	4638      	mov	r0, r7
 8001946:	f7fe fc4b 	bl	80001e0 <strlen>
 800194a:	b2c1      	uxtb	r1, r0
 800194c:	4638      	mov	r0, r7
 800194e:	f7ff fb0b 	bl	8000f68 <hex2bin>
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <uartParse+0x1d8>)
 8001954:	6018      	str	r0, [r3, #0]
					*uki = '\0';
 8001956:	2300      	movs	r3, #0
					if (strstr(ui, "0x")) {
 8001958:	4938      	ldr	r1, [pc, #224]	; (8001a3c <uartParse+0x1d4>)
					*uki = '\0';
 800195a:	f888 3000 	strb.w	r3, [r8]
					if (strstr(ui, "0x")) {
 800195e:	4630      	mov	r0, r6
 8001960:	f002 fbc1 	bl	80040e6 <strstr>
 8001964:	b1c8      	cbz	r0, 800199a <uartParse+0x132>
						ui += 2;
 8001966:	3602      	adds	r6, #2
						file_size = hex2bin(ui, strlen(ui));
 8001968:	4630      	mov	r0, r6
 800196a:	f7fe fc39 	bl	80001e0 <strlen>
 800196e:	b2c1      	uxtb	r1, r0
 8001970:	4630      	mov	r0, r6
 8001972:	f7ff faf9 	bl	8000f68 <hex2bin>
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <uartParse+0x1dc>)
 8001978:	6018      	str	r0, [r3, #0]
					if (file_size < MAX_API_SIZE) {
 800197a:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <uartParse+0x1e0>)
 800197c:	4290      	cmp	r0, r2
 800197e:	d809      	bhi.n	8001994 <uartParse+0x12c>
						if (!startAPI) {
 8001980:	7823      	ldrb	r3, [r4, #0]
 8001982:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001986:	2b00      	cmp	r3, #0
 8001988:	d191      	bne.n	80018ae <uartParse+0x46>
							apiCmd = apiProg;
 800198a:	492a      	ldr	r1, [pc, #168]	; (8001a34 <uartParse+0x1cc>)
							startAPI = true;
 800198c:	2301      	movs	r3, #1
							apiCmd = apiProg;
 800198e:	700a      	strb	r2, [r1, #0]
							startAPI = true;
 8001990:	7023      	strb	r3, [r4, #0]
							apiCmd = apiProg;
 8001992:	e78c      	b.n	80018ae <uartParse+0x46>
					} else file_size = 0;
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e789      	b.n	80018ae <uartParse+0x46>
						file_size = atoi(ui);
 800199a:	4630      	mov	r0, r6
 800199c:	f002 fa54 	bl	8003e48 <atoi>
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <uartParse+0x1dc>)
 80019a2:	6018      	str	r0, [r3, #0]
 80019a4:	e7e9      	b.n	800197a <uartParse+0x112>
						file_crc = atol(ucrc);
 80019a6:	f002 fa53 	bl	8003e50 <atol>
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <uartParse+0x1d8>)
 80019ac:	6018      	str	r0, [r3, #0]
 80019ae:	e7d2      	b.n	8001956 <uartParse+0xee>
		} else if ((ui = strstr(rxBuf, _switch))) {
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <uartParse+0x1e4>)
 80019b2:	481c      	ldr	r0, [pc, #112]	; (8001a24 <uartParse+0x1bc>)
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	f002 fb96 	bl	80040e6 <strstr>
 80019ba:	b160      	cbz	r0, 80019d6 <uartParse+0x16e>
			if (ui == rxBuf) {
 80019bc:	42b0      	cmp	r0, r6
 80019be:	f47f af76 	bne.w	80018ae <uartParse+0x46>
				if (!startAPI) {
 80019c2:	7823      	ldrb	r3, [r4, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f47f af72 	bne.w	80018ae <uartParse+0x46>
					apiCmd = apiSwitch;
 80019ca:	4a1a      	ldr	r2, [pc, #104]	; (8001a34 <uartParse+0x1cc>)
 80019cc:	2103      	movs	r1, #3
					startAPI = true;
 80019ce:	2301      	movs	r3, #1
					apiCmd = apiSwitch;
 80019d0:	7011      	strb	r1, [r2, #0]
					startAPI = true;
 80019d2:	7023      	strb	r3, [r4, #0]
					apiCmd = apiSwitch;
 80019d4:	e76b      	b.n	80018ae <uartParse+0x46>
		} else if ((ui = strstr(rxBuf, _next))) {
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <uartParse+0x1e8>)
 80019d8:	4812      	ldr	r0, [pc, #72]	; (8001a24 <uartParse+0x1bc>)
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	f002 fb83 	bl	80040e6 <strstr>
 80019e0:	b148      	cbz	r0, 80019f6 <uartParse+0x18e>
			if (ui == rxBuf) {
 80019e2:	42b0      	cmp	r0, r6
 80019e4:	f47f af63 	bne.w	80018ae <uartParse+0x46>
				if (!startAPI) startAPI = true;
 80019e8:	7823      	ldrb	r3, [r4, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f47f af5f 	bne.w	80018ae <uartParse+0x46>
 80019f0:	2301      	movs	r3, #1
 80019f2:	7023      	strb	r3, [r4, #0]
 80019f4:	e75b      	b.n	80018ae <uartParse+0x46>
		} else if ((ui = strstr(rxBuf, _done))) {
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <uartParse+0x1ec>)
 80019f8:	480a      	ldr	r0, [pc, #40]	; (8001a24 <uartParse+0x1bc>)
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	f002 fb73 	bl	80040e6 <strstr>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	f43f af54 	beq.w	80018ae <uartParse+0x46>
			if (ui == rxBuf) {
 8001a06:	42b0      	cmp	r0, r6
 8001a08:	f47f af51 	bne.w	80018ae <uartParse+0x46>
				apiCmd = apiDone;
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <uartParse+0x1cc>)
 8001a0e:	2104      	movs	r1, #4
				startAPI = true;
 8001a10:	2301      	movs	r3, #1
				apiCmd = apiDone;
 8001a12:	7011      	strb	r1, [r2, #0]
				startAPI = true;
 8001a14:	7023      	strb	r3, [r4, #0]
				apiCmd = apiDone;
 8001a16:	e74a      	b.n	80018ae <uartParse+0x46>
 8001a18:	2000016e 	.word	0x2000016e
 8001a1c:	20000580 	.word	0x20000580
 8001a20:	2000016c 	.word	0x2000016c
 8001a24:	20000584 	.word	0x20000584
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	20000038 	.word	0x20000038
 8001a30:	20000008 	.word	0x20000008
 8001a34:	2000002c 	.word	0x2000002c
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	08004f28 	.word	0x08004f28
 8001a40:	20000104 	.word	0x20000104
 8001a44:	20000108 	.word	0x20000108
 8001a48:	00077fef 	.word	0x00077fef
 8001a4c:	20000014 	.word	0x20000014
 8001a50:	2000000c 	.word	0x2000000c
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_UART_RxCpltCallback>:
{
 8001a58:	b510      	push	{r4, lr}
	if (huart->Instance == USART1) {
 8001a5a:	6802      	ldr	r2, [r0, #0]
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_UART_RxCpltCallback+0x38>)
	adrByte = NULL;
 8001a5e:	4c0d      	ldr	r4, [pc, #52]	; (8001a94 <HAL_UART_RxCpltCallback+0x3c>)
 8001a60:	2100      	movs	r1, #0
	if (huart->Instance == USART1) {
 8001a62:	429a      	cmp	r2, r3
{
 8001a64:	b082      	sub	sp, #8
	adrByte = NULL;
 8001a66:	6021      	str	r1, [r4, #0]
	if (huart->Instance == USART1) {
 8001a68:	d005      	beq.n	8001a76 <HAL_UART_RxCpltCallback+0x1e>
	HAL_UART_Receive_IT(huart, adrByte, 1);
 8001a6a:	2201      	movs	r2, #1
}
 8001a6c:	b002      	add	sp, #8
 8001a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(huart, adrByte, 1);
 8001a72:	f001 be35 	b.w	80036e0 <HAL_UART_Receive_IT>
 8001a76:	9001      	str	r0, [sp, #4]
		uartParse();
 8001a78:	f7ff fef6 	bl	8001868 <uartParse>
		adrByte = &rxByte;
 8001a7c:	4906      	ldr	r1, [pc, #24]	; (8001a98 <HAL_UART_RxCpltCallback+0x40>)
 8001a7e:	9801      	ldr	r0, [sp, #4]
 8001a80:	6021      	str	r1, [r4, #0]
	HAL_UART_Receive_IT(huart, adrByte, 1);
 8001a82:	2201      	movs	r2, #1
}
 8001a84:	b002      	add	sp, #8
 8001a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(huart, adrByte, 1);
 8001a8a:	f001 be29 	b.w	80036e0 <HAL_UART_Receive_IT>
 8001a8e:	bf00      	nop
 8001a90:	40011000 	.word	0x40011000
 8001a94:	20000160 	.word	0x20000160
 8001a98:	20000580 	.word	0x20000580

08001a9c <HAL_UART_ErrorCallback>:
	if ((huart->Instance == USART1)
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_UART_ErrorCallback+0x20>)
 8001a9e:	6803      	ldr	r3, [r0, #0]
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_UART_ErrorCallback+0x12>
			|| (huart->Instance == USART2)
 8001aa4:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d000      	beq.n	8001aae <HAL_UART_ErrorCallback+0x12>
}
 8001aac:	4770      	bx	lr
			) devError |= devUART;
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_UART_ErrorCallback+0x24>)
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	20000164 	.word	0x20000164

08001ac4 <HAL_UART_TxCpltCallback>:
	if (huart->Instance == USART1) uartReady = true;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_UART_TxCpltCallback+0x14>)
 8001ac6:	6802      	ldr	r2, [r0, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d000      	beq.n	8001ace <HAL_UART_TxCpltCallback+0xa>
}
 8001acc:	4770      	bx	lr
	if (huart->Instance == USART1) uartReady = true;
 8001ace:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_UART_TxCpltCallback+0x18>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	20000048 	.word	0x20000048

08001ae0 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM3) {// период срабатывания 10 мсек.
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ae2:	6802      	ldr	r2, [r0, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d000      	beq.n	8001aea <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001ae8:	4770      	bx	lr
	mSecCounter++;
 8001aea:	490b      	ldr	r1, [pc, #44]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001aee:	680b      	ldr	r3, [r1, #0]
		if (!(get_mSecCounter() % _1s)) {// 1 seconda
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x40>)
	mSecCounter++;
 8001af2:	3301      	adds	r3, #1
 8001af4:	fb02 f203 	mul.w	r2, r2, r3
		if (!(get_mSecCounter() % _1s)) {// 1 seconda
 8001af8:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
	mSecCounter++;
 8001afc:	600b      	str	r3, [r1, #0]
		if (!(get_mSecCounter() % _1s)) {// 1 seconda
 8001afe:	d3f3      	bcc.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0x8>
	SecCounter++;
 8001b00:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x44>)
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//set ON/OFF
 8001b02:	4809      	ldr	r0, [pc, #36]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x48>)
	SecCounter++;
 8001b04:	6813      	ldr	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//set ON/OFF
 8001b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	SecCounter++;
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//set ON/OFF
 8001b0e:	f000 bfdf 	b.w	8002ad0 <HAL_GPIO_TogglePin>
 8001b12:	bf00      	nop
 8001b14:	40000400 	.word	0x40000400
 8001b18:	20000168 	.word	0x20000168
 8001b1c:	c28f5c29 	.word	0xc28f5c29
 8001b20:	028f5c28 	.word	0x028f5c28
 8001b24:	2000015c 	.word	0x2000015c
 8001b28:	40020800 	.word	0x40020800

08001b2c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <Error_Handler+0x2>

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b500      	push	{lr}
 8001b32:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_MspInit+0x44>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	9200      	str	r2, [sp, #0]
 8001b3a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001b3c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001b40:	6459      	str	r1, [r3, #68]	; 0x44
 8001b42:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001b44:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001b48:	9100      	str	r1, [sp, #0]
 8001b4a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	9201      	str	r2, [sp, #4]
 8001b4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b50:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b54:	6419      	str	r1, [r3, #64]	; 0x40
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001b5e:	4611      	mov	r1, r2
 8001b60:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001b64:	f000 f9c8 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001b68:	2004      	movs	r0, #4

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	b003      	add	sp, #12
 8001b6c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001b70:	f000 b9fa 	b.w	8001f68 <HAL_NVIC_EnableIRQ>
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b7a:	6802      	ldr	r2, [r0, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d000      	beq.n	8001b82 <HAL_TIM_Base_MspInit+0xa>
 8001b80:	4770      	bx	lr
{
 8001b82:	b500      	push	{lr}
 8001b84:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b86:	2200      	movs	r2, #0
 8001b88:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8001b8c:	9201      	str	r2, [sp, #4]
 8001b8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b90:	f041 0102 	orr.w	r1, r1, #2
 8001b94:	6419      	str	r1, [r3, #64]	; 0x40
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	9301      	str	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001ba4:	f000 f9a8 	bl	8001ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba8:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001baa:	b003      	add	sp, #12
 8001bac:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bb0:	f000 b9da 	b.w	8001f68 <HAL_NVIC_EnableIRQ>
 8001bb4:	40000400 	.word	0x40000400

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8001bba:	6802      	ldr	r2, [r0, #0]
 8001bbc:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <HAL_UART_MspInit+0xfc>)
{
 8001bbe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001bc2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001bc8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001bcc:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART1)
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
#endif
  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bd0:	b009      	add	sp, #36	; 0x24
 8001bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd4:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001bd8:	9401      	str	r4, [sp, #4]
 8001bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001bdc:	4e36      	ldr	r6, [pc, #216]	; (8001cb8 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bde:	f042 0210 	orr.w	r2, r2, #16
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
 8001be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001be6:	f002 0210 	and.w	r2, r2, #16
 8001bea:	9201      	str	r2, [sp, #4]
 8001bec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	9402      	str	r4, [sp, #8]
 8001bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c04:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	9304      	str	r3, [sp, #16]
 8001c0e:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c10:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	4829      	ldr	r0, [pc, #164]	; (8001cbc <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c16:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c18:	e9cd 7306 	strd	r7, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f000 fe62 	bl	80028e4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001c20:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <HAL_UART_MspInit+0x108>)
 8001c22:	6032      	str	r2, [r6, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c28:	2040      	movs	r0, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c32:	6073      	str	r3, [r6, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c34:	60b0      	str	r0, [r6, #8]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c36:	2304      	movs	r3, #4
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c38:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3a:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c3e:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c42:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c46:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c48:	60f4      	str	r4, [r6, #12]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c4a:	61f4      	str	r4, [r6, #28]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c4c:	6131      	str	r1, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c4e:	f000 f9b3 	bl	8001fb8 <HAL_DMA_Init>
 8001c52:	bb48      	cbnz	r0, 8001ca8 <HAL_UART_MspInit+0xf0>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c54:	4c1b      	ldr	r4, [pc, #108]	; (8001cc4 <HAL_UART_MspInit+0x10c>)
 8001c56:	491c      	ldr	r1, [pc, #112]	; (8001cc8 <HAL_UART_MspInit+0x110>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c58:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c66:	6021      	str	r1, [r4, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c68:	6062      	str	r2, [r4, #4]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c6a:	2104      	movs	r1, #4
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c6c:	2203      	movs	r2, #3
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6e:	6120      	str	r0, [r4, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c70:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c72:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c74:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c76:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c82:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c86:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c88:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c8a:	f000 f995 	bl	8001fb8 <HAL_DMA_Init>
 8001c8e:	b970      	cbnz	r0, 8001cae <HAL_UART_MspInit+0xf6>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c90:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2103      	movs	r1, #3
 8001c96:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c98:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001c9a:	f000 f92d 	bl	8001ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c9e:	2025      	movs	r0, #37	; 0x25
 8001ca0:	f000 f962 	bl	8001f68 <HAL_NVIC_EnableIRQ>
}
 8001ca4:	b009      	add	sp, #36	; 0x24
 8001ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001ca8:	f7ff ff40 	bl	8001b2c <Error_Handler>
 8001cac:	e7d2      	b.n	8001c54 <HAL_UART_MspInit+0x9c>
      Error_Handler();
 8001cae:	f7ff ff3d 	bl	8001b2c <Error_Handler>
 8001cb2:	e7ed      	b.n	8001c90 <HAL_UART_MspInit+0xd8>
 8001cb4:	40011000 	.word	0x40011000
 8001cb8:	20000b60 	.word	0x20000b60
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	400264b8 	.word	0x400264b8
 8001cc4:	20000c68 	.word	0x20000c68
 8001cc8:	40026440 	.word	0x40026440

08001ccc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <NMI_Handler>
 8001cce:	bf00      	nop

08001cd0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <HardFault_Handler>
 8001cd2:	bf00      	nop

08001cd4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler>
 8001cd6:	bf00      	nop

08001cd8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <BusFault_Handler>
 8001cda:	bf00      	nop

08001cdc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler>
 8001cde:	bf00      	nop

08001ce0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop

08001ce4 <DebugMon_Handler>:
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <PendSV_Handler>:
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cec:	f000 b8cc 	b.w	8001e88 <HAL_IncTick>

08001cf0 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001cf0:	f000 bc36 	b.w	8002560 <HAL_FLASH_IRQHandler>

08001cf4 <EXTI2_IRQHandler>:
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <DMA1_Stream0_IRQHandler>:
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop

08001cfc <DMA1_Stream1_IRQHandler>:
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop

08001d00 <DMA1_Stream4_IRQHandler>:
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <DMA1_Stream6_IRQHandler>:
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop

08001d08 <ADC_IRQHandler>:
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop

08001d0c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d0c:	4801      	ldr	r0, [pc, #4]	; (8001d14 <TIM3_IRQHandler+0x8>)
 8001d0e:	f001 baaf 	b.w	8003270 <HAL_TIM_IRQHandler>
 8001d12:	bf00      	nop
 8001d14:	20000b18 	.word	0x20000b18

08001d18 <I2C1_EV_IRQHandler>:
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop

08001d1c <I2C1_ER_IRQHandler>:
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <SPI2_IRQHandler>:
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop

08001d24 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d24:	4801      	ldr	r0, [pc, #4]	; (8001d2c <USART1_IRQHandler+0x8>)
 8001d26:	f001 be69 	b.w	80039fc <HAL_UART_IRQHandler>
 8001d2a:	bf00      	nop
 8001d2c:	20000d28 	.word	0x20000d28

08001d30 <USART2_IRQHandler>:
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop

08001d34 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001d34:	4801      	ldr	r0, [pc, #4]	; (8001d3c <DMA2_Stream0_IRQHandler+0x8>)
 8001d36:	f000 ba71 	b.w	800221c <HAL_DMA_IRQHandler>
 8001d3a:	bf00      	nop
 8001d3c:	20000a04 	.word	0x20000a04

08001d40 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d40:	4801      	ldr	r0, [pc, #4]	; (8001d48 <DMA2_Stream2_IRQHandler+0x8>)
 8001d42:	f000 ba6b 	b.w	800221c <HAL_DMA_IRQHandler>
 8001d46:	bf00      	nop
 8001d48:	20000c68 	.word	0x20000c68

08001d4c <DMA2_Stream6_IRQHandler>:
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop

08001d50 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d50:	4801      	ldr	r0, [pc, #4]	; (8001d58 <DMA2_Stream7_IRQHandler+0x8>)
 8001d52:	f000 ba63 	b.w	800221c <HAL_DMA_IRQHandler>
 8001d56:	bf00      	nop
 8001d58:	20000b60 	.word	0x20000b60

08001d5c <USART6_IRQHandler>:
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d62:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001d64:	680b      	ldr	r3, [r1, #0]
{
 8001d66:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4c0c      	ldr	r4, [pc, #48]	; (8001d9c <_sbrk+0x3c>)
 8001d6a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001d6c:	b12b      	cbz	r3, 8001d7a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4418      	add	r0, r3
 8001d70:	4290      	cmp	r0, r2
 8001d72:	d807      	bhi.n	8001d84 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d74:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <_sbrk+0x40>)
 8001d7c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4418      	add	r0, r3
 8001d80:	4290      	cmp	r0, r2
 8001d82:	d9f7      	bls.n	8001d74 <_sbrk+0x14>
    errno = ENOMEM;
 8001d84:	f002 f870 	bl	8003e68 <__errno>
 8001d88:	230c      	movs	r3, #12
 8001d8a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd10      	pop	{r4, pc}
 8001d94:	20000570 	.word	0x20000570
 8001d98:	20020000 	.word	0x20020000
 8001d9c:	00000c00 	.word	0x00000c00
 8001da0:	20000fe8 	.word	0x20000fe8

08001da4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4a03      	ldr	r2, [pc, #12]	; (8001db4 <SystemInit+0x10>)
 8001da6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001daa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	; (8001e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001de2:	f7ff ffdf 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f002 f845 	bl	8003e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff f947 	bl	800107c <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001dfc:	08005178 	.word	0x08005178
  ldr r2, =_sbss
 8001e00:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001e04:	20000fe8 	.word	0x20000fe8

08001e08 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <DMA1_Stream2_IRQHandler>
	...

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_InitTick+0x3c>)
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_InitTick+0x40>)
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
{
 8001e16:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e1c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001e20:	fbb3 f0f0 	udiv	r0, r3, r0
 8001e24:	f000 f8ae 	bl	8001f84 <HAL_SYSTICK_Config>
 8001e28:	b908      	cbnz	r0, 8001e2e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2a:	2d0f      	cmp	r5, #15
 8001e2c:	d901      	bls.n	8001e32 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001e2e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001e30:	bd38      	pop	{r3, r4, r5, pc}
 8001e32:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	4602      	mov	r2, r0
 8001e36:	4629      	mov	r1, r5
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e3c:	f000 f85c 	bl	8001ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_InitTick+0x44>)
 8001e42:	4620      	mov	r0, r4
 8001e44:	601d      	str	r5, [r3, #0]
}
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
 8001e48:	20000050 	.word	0x20000050
 8001e4c:	2000004c 	.word	0x2000004c
 8001e50:	20000054 	.word	0x20000054

08001e54 <HAL_Init>:
{
 8001e54:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_Init+0x30>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f82d 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f7ff ffc8 	bl	8001e0c <HAL_InitTick>
  HAL_MspInit();
 8001e7c:	f7ff fe58 	bl	8001b30 <HAL_MspInit>
}
 8001e80:	2000      	movs	r0, #0
 8001e82:	bd08      	pop	{r3, pc}
 8001e84:	40023c00 	.word	0x40023c00

08001e88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e88:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <HAL_IncTick+0x10>)
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_IncTick+0x14>)
 8001e8c:	6811      	ldr	r1, [r2, #0]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	440b      	add	r3, r1
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000fb4 	.word	0x20000fb4
 8001e9c:	20000050 	.word	0x20000050

08001ea0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ea0:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <HAL_GetTick+0x8>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000fb4 	.word	0x20000fb4

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b538      	push	{r3, r4, r5, lr}
 8001eae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff fff6 	bl	8001ea0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001eb6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001eb8:	d002      	beq.n	8001ec0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_Delay+0x20>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	1b43      	subs	r3, r0, r5
 8001ec6:	42a3      	cmp	r3, r4
 8001ec8:	d3fa      	bcc.n	8001ec0 <HAL_Delay+0x14>
  {
  }
}
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
 8001ecc:	20000050 	.word	0x20000050

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8001ed2:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed6:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001edc:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ede:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001eec:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8001ef0:	60cb      	str	r3, [r1, #12]
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_NVIC_SetPriority+0x68>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f00:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f02:	f1c3 0507 	rsb	r5, r3, #7
 8001f06:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f08:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	bf28      	it	cs
 8001f0e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f10:	2c06      	cmp	r4, #6
 8001f12:	d919      	bls.n	8001f48 <HAL_NVIC_SetPriority+0x50>
 8001f14:	3b03      	subs	r3, #3
 8001f16:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f1a:	409c      	lsls	r4, r3
 8001f1c:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f24:	40ac      	lsls	r4, r5
 8001f26:	ea21 0104 	bic.w	r1, r1, r4
 8001f2a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001f32:	db0c      	blt.n	8001f4e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f38:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f3c:	0109      	lsls	r1, r1, #4
 8001f3e:	b2c9      	uxtb	r1, r1
 8001f40:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f44:	bc30      	pop	{r4, r5}
 8001f46:	4770      	bx	lr
 8001f48:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	e7e8      	b.n	8001f20 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_NVIC_SetPriority+0x6c>)
 8001f50:	f000 000f 	and.w	r0, r0, #15
 8001f54:	0109      	lsls	r1, r1, #4
 8001f56:	4403      	add	r3, r0
 8001f58:	b2c9      	uxtb	r1, r1
 8001f5a:	7619      	strb	r1, [r3, #24]
 8001f5c:	bc30      	pop	{r4, r5}
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	e000ecfc 	.word	0xe000ecfc

08001f68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	db07      	blt.n	8001f7c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6c:	f000 011f 	and.w	r1, r0, #31
 8001f70:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <HAL_NVIC_EnableIRQ+0x18>)
 8001f72:	0940      	lsrs	r0, r0, #5
 8001f74:	2301      	movs	r3, #1
 8001f76:	408b      	lsls	r3, r1
 8001f78:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	3801      	subs	r0, #1
 8001f86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f8a:	d20e      	bcs.n	8001faa <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	4c08      	ldr	r4, [pc, #32]	; (8001fb4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	20f0      	movs	r0, #240	; 0xf0
 8001f96:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8001fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	6019      	str	r1, [r3, #0]
 8001fa8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001faa:	2001      	movs	r0, #1
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff ff70 	bl	8001ea0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc0:	2c00      	cmp	r4, #0
 8001fc2:	d054      	beq.n	800206e <HAL_DMA_Init+0xb6>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001fc6:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc8:	2102      	movs	r1, #2
 8001fca:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001fce:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	4605      	mov	r5, r0
 8001fda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fdc:	e005      	b.n	8001fea <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fde:	f7ff ff5f 	bl	8001ea0 <HAL_GetTick>
 8001fe2:	1b43      	subs	r3, r0, r5
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d83b      	bhi.n	8002060 <HAL_DMA_Init+0xa8>
 8001fe8:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	07d1      	lsls	r1, r2, #31
 8001fee:	d4f6      	bmi.n	8001fde <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff0:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff4:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff8:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 8001ffc:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffe:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002000:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002004:	4302      	orrs	r2, r0
 8002006:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800200a:	4935      	ldr	r1, [pc, #212]	; (80020e0 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	4332      	orrs	r2, r6
 800200e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002010:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002012:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002014:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002016:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002018:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201c:	d029      	beq.n	8002072 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800201e:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002020:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002022:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002026:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002028:	b2da      	uxtb	r2, r3
 800202a:	492e      	ldr	r1, [pc, #184]	; (80020e4 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800202c:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800202e:	3a10      	subs	r2, #16
 8002030:	fba1 0102 	umull	r0, r1, r1, r2
 8002034:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002036:	482c      	ldr	r0, [pc, #176]	; (80020e8 <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002038:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800203c:	5c41      	ldrb	r1, [r0, r1]
 800203e:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002040:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002044:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002046:	bf88      	it	hi
 8002048:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204a:	223f      	movs	r2, #63	; 0x3f
 800204c:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800204e:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	2100      	movs	r1, #0
 8002052:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002054:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002056:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002058:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 800205c:	4608      	mov	r0, r1
}
 800205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002060:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002062:	2220      	movs	r2, #32
 8002064:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002066:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800206a:	4618      	mov	r0, r3
}
 800206c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800206e:	2001      	movs	r0, #1
}
 8002070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002072:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8002076:	4328      	orrs	r0, r5
 8002078:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 800207a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800207c:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800207e:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002080:	f020 0007 	bic.w	r0, r0, #7
 8002084:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002086:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800208a:	2d00      	cmp	r5, #0
 800208c:	d0cc      	beq.n	8002028 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800208e:	b17e      	cbz	r6, 80020b0 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002090:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002094:	d012      	beq.n	80020bc <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002096:	2a02      	cmp	r2, #2
 8002098:	d903      	bls.n	80020a2 <HAL_DMA_Init+0xea>
 800209a:	2a03      	cmp	r2, #3
 800209c:	d1c4      	bne.n	8002028 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800209e:	01ea      	lsls	r2, r5, #7
 80020a0:	d5c2      	bpl.n	8002028 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80020a2:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80020a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80020ac:	4618      	mov	r0, r3
}
 80020ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80020b0:	2a01      	cmp	r2, #1
 80020b2:	d011      	beq.n	80020d8 <HAL_DMA_Init+0x120>
 80020b4:	f032 0202 	bics.w	r2, r2, #2
 80020b8:	d1b6      	bne.n	8002028 <HAL_DMA_Init+0x70>
 80020ba:	e7f0      	b.n	800209e <HAL_DMA_Init+0xe6>
    switch (tmp)
 80020bc:	2a03      	cmp	r2, #3
 80020be:	d8b3      	bhi.n	8002028 <HAL_DMA_Init+0x70>
 80020c0:	a101      	add	r1, pc, #4	; (adr r1, 80020c8 <HAL_DMA_Init+0x110>)
 80020c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020a3 	.word	0x080020a3
 80020cc:	0800209f 	.word	0x0800209f
 80020d0:	080020a3 	.word	0x080020a3
 80020d4:	080020d9 	.word	0x080020d9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020d8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80020dc:	d1a4      	bne.n	8002028 <HAL_DMA_Init+0x70>
 80020de:	e7e0      	b.n	80020a2 <HAL_DMA_Init+0xea>
 80020e0:	f010803f 	.word	0xf010803f
 80020e4:	aaaaaaab 	.word	0xaaaaaaab
 80020e8:	0800502c 	.word	0x0800502c

080020ec <HAL_DMA_Start_IT>:
{
 80020ec:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80020ee:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80020f4:	2c01      	cmp	r4, #1
 80020f6:	d034      	beq.n	8002162 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80020f8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80020fc:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80020fe:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8002100:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002104:	d005      	beq.n	8002112 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002106:	2300      	movs	r3, #0
 8002108:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800210c:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800210e:	2002      	movs	r0, #2
}
 8002110:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002112:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002114:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002116:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002118:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800211c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800211e:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002120:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002122:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002126:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002128:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800212a:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 800212c:	bf0a      	itet	eq
 800212e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002130:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002132:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002134:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8002136:	bf18      	it	ne
 8002138:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213a:	233f      	movs	r3, #63	; 0x3f
 800213c:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800213e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002140:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	f043 0316 	orr.w	r3, r3, #22
 8002148:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800214a:	b11a      	cbz	r2, 8002154 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2000      	movs	r0, #0
}
 800215e:	bcf0      	pop	{r4, r5, r6, r7}
 8002160:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002162:	2002      	movs	r0, #2
}
 8002164:	bcf0      	pop	{r4, r5, r6, r7}
 8002166:	4770      	bx	lr

08002168 <HAL_DMA_Abort>:
{
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800216e:	f7ff fe97 	bl	8001ea0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002172:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002176:	2b02      	cmp	r3, #2
 8002178:	d006      	beq.n	8002188 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 800217a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217c:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800217e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002182:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002184:	2001      	movs	r0, #1
}
 8002186:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002188:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800218a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f022 0216 	bic.w	r2, r2, #22
 8002192:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219a:	4605      	mov	r5, r0
 800219c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800219e:	b339      	cbz	r1, 80021f0 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f022 0208 	bic.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b0:	e005      	b.n	80021be <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b2:	f7ff fe75 	bl	8001ea0 <HAL_GetTick>
 80021b6:	1b43      	subs	r3, r0, r5
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d80f      	bhi.n	80021dc <HAL_DMA_Abort+0x74>
 80021bc:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f013 0301 	ands.w	r3, r3, #1
 80021c4:	d1f5      	bne.n	80021b2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80021c8:	223f      	movs	r2, #63	; 0x3f
 80021ca:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80021cc:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ce:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 80021d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80021d4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  return HAL_OK;
 80021d8:	4618      	mov	r0, r3
}
 80021da:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021de:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 80021e0:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e2:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80021e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80021ec:	4618      	mov	r0, r3
}
 80021ee:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80021f2:	2a00      	cmp	r2, #0
 80021f4:	d1d4      	bne.n	80021a0 <HAL_DMA_Abort+0x38>
 80021f6:	e7d7      	b.n	80021a8 <HAL_DMA_Abort+0x40>

080021f8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d003      	beq.n	8002208 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002204:	2001      	movs	r0, #1
 8002206:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002208:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800220a:	2305      	movs	r3, #5
 800220c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002210:	6813      	ldr	r3, [r2, #0]
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002218:	2000      	movs	r0, #0
}
 800221a:	4770      	bx	lr

0800221c <HAL_DMA_IRQHandler>:
{
 800221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002220:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002222:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002224:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8002226:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002228:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800222a:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800222c:	4971      	ldr	r1, [pc, #452]	; (80023f4 <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800222e:	2208      	movs	r2, #8
 8002230:	409a      	lsls	r2, r3
 8002232:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 8002234:	680d      	ldr	r5, [r1, #0]
{
 8002236:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002238:	d004      	beq.n	8002244 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800223a:	6801      	ldr	r1, [r0, #0]
 800223c:	680f      	ldr	r7, [r1, #0]
 800223e:	0778      	lsls	r0, r7, #29
 8002240:	f100 808a 	bmi.w	8002358 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	4222      	tst	r2, r4
 800224a:	d004      	beq.n	8002256 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800224c:	f8d8 1000 	ldr.w	r1, [r8]
 8002250:	6949      	ldr	r1, [r1, #20]
 8002252:	0609      	lsls	r1, r1, #24
 8002254:	d478      	bmi.n	8002348 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002256:	2204      	movs	r2, #4
 8002258:	409a      	lsls	r2, r3
 800225a:	4222      	tst	r2, r4
 800225c:	d004      	beq.n	8002268 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800225e:	f8d8 1000 	ldr.w	r1, [r8]
 8002262:	6809      	ldr	r1, [r1, #0]
 8002264:	078f      	lsls	r7, r1, #30
 8002266:	d467      	bmi.n	8002338 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002268:	2210      	movs	r2, #16
 800226a:	409a      	lsls	r2, r3
 800226c:	4222      	tst	r2, r4
 800226e:	d004      	beq.n	800227a <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002270:	f8d8 1000 	ldr.w	r1, [r8]
 8002274:	680f      	ldr	r7, [r1, #0]
 8002276:	0738      	lsls	r0, r7, #28
 8002278:	d449      	bmi.n	800230e <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800227a:	2220      	movs	r2, #32
 800227c:	409a      	lsls	r2, r3
 800227e:	4222      	tst	r2, r4
 8002280:	d017      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002282:	f8d8 1000 	ldr.w	r1, [r8]
 8002286:	680c      	ldr	r4, [r1, #0]
 8002288:	06e0      	lsls	r0, r4, #27
 800228a:	d512      	bpl.n	80022b2 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800228c:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800228e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8002292:	2a05      	cmp	r2, #5
 8002294:	d073      	beq.n	800237e <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002296:	680b      	ldr	r3, [r1, #0]
 8002298:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800229c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800229e:	f000 8090 	beq.w	80023c2 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a2:	0319      	lsls	r1, r3, #12
 80022a4:	f140 809b 	bpl.w	80023de <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80022a8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80022ac:	b10b      	cbz	r3, 80022b2 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80022ae:	4640      	mov	r0, r8
 80022b0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80022b6:	b33b      	cbz	r3, 8002308 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80022bc:	07da      	lsls	r2, r3, #31
 80022be:	d51b      	bpl.n	80022f8 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 80022c0:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c4:	494c      	ldr	r1, [pc, #304]	; (80023f8 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c6:	2305      	movs	r3, #5
 80022c8:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80022cc:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022ce:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022d8:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80022da:	e002      	b.n	80022e2 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	07db      	lsls	r3, r3, #31
 80022e0:	d504      	bpl.n	80022ec <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80022e2:	9b01      	ldr	r3, [sp, #4]
 80022e4:	3301      	adds	r3, #1
 80022e6:	42ab      	cmp	r3, r5
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	d9f7      	bls.n	80022dc <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 80022ec:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80022ee:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80022f0:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80022f4:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80022f8:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80022fc:	b123      	cbz	r3, 8002308 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 80022fe:	4640      	mov	r0, r8
}
 8002300:	b002      	add	sp, #8
 8002302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8002306:	4718      	bx	r3
}
 8002308:	b002      	add	sp, #8
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800230e:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002310:	680a      	ldr	r2, [r1, #0]
 8002312:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002316:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002318:	d12a      	bne.n	8002370 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800231a:	05d7      	lsls	r7, r2, #23
 800231c:	d403      	bmi.n	8002326 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231e:	680a      	ldr	r2, [r1, #0]
 8002320:	f022 0208 	bic.w	r2, r2, #8
 8002324:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002326:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800232a:	2a00      	cmp	r2, #0
 800232c:	d0a5      	beq.n	800227a <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 800232e:	4640      	mov	r0, r8
 8002330:	4790      	blx	r2
 8002332:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8002336:	e7a0      	b.n	800227a <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002338:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800233a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800233e:	f042 0204 	orr.w	r2, r2, #4
 8002342:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002346:	e78f      	b.n	8002268 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002348:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800234a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800234e:	f042 0202 	orr.w	r2, r2, #2
 8002352:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002356:	e77e      	b.n	8002256 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002358:	680f      	ldr	r7, [r1, #0]
 800235a:	f027 0704 	bic.w	r7, r7, #4
 800235e:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002360:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002362:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800236e:	e769      	b.n	8002244 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002370:	0312      	lsls	r2, r2, #12
 8002372:	d5d8      	bpl.n	8002326 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002374:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002378:	2a00      	cmp	r2, #0
 800237a:	d1d8      	bne.n	800232e <HAL_DMA_IRQHandler+0x112>
 800237c:	e77d      	b.n	800227a <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002380:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002384:	f022 0216 	bic.w	r2, r2, #22
 8002388:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238a:	694a      	ldr	r2, [r1, #20]
 800238c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002390:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002392:	b354      	cbz	r4, 80023ea <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002394:	680a      	ldr	r2, [r1, #0]
 8002396:	f022 0208 	bic.w	r2, r2, #8
 800239a:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239c:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800239e:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
        hdma->State = HAL_DMA_STATE_READY;
 80023a6:	2401      	movs	r4, #1
        __HAL_UNLOCK(hdma);
 80023a8:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023aa:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80023ac:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80023b0:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80023b4:	2900      	cmp	r1, #0
 80023b6:	d0a7      	beq.n	8002308 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80023b8:	4640      	mov	r0, r8
}
 80023ba:	b002      	add	sp, #8
 80023bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80023c0:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80023c6:	f47f af6f 	bne.w	80022a8 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023ca:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80023cc:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023ce:	f022 0210 	bic.w	r2, r2, #16
 80023d2:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80023d4:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80023d8:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80023dc:	e764      	b.n	80022a8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80023de:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f47f af63 	bne.w	80022ae <HAL_DMA_IRQHandler+0x92>
 80023e8:	e763      	b.n	80022b2 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ea:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	d1d0      	bne.n	8002394 <HAL_DMA_IRQHandler+0x178>
 80023f2:	e7d3      	b.n	800239c <HAL_DMA_IRQHandler+0x180>
 80023f4:	2000004c 	.word	0x2000004c
 80023f8:	1b4e81b5 	.word	0x1b4e81b5

080023fc <HAL_DMA_RegisterCallback>:
{
 80023fc:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 80023fe:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002402:	2801      	cmp	r0, #1
 8002404:	d00f      	beq.n	8002426 <HAL_DMA_RegisterCallback+0x2a>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002406:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
 800240a:	2801      	cmp	r0, #1
 800240c:	d004      	beq.n	8002418 <HAL_DMA_RegisterCallback+0x1c>
    status =  HAL_ERROR;
 800240e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 8002416:	4770      	bx	lr
    switch (CallbackID)
 8002418:	2905      	cmp	r1, #5
 800241a:	d818      	bhi.n	800244e <HAL_DMA_RegisterCallback+0x52>
 800241c:	e8df f001 	tbb	[pc, r1]
 8002420:	0b0e1114 	.word	0x0b0e1114
 8002424:	0508      	.short	0x0508
  __HAL_LOCK(hdma);
 8002426:	2002      	movs	r0, #2
}
 8002428:	4770      	bx	lr
      hdma->XferAbortCallback = pCallback;
 800242a:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	2000      	movs	r0, #0
      break;
 800242e:	e7ef      	b.n	8002410 <HAL_DMA_RegisterCallback+0x14>
      hdma->XferErrorCallback = pCallback;
 8002430:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2000      	movs	r0, #0
      break;
 8002434:	e7ec      	b.n	8002410 <HAL_DMA_RegisterCallback+0x14>
      hdma->XferM1HalfCpltCallback = pCallback;
 8002436:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2000      	movs	r0, #0
      break;
 800243a:	e7e9      	b.n	8002410 <HAL_DMA_RegisterCallback+0x14>
      hdma->XferM1CpltCallback = pCallback;
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2000      	movs	r0, #0
      break;
 8002440:	e7e6      	b.n	8002410 <HAL_DMA_RegisterCallback+0x14>
      hdma->XferHalfCpltCallback = pCallback;
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2000      	movs	r0, #0
      break;
 8002446:	e7e3      	b.n	8002410 <HAL_DMA_RegisterCallback+0x14>
      hdma->XferCpltCallback = pCallback;
 8002448:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	4608      	mov	r0, r1
      break;
 800244c:	e7e0      	b.n	8002410 <HAL_DMA_RegisterCallback+0x14>
  if(HAL_DMA_STATE_READY == hdma->State)
 800244e:	2000      	movs	r0, #0
 8002450:	e7de      	b.n	8002410 <HAL_DMA_RegisterCallback+0x14>
 8002452:	bf00      	nop

08002454 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 8002454:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002458:	2b01      	cmp	r3, #1
 800245a:	d018      	beq.n	800248e <HAL_DMA_UnRegisterCallback+0x3a>
{
 800245c:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 800245e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002462:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002464:	42a2      	cmp	r2, r4
 8002466:	b2d3      	uxtb	r3, r2
  __HAL_LOCK(hdma);
 8002468:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800246c:	d007      	beq.n	800247e <HAL_DMA_UnRegisterCallback+0x2a>
    status = HAL_ERROR;
 800246e:	4623      	mov	r3, r4
  __HAL_UNLOCK(hdma);
 8002470:	2200      	movs	r2, #0
 8002472:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8002476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800247a:	4618      	mov	r0, r3
 800247c:	4770      	bx	lr
    switch (CallbackID)
 800247e:	2906      	cmp	r1, #6
 8002480:	d8f6      	bhi.n	8002470 <HAL_DMA_UnRegisterCallback+0x1c>
 8002482:	e8df f001 	tbb	[pc, r1]
 8002486:	1b1e      	.short	0x1b1e
 8002488:	0f121518 	.word	0x0f121518
 800248c:	07          	.byte	0x07
 800248d:	00          	.byte	0x00
  __HAL_LOCK(hdma);
 800248e:	2302      	movs	r3, #2
}
 8002490:	4618      	mov	r0, r3
 8002492:	4770      	bx	lr
      hdma->XferCpltCallback = NULL;
 8002494:	2300      	movs	r3, #0
      hdma->XferHalfCpltCallback = NULL;
 8002496:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
      hdma->XferM1HalfCpltCallback = NULL;
 800249a:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
      hdma->XferAbortCallback = NULL;
 800249e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
      break; 
 80024a2:	e7e5      	b.n	8002470 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferAbortCallback = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	6503      	str	r3, [r0, #80]	; 0x50
      break; 
 80024a8:	e7e2      	b.n	8002470 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferErrorCallback = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	64c3      	str	r3, [r0, #76]	; 0x4c
      break;
 80024ae:	e7df      	b.n	8002470 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferM1HalfCpltCallback = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	6483      	str	r3, [r0, #72]	; 0x48
      break;
 80024b4:	e7dc      	b.n	8002470 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferM1CpltCallback = NULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	6443      	str	r3, [r0, #68]	; 0x44
      break;
 80024ba:	e7d9      	b.n	8002470 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferHalfCpltCallback = NULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	6403      	str	r3, [r0, #64]	; 0x40
      break;
 80024c0:	e7d6      	b.n	8002470 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferCpltCallback = NULL;
 80024c2:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	460b      	mov	r3, r1
      hdma->XferCpltCallback = NULL;
 80024c6:	63c2      	str	r2, [r0, #60]	; 0x3c
      break;
 80024c8:	e7d2      	b.n	8002470 <HAL_DMA_UnRegisterCallback+0x1c>
 80024ca:	bf00      	nop

080024cc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <FLASH_SetErrorCode+0x88>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	06d0      	lsls	r0, r2, #27
 80024d2:	d505      	bpl.n	80024e0 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024d4:	4920      	ldr	r1, [pc, #128]	; (8002558 <FLASH_SetErrorCode+0x8c>)
 80024d6:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80024d8:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024da:	4302      	orrs	r2, r0
 80024dc:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80024de:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <FLASH_SetErrorCode+0x88>)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	0691      	lsls	r1, r2, #26
 80024e6:	d506      	bpl.n	80024f6 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80024e8:	491b      	ldr	r1, [pc, #108]	; (8002558 <FLASH_SetErrorCode+0x8c>)
 80024ea:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80024ec:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80024f4:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <FLASH_SetErrorCode+0x88>)
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	0652      	lsls	r2, r2, #25
 80024fc:	d506      	bpl.n	800250c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80024fe:	4916      	ldr	r1, [pc, #88]	; (8002558 <FLASH_SetErrorCode+0x8c>)
 8002500:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002502:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002504:	f042 0204 	orr.w	r2, r2, #4
 8002508:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800250a:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <FLASH_SetErrorCode+0x88>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	0610      	lsls	r0, r2, #24
 8002512:	d506      	bpl.n	8002522 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002514:	4910      	ldr	r1, [pc, #64]	; (8002558 <FLASH_SetErrorCode+0x8c>)
 8002516:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002518:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800251a:	f042 0202 	orr.w	r2, r2, #2
 800251e:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002520:	60d8      	str	r0, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <FLASH_SetErrorCode+0x88>)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	05d1      	lsls	r1, r2, #23
 8002528:	d507      	bpl.n	800253a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800252a:	490b      	ldr	r1, [pc, #44]	; (8002558 <FLASH_SetErrorCode+0x8c>)
 800252c:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800252e:	f44f 7080 	mov.w	r0, #256	; 0x100
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002538:	60d8      	str	r0, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <FLASH_SetErrorCode+0x88>)
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	0792      	lsls	r2, r2, #30
 8002540:	d506      	bpl.n	8002550 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002542:	4905      	ldr	r1, [pc, #20]	; (8002558 <FLASH_SetErrorCode+0x8c>)
 8002544:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002546:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002548:	f042 0220 	orr.w	r2, r2, #32
 800254c:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800254e:	60d8      	str	r0, [r3, #12]
  }
}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00
 8002558:	20000fb8 	.word	0x20000fb8

0800255c <HAL_FLASH_OperationErrorCallback>:
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop

08002560 <HAL_FLASH_IRQHandler>:
{
 8002560:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_FLASH_IRQHandler+0xc4>)
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002564:	4c30      	ldr	r4, [pc, #192]	; (8002628 <HAL_FLASH_IRQHandler+0xc8>)
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
{
 800256c:	b083      	sub	sp, #12
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800256e:	d00f      	beq.n	8002590 <HAL_FLASH_IRQHandler+0x30>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002570:	7823      	ldrb	r3, [r4, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d041      	beq.n	80025fa <HAL_FLASH_IRQHandler+0x9a>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002576:	7823      	ldrb	r3, [r4, #0]
 8002578:	2b02      	cmp	r3, #2
      addresstmp = pFlash.Bank;
 800257a:	bf0c      	ite	eq
 800257c:	6920      	ldreq	r0, [r4, #16]
      addresstmp = pFlash.Address;
 800257e:	6960      	ldrne	r0, [r4, #20]
 8002580:	9001      	str	r0, [sp, #4]
    FLASH_SetErrorCode();
 8002582:	f7ff ffa3 	bl	80024cc <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002586:	9801      	ldr	r0, [sp, #4]
 8002588:	f7ff ffe8 	bl	800255c <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800258c:	2300      	movs	r3, #0
 800258e:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_FLASH_IRQHandler+0xc4>)
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	07d2      	lsls	r2, r2, #31
 8002596:	d50c      	bpl.n	80025b2 <HAL_FLASH_IRQHandler+0x52>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002598:	2201      	movs	r2, #1
 800259a:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800259c:	7823      	ldrb	r3, [r4, #0]
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01b      	beq.n	80025da <HAL_FLASH_IRQHandler+0x7a>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80025a2:	7823      	ldrb	r3, [r4, #0]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d02d      	beq.n	8002604 <HAL_FLASH_IRQHandler+0xa4>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80025a8:	6960      	ldr	r0, [r4, #20]
 80025aa:	f7fe f81f 	bl	80005ec <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	7023      	strb	r3, [r4, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80025b2:	7823      	ldrb	r3, [r4, #0]
 80025b4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80025b8:	b96b      	cbnz	r3, 80025d6 <HAL_FLASH_IRQHandler+0x76>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_FLASH_IRQHandler+0xc4>)
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025c2:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80025ca:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80025d2:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80025d4:	7621      	strb	r1, [r4, #24]
}
 80025d6:	b003      	add	sp, #12
 80025d8:	bd30      	pop	{r4, r5, pc}
      pFlash.NbSectorsToErase--;
 80025da:	6863      	ldr	r3, [r4, #4]
 80025dc:	3b01      	subs	r3, #1
 80025de:	6063      	str	r3, [r4, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80025e0:	6863      	ldr	r3, [r4, #4]
 80025e2:	b1ab      	cbz	r3, 8002610 <HAL_FLASH_IRQHandler+0xb0>
        addresstmp = pFlash.Sector;
 80025e4:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80025e6:	f7fe f801 	bl	80005ec <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 80025ea:	68e3      	ldr	r3, [r4, #12]
 80025ec:	3301      	adds	r3, #1
 80025ee:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 80025f0:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80025f2:	7a21      	ldrb	r1, [r4, #8]
 80025f4:	f000 f8c2 	bl	800277c <FLASH_Erase_Sector>
 80025f8:	e7db      	b.n	80025b2 <HAL_FLASH_IRQHandler+0x52>
      pFlash.Sector = 0xFFFFFFFFU;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      addresstmp = pFlash.Sector;
 80025fe:	68e0      	ldr	r0, [r4, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 8002600:	60e3      	str	r3, [r4, #12]
 8002602:	e7bd      	b.n	8002580 <HAL_FLASH_IRQHandler+0x20>
        FLASH_FlushCaches() ;
 8002604:	f000 f8e0 	bl	80027c8 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002608:	6920      	ldr	r0, [r4, #16]
 800260a:	f7fd ffef 	bl	80005ec <HAL_FLASH_EndOfOperationCallback>
 800260e:	e7ce      	b.n	80025ae <HAL_FLASH_IRQHandler+0x4e>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002610:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002614:	60e5      	str	r5, [r4, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002616:	7023      	strb	r3, [r4, #0]
        FLASH_FlushCaches() ;
 8002618:	f000 f8d6 	bl	80027c8 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800261c:	4628      	mov	r0, r5
 800261e:	f7fd ffe5 	bl	80005ec <HAL_FLASH_EndOfOperationCallback>
 8002622:	e7c6      	b.n	80025b2 <HAL_FLASH_IRQHandler+0x52>
 8002624:	40023c00 	.word	0x40023c00
 8002628:	20000fb8 	.word	0x20000fb8

0800262c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_FLASH_Unlock+0x1c>)
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	2a00      	cmp	r2, #0
 8002632:	db01      	blt.n	8002638 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2000      	movs	r0, #0
}
 8002636:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002638:	4904      	ldr	r1, [pc, #16]	; (800264c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800263c:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800263e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002640:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	0fc0      	lsrs	r0, r0, #31
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00
 800264c:	45670123 	.word	0x45670123
 8002650:	cdef89ab 	.word	0xcdef89ab

08002654 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <HAL_FLASH_Lock+0x10>)
 8002656:	6913      	ldr	r3, [r2, #16]
 8002658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800265c:	6113      	str	r3, [r2, #16]
}
 800265e:	2000      	movs	r0, #0
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00

08002668 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <FLASH_WaitForLastOperation+0x4c>)
{ 
 800266a:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800266c:	2200      	movs	r2, #0
{ 
 800266e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002670:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8002672:	f7ff fc15 	bl	8001ea0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002676:	4d10      	ldr	r5, [pc, #64]	; (80026b8 <FLASH_WaitForLastOperation+0x50>)
  tickstart = HAL_GetTick();
 8002678:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800267a:	e001      	b.n	8002680 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800267c:	1c61      	adds	r1, r4, #1
 800267e:	d10d      	bne.n	800269c <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002680:	68eb      	ldr	r3, [r5, #12]
 8002682:	03da      	lsls	r2, r3, #15
 8002684:	d4fa      	bmi.n	800267c <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002686:	68eb      	ldr	r3, [r5, #12]
 8002688:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800268a:	bf44      	itt	mi
 800268c:	2301      	movmi	r3, #1
 800268e:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <FLASH_WaitForLastOperation+0x50>)
 8002692:	68d8      	ldr	r0, [r3, #12]
 8002694:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8002698:	d108      	bne.n	80026ac <FLASH_WaitForLastOperation+0x44>
}  
 800269a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800269c:	b124      	cbz	r4, 80026a8 <FLASH_WaitForLastOperation+0x40>
 800269e:	f7ff fbff 	bl	8001ea0 <HAL_GetTick>
 80026a2:	1b80      	subs	r0, r0, r6
 80026a4:	42a0      	cmp	r0, r4
 80026a6:	d9eb      	bls.n	8002680 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 80026a8:	2003      	movs	r0, #3
}  
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 80026ac:	f7ff ff0e 	bl	80024cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
}  
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
 80026b4:	20000fb8 	.word	0x20000fb8
 80026b8:	40023c00 	.word	0x40023c00

080026bc <HAL_FLASH_Program>:
{
 80026bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80026c0:	4e2c      	ldr	r6, [pc, #176]	; (8002774 <HAL_FLASH_Program+0xb8>)
 80026c2:	7e34      	ldrb	r4, [r6, #24]
 80026c4:	2c01      	cmp	r4, #1
 80026c6:	d033      	beq.n	8002730 <HAL_FLASH_Program+0x74>
 80026c8:	4681      	mov	r9, r0
 80026ca:	461d      	mov	r5, r3
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026cc:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80026d0:	2301      	movs	r3, #1
 80026d2:	460f      	mov	r7, r1
 80026d4:	4690      	mov	r8, r2
 80026d6:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026d8:	f7ff ffc6 	bl	8002668 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80026dc:	b118      	cbz	r0, 80026e6 <HAL_FLASH_Program+0x2a>
  __HAL_UNLOCK(&pFlash);
 80026de:	2300      	movs	r3, #0
 80026e0:	7633      	strb	r3, [r6, #24]
}
 80026e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_FLASH_Program+0xbc>)
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026ee:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80026f0:	691a      	ldr	r2, [r3, #16]
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80026f2:	f1b9 0f00 	cmp.w	r9, #0
 80026f6:	d01e      	beq.n	8002736 <HAL_FLASH_Program+0x7a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80026f8:	f1b9 0f01 	cmp.w	r9, #1
 80026fc:	d024      	beq.n	8002748 <HAL_FLASH_Program+0x8c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80026fe:	f1b9 0f02 	cmp.w	r9, #2
 8002702:	d02c      	beq.n	800275e <HAL_FLASH_Program+0xa2>
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002704:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002708:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	f042 0201 	orr.w	r2, r2, #1
 8002710:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002712:	f8c7 8000 	str.w	r8, [r7]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002716:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800271a:	607d      	str	r5, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800271c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002720:	f7ff ffa2 	bl	8002668 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_FLASH_Program+0xbc>)
 8002726:	6913      	ldr	r3, [r2, #16]
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6113      	str	r3, [r2, #16]
 800272e:	e7d6      	b.n	80026de <HAL_FLASH_Program+0x22>
  __HAL_LOCK(&pFlash);
 8002730:	2002      	movs	r0, #2
}
 8002732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002736:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002738:	6919      	ldr	r1, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800273a:	fa5f f288 	uxtb.w	r2, r8
  FLASH->CR |= FLASH_CR_PG;
 800273e:	f041 0101 	orr.w	r1, r1, #1
 8002742:	6119      	str	r1, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8002744:	703a      	strb	r2, [r7, #0]
}
 8002746:	e7e9      	b.n	800271c <HAL_FLASH_Program+0x60>
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800274e:	6919      	ldr	r1, [r3, #16]
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002750:	fa1f f288 	uxth.w	r2, r8
  FLASH->CR |= FLASH_CR_PG;
 8002754:	f041 0101 	orr.w	r1, r1, #1
 8002758:	6119      	str	r1, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800275a:	803a      	strh	r2, [r7, #0]
}
 800275c:	e7de      	b.n	800271c <HAL_FLASH_Program+0x60>
  FLASH->CR |= FLASH_PSIZE_WORD;
 800275e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002762:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800276c:	f8c7 8000 	str.w	r8, [r7]
}
 8002770:	e7d4      	b.n	800271c <HAL_FLASH_Program+0x60>
 8002772:	bf00      	nop
 8002774:	20000fb8 	.word	0x20000fb8
 8002778:	40023c00 	.word	0x40023c00

0800277c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800277c:	b139      	cbz	r1, 800278e <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800277e:	2901      	cmp	r1, #1
 8002780:	d01c      	beq.n	80027bc <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002782:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002784:	bf0c      	ite	eq
 8002786:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800278a:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <FLASH_Erase_Sector+0x48>)
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002796:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	4311      	orrs	r1, r2
 800279c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80027a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80027ac:	f040 0002 	orr.w	r0, r0, #2
 80027b0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027b8:	611a      	str	r2, [r3, #16]
}
 80027ba:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80027bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027c0:	e7e5      	b.n	800278e <FLASH_Erase_Sector+0x12>
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <FLASH_FlushCaches+0x54>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	0591      	lsls	r1, r2, #22
 80027ce:	d50f      	bpl.n	80027f0 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e6:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <FLASH_FlushCaches+0x54>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	0552      	lsls	r2, r2, #21
 80027f6:	d50f      	bpl.n	8002818 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fe:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800280e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002816:	601a      	str	r2, [r3, #0]
  }
}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00

08002820 <HAL_FLASHEx_Erase>:
{
 8002820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8002824:	4f2d      	ldr	r7, [pc, #180]	; (80028dc <HAL_FLASHEx_Erase+0xbc>)
 8002826:	7e3b      	ldrb	r3, [r7, #24]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d038      	beq.n	800289e <HAL_FLASHEx_Erase+0x7e>
 800282c:	2301      	movs	r3, #1
 800282e:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002830:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002834:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002836:	763b      	strb	r3, [r7, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002838:	f7ff ff16 	bl	8002668 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800283c:	4606      	mov	r6, r0
 800283e:	bb48      	cbnz	r0, 8002894 <HAL_FLASHEx_Erase+0x74>
    *SectorError = 0xFFFFFFFFU;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002844:	f8c8 3000 	str.w	r3, [r8]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d02b      	beq.n	80028a6 <HAL_FLASHEx_Erase+0x86>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800284e:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8002852:	442b      	add	r3, r5
 8002854:	429d      	cmp	r5, r3
 8002856:	d21b      	bcs.n	8002890 <HAL_FLASHEx_Erase+0x70>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002858:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80028e0 <HAL_FLASHEx_Erase+0xc0>
 800285c:	e005      	b.n	800286a <HAL_FLASHEx_Erase+0x4a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800285e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002862:	3501      	adds	r5, #1
 8002864:	4413      	add	r3, r2
 8002866:	42ab      	cmp	r3, r5
 8002868:	d912      	bls.n	8002890 <HAL_FLASHEx_Erase+0x70>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800286a:	7c21      	ldrb	r1, [r4, #16]
 800286c:	4628      	mov	r0, r5
 800286e:	f7ff ff85 	bl	800277c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002872:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002876:	f7ff fef7 	bl	8002668 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800287a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800287e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002882:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
 8002886:	2800      	cmp	r0, #0
 8002888:	d0e9      	beq.n	800285e <HAL_FLASHEx_Erase+0x3e>
          *SectorError = index;
 800288a:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800288e:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 8002890:	f7ff ff9a 	bl	80027c8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002894:	2300      	movs	r3, #0
 8002896:	763b      	strb	r3, [r7, #24]
}
 8002898:	4630      	mov	r0, r6
 800289a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800289e:	2602      	movs	r6, #2
}
 80028a0:	4630      	mov	r0, r6
 80028a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028a6:	4d0e      	ldr	r5, [pc, #56]	; (80028e0 <HAL_FLASHEx_Erase+0xc0>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80028a8:	6923      	ldr	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028aa:	692a      	ldr	r2, [r5, #16]
 80028ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028b0:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_MER;
 80028b2:	692a      	ldr	r2, [r5, #16]
 80028b4:	f042 0204 	orr.w	r2, r2, #4
 80028b8:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80028ba:	692a      	ldr	r2, [r5, #16]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c6:	612b      	str	r3, [r5, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028cc:	f7ff fecc 	bl	8002668 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80028d0:	692b      	ldr	r3, [r5, #16]
 80028d2:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028d6:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80028d8:	612b      	str	r3, [r5, #16]
 80028da:	e7d9      	b.n	8002890 <HAL_FLASHEx_Erase+0x70>
 80028dc:	20000fb8 	.word	0x20000fb8
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	468b      	mov	fp, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ea:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8002ab8 <HAL_GPIO_Init+0x1d4>
 80028ee:	6809      	ldr	r1, [r1, #0]
{
 80028f0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80028f4:	f04f 0a01 	mov.w	sl, #1
 80028f8:	46d9      	mov	r9, fp
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fc:	3301      	adds	r3, #1
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d079      	beq.n	80029f6 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8002902:	fa0a f203 	lsl.w	r2, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 800290a:	438a      	bics	r2, r1
 800290c:	d1f6      	bne.n	80028fc <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290e:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8002912:	f005 0203 	and.w	r2, r5, #3
 8002916:	1e54      	subs	r4, r2, #1
 8002918:	2c01      	cmp	r4, #1
 800291a:	ea4f 0743 	mov.w	r7, r3, lsl #1
 800291e:	d96d      	bls.n	80029fc <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002920:	2a03      	cmp	r2, #3
 8002922:	f040 80ac 	bne.w	8002a7e <HAL_GPIO_Init+0x19a>
 8002926:	40ba      	lsls	r2, r7
 8002928:	43d4      	mvns	r4, r2
 800292a:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 800292c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800292e:	9c00      	ldr	r4, [sp, #0]
 8002930:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002932:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002934:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002938:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800293a:	d0df      	beq.n	80028fc <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293c:	4c59      	ldr	r4, [pc, #356]	; (8002aa4 <HAL_GPIO_Init+0x1c0>)
 800293e:	2200      	movs	r2, #0
 8002940:	9203      	str	r2, [sp, #12]
 8002942:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002948:	6462      	str	r2, [r4, #68]	; 0x44
 800294a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800294c:	f023 0603 	bic.w	r6, r3, #3
 8002950:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002954:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002958:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800295c:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800295e:	f003 0403 	and.w	r4, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002962:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002964:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002966:	00a4      	lsls	r4, r4, #2
 8002968:	220f      	movs	r2, #15
 800296a:	40a2      	lsls	r2, r4
 800296c:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002970:	4f4d      	ldr	r7, [pc, #308]	; (8002aa8 <HAL_GPIO_Init+0x1c4>)
 8002972:	42b8      	cmp	r0, r7
 8002974:	d014      	beq.n	80029a0 <HAL_GPIO_Init+0xbc>
 8002976:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800297a:	42b8      	cmp	r0, r7
 800297c:	f000 8084 	beq.w	8002a88 <HAL_GPIO_Init+0x1a4>
 8002980:	4f4a      	ldr	r7, [pc, #296]	; (8002aac <HAL_GPIO_Init+0x1c8>)
 8002982:	42b8      	cmp	r0, r7
 8002984:	f000 8084 	beq.w	8002a90 <HAL_GPIO_Init+0x1ac>
 8002988:	4f49      	ldr	r7, [pc, #292]	; (8002ab0 <HAL_GPIO_Init+0x1cc>)
 800298a:	42b8      	cmp	r0, r7
 800298c:	f000 8085 	beq.w	8002a9a <HAL_GPIO_Init+0x1b6>
 8002990:	4f48      	ldr	r7, [pc, #288]	; (8002ab4 <HAL_GPIO_Init+0x1d0>)
 8002992:	42b8      	cmp	r0, r7
 8002994:	bf0c      	ite	eq
 8002996:	2704      	moveq	r7, #4
 8002998:	2707      	movne	r7, #7
 800299a:	fa07 f404 	lsl.w	r4, r7, r4
 800299e:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a0:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 80029a2:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029aa:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80029ac:	bf54      	ite	pl
 80029ae:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80029b0:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 80029b4:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80029b8:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029bc:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80029be:	bf54      	ite	pl
 80029c0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80029c2:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 80029c6:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ce:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80029d0:	bf54      	ite	pl
 80029d2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80029d4:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 80029d8:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 80029dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e0:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80029e6:	bf54      	ite	pl
 80029e8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80029ea:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 80029f0:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f4:	d185      	bne.n	8002902 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80029f6:	b005      	add	sp, #20
 80029f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80029fc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029fe:	2403      	movs	r4, #3
 8002a00:	40bc      	lsls	r4, r7
 8002a02:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a06:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8002a0a:	40be      	lsls	r6, r7
 8002a0c:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002a10:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a12:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a16:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1a:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1e:	409e      	lsls	r6, r3
 8002a20:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a24:	43e4      	mvns	r4, r4
 8002a26:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8002a28:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002a2a:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2c:	9c00      	ldr	r4, [sp, #0]
 8002a2e:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a32:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8002a36:	40be      	lsls	r6, r7
 8002a38:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002a3e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a40:	d001      	beq.n	8002a46 <HAL_GPIO_Init+0x162>
 8002a42:	40ba      	lsls	r2, r7
 8002a44:	e772      	b.n	800292c <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 8002a46:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8002a4a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002a52:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8002a56:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a58:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002a5c:	240f      	movs	r4, #15
 8002a5e:	fa04 f60e 	lsl.w	r6, r4, lr
 8002a62:	9c01      	ldr	r4, [sp, #4]
 8002a64:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a68:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a6c:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a6e:	fa04 f60e 	lsl.w	r6, r4, lr
 8002a72:	9c01      	ldr	r4, [sp, #4]
 8002a74:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8002a76:	40ba      	lsls	r2, r7
 8002a78:	f8c8 6020 	str.w	r6, [r8, #32]
 8002a7c:	e756      	b.n	800292c <HAL_GPIO_Init+0x48>
 8002a7e:	2403      	movs	r4, #3
 8002a80:	40bc      	lsls	r4, r7
 8002a82:	43e4      	mvns	r4, r4
 8002a84:	9400      	str	r4, [sp, #0]
 8002a86:	e7d0      	b.n	8002a2a <HAL_GPIO_Init+0x146>
 8002a88:	fa0a f404 	lsl.w	r4, sl, r4
 8002a8c:	4322      	orrs	r2, r4
 8002a8e:	e787      	b.n	80029a0 <HAL_GPIO_Init+0xbc>
 8002a90:	2702      	movs	r7, #2
 8002a92:	fa07 f404 	lsl.w	r4, r7, r4
 8002a96:	4322      	orrs	r2, r4
 8002a98:	e782      	b.n	80029a0 <HAL_GPIO_Init+0xbc>
 8002a9a:	2703      	movs	r7, #3
 8002a9c:	fa07 f404 	lsl.w	r4, r7, r4
 8002aa0:	4322      	orrs	r2, r4
 8002aa2:	e77d      	b.n	80029a0 <HAL_GPIO_Init+0xbc>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002abc:	6903      	ldr	r3, [r0, #16]
 8002abe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ac0:	bf14      	ite	ne
 8002ac2:	2001      	movne	r0, #1
 8002ac4:	2000      	moveq	r0, #0
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac8:	b902      	cbnz	r2, 8002acc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aca:	0409      	lsls	r1, r1, #16
 8002acc:	6181      	str	r1, [r0, #24]
  }
}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ad0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad2:	ea01 0203 	and.w	r2, r1, r3
 8002ad6:	ea21 0103 	bic.w	r1, r1, r3
 8002ada:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002ade:	6181      	str	r1, [r0, #24]
}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	f000 81a5 	beq.w	8002e34 <HAL_RCC_OscConfig+0x350>
{
 8002aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	6803      	ldr	r3, [r0, #0]
 8002af0:	07dd      	lsls	r5, r3, #31
{
 8002af2:	b082      	sub	sp, #8
 8002af4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	d52f      	bpl.n	8002b58 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af8:	49ac      	ldr	r1, [pc, #688]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002afa:	688a      	ldr	r2, [r1, #8]
 8002afc:	f002 020c 	and.w	r2, r2, #12
 8002b00:	2a04      	cmp	r2, #4
 8002b02:	f000 80ec 	beq.w	8002cde <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b06:	688a      	ldr	r2, [r1, #8]
 8002b08:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0c:	2a08      	cmp	r2, #8
 8002b0e:	f000 80e2 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b12:	6863      	ldr	r3, [r4, #4]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b18:	f000 80eb 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x20e>
 8002b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b20:	f000 8178 	beq.w	8002e14 <HAL_RCC_OscConfig+0x330>
 8002b24:	4da1      	ldr	r5, [pc, #644]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002b26:	682a      	ldr	r2, [r5, #0]
 8002b28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b2c:	602a      	str	r2, [r5, #0]
 8002b2e:	682a      	ldr	r2, [r5, #0]
 8002b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b34:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 80e0 	bne.w	8002cfc <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff f9b0 	bl	8001ea0 <HAL_GetTick>
 8002b40:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e005      	b.n	8002b50 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff f9ac 	bl	8001ea0 <HAL_GetTick>
 8002b48:	1b80      	subs	r0, r0, r6
 8002b4a:	2864      	cmp	r0, #100	; 0x64
 8002b4c:	f200 8100 	bhi.w	8002d50 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	039b      	lsls	r3, r3, #14
 8002b54:	d4f6      	bmi.n	8002b44 <HAL_RCC_OscConfig+0x60>
 8002b56:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b58:	079f      	lsls	r7, r3, #30
 8002b5a:	d528      	bpl.n	8002bae <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5c:	4a93      	ldr	r2, [pc, #588]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002b5e:	6891      	ldr	r1, [r2, #8]
 8002b60:	f011 0f0c 	tst.w	r1, #12
 8002b64:	f000 8090 	beq.w	8002c88 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b68:	6891      	ldr	r1, [r2, #8]
 8002b6a:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6e:	2908      	cmp	r1, #8
 8002b70:	f000 8086 	beq.w	8002c80 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b74:	68e3      	ldr	r3, [r4, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8106 	beq.w	8002d88 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b7c:	4b8c      	ldr	r3, [pc, #560]	; (8002db0 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7e:	4e8b      	ldr	r6, [pc, #556]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b84:	f7ff f98c 	bl	8001ea0 <HAL_GetTick>
 8002b88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	e005      	b.n	8002b98 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7ff f988 	bl	8001ea0 <HAL_GetTick>
 8002b90:	1b40      	subs	r0, r0, r5
 8002b92:	2802      	cmp	r0, #2
 8002b94:	f200 80dc 	bhi.w	8002d50 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	6833      	ldr	r3, [r6, #0]
 8002b9a:	0798      	lsls	r0, r3, #30
 8002b9c:	d5f6      	bpl.n	8002b8c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	6833      	ldr	r3, [r6, #0]
 8002ba0:	6922      	ldr	r2, [r4, #16]
 8002ba2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ba6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002baa:	6033      	str	r3, [r6, #0]
 8002bac:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	071a      	lsls	r2, r3, #28
 8002bb0:	d452      	bmi.n	8002c58 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	0758      	lsls	r0, r3, #29
 8002bb4:	d52f      	bpl.n	8002c16 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4a7d      	ldr	r2, [pc, #500]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002bb8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bba:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	d07e      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	4e7c      	ldr	r6, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x2d0>)
 8002bc4:	6833      	ldr	r3, [r6, #0]
 8002bc6:	05d9      	lsls	r1, r3, #23
 8002bc8:	f140 80b2 	bpl.w	8002d30 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bcc:	68a3      	ldr	r3, [r4, #8]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	f000 80c2 	beq.w	8002d58 <HAL_RCC_OscConfig+0x274>
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	f000 812f 	beq.w	8002e38 <HAL_RCC_OscConfig+0x354>
 8002bda:	4e74      	ldr	r6, [pc, #464]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002bdc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	6732      	str	r2, [r6, #112]	; 0x70
 8002be4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 80b8 	bne.w	8002d62 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7ff f955 	bl	8001ea0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002bfa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	e005      	b.n	8002c0a <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7ff f94f 	bl	8001ea0 <HAL_GetTick>
 8002c02:	1bc0      	subs	r0, r0, r7
 8002c04:	4540      	cmp	r0, r8
 8002c06:	f200 80a3 	bhi.w	8002d50 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002c0c:	0798      	lsls	r0, r3, #30
 8002c0e:	d4f6      	bmi.n	8002bfe <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	f040 8109 	bne.w	8002e28 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	69a0      	ldr	r0, [r4, #24]
 8002c18:	b1d0      	cbz	r0, 8002c50 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1a:	4d64      	ldr	r5, [pc, #400]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002c1c:	68ab      	ldr	r3, [r5, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	f000 80cc 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_RCC_OscConfig+0x2d4>)
 8002c2a:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c30:	f000 810c 	beq.w	8002e4c <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff f934 	bl	8001ea0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c38:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8002c3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3c:	e005      	b.n	8002c4a <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7ff f92f 	bl	8001ea0 <HAL_GetTick>
 8002c42:	1b40      	subs	r0, r0, r5
 8002c44:	2802      	cmp	r0, #2
 8002c46:	f200 8083 	bhi.w	8002d50 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	d4f6      	bmi.n	8002c3e <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2000      	movs	r0, #0
}
 8002c52:	b002      	add	sp, #8
 8002c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c58:	6963      	ldr	r3, [r4, #20]
 8002c5a:	b303      	cbz	r3, 8002c9e <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002c5c:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4e53      	ldr	r6, [pc, #332]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c64:	f7ff f91c 	bl	8001ea0 <HAL_GetTick>
 8002c68:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	e004      	b.n	8002c76 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7ff f918 	bl	8001ea0 <HAL_GetTick>
 8002c70:	1b40      	subs	r0, r0, r5
 8002c72:	2802      	cmp	r0, #2
 8002c74:	d86c      	bhi.n	8002d50 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002c78:	079b      	lsls	r3, r3, #30
 8002c7a:	d5f7      	bpl.n	8002c6c <HAL_RCC_OscConfig+0x188>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	e798      	b.n	8002bb2 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c80:	6852      	ldr	r2, [r2, #4]
 8002c82:	0256      	lsls	r6, r2, #9
 8002c84:	f53f af76 	bmi.w	8002b74 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	0795      	lsls	r5, r2, #30
 8002c8e:	d543      	bpl.n	8002d18 <HAL_RCC_OscConfig+0x234>
 8002c90:	68e2      	ldr	r2, [r4, #12]
 8002c92:	2a01      	cmp	r2, #1
 8002c94:	d040      	beq.n	8002d18 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8002c96:	2001      	movs	r0, #1
}
 8002c98:	b002      	add	sp, #8
 8002c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002c9e:	4a47      	ldr	r2, [pc, #284]	; (8002dbc <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4e42      	ldr	r6, [pc, #264]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ca4:	f7ff f8fc 	bl	8001ea0 <HAL_GetTick>
 8002ca8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002caa:	e004      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cac:	f7ff f8f8 	bl	8001ea0 <HAL_GetTick>
 8002cb0:	1b40      	subs	r0, r0, r5
 8002cb2:	2802      	cmp	r0, #2
 8002cb4:	d84c      	bhi.n	8002d50 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002cb8:	079f      	lsls	r7, r3, #30
 8002cba:	d4f7      	bmi.n	8002cac <HAL_RCC_OscConfig+0x1c8>
 8002cbc:	e7de      	b.n	8002c7c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cd2:	2501      	movs	r5, #1
 8002cd4:	e775      	b.n	8002bc2 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	684a      	ldr	r2, [r1, #4]
 8002cd8:	0250      	lsls	r0, r2, #9
 8002cda:	f57f af1a 	bpl.w	8002b12 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cde:	4a33      	ldr	r2, [pc, #204]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	0391      	lsls	r1, r2, #14
 8002ce4:	f57f af38 	bpl.w	8002b58 <HAL_RCC_OscConfig+0x74>
 8002ce8:	6862      	ldr	r2, [r4, #4]
 8002cea:	2a00      	cmp	r2, #0
 8002cec:	f47f af34 	bne.w	8002b58 <HAL_RCC_OscConfig+0x74>
 8002cf0:	e7d1      	b.n	8002c96 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf2:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f8d0 	bl	8001ea0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d00:	4e2a      	ldr	r6, [pc, #168]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8002d02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d04:	e004      	b.n	8002d10 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d06:	f7ff f8cb 	bl	8001ea0 <HAL_GetTick>
 8002d0a:	1b40      	subs	r0, r0, r5
 8002d0c:	2864      	cmp	r0, #100	; 0x64
 8002d0e:	d81f      	bhi.n	8002d50 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d10:	6833      	ldr	r3, [r6, #0]
 8002d12:	039a      	lsls	r2, r3, #14
 8002d14:	d5f7      	bpl.n	8002d06 <HAL_RCC_OscConfig+0x222>
 8002d16:	e71e      	b.n	8002b56 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4924      	ldr	r1, [pc, #144]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002d1a:	6920      	ldr	r0, [r4, #16]
 8002d1c:	680a      	ldr	r2, [r1, #0]
 8002d1e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002d22:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002d26:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d28:	071a      	lsls	r2, r3, #28
 8002d2a:	f57f af42 	bpl.w	8002bb2 <HAL_RCC_OscConfig+0xce>
 8002d2e:	e793      	b.n	8002c58 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d30:	6833      	ldr	r3, [r6, #0]
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002d38:	f7ff f8b2 	bl	8001ea0 <HAL_GetTick>
 8002d3c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	6833      	ldr	r3, [r6, #0]
 8002d40:	05da      	lsls	r2, r3, #23
 8002d42:	f53f af43 	bmi.w	8002bcc <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7ff f8ab 	bl	8001ea0 <HAL_GetTick>
 8002d4a:	1bc0      	subs	r0, r0, r7
 8002d4c:	2802      	cmp	r0, #2
 8002d4e:	d9f6      	bls.n	8002d3e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002d50:	2003      	movs	r0, #3
}
 8002d52:	b002      	add	sp, #8
 8002d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
 8002d5a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d62:	f7ff f89d 	bl	8001ea0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	4f11      	ldr	r7, [pc, #68]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8002d68:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	e004      	b.n	8002d7a <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7ff f896 	bl	8001ea0 <HAL_GetTick>
 8002d74:	1b80      	subs	r0, r0, r6
 8002d76:	4540      	cmp	r0, r8
 8002d78:	d8ea      	bhi.n	8002d50 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7c:	079b      	lsls	r3, r3, #30
 8002d7e:	d5f7      	bpl.n	8002d70 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8002d80:	2d00      	cmp	r5, #0
 8002d82:	f43f af48 	beq.w	8002c16 <HAL_RCC_OscConfig+0x132>
 8002d86:	e04f      	b.n	8002e28 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 8002d88:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	4e08      	ldr	r6, [pc, #32]	; (8002dac <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8002d8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d8e:	f7ff f887 	bl	8001ea0 <HAL_GetTick>
 8002d92:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d94:	e004      	b.n	8002da0 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7ff f883 	bl	8001ea0 <HAL_GetTick>
 8002d9a:	1b40      	subs	r0, r0, r5
 8002d9c:	2802      	cmp	r0, #2
 8002d9e:	d8d7      	bhi.n	8002d50 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da0:	6833      	ldr	r3, [r6, #0]
 8002da2:	0799      	lsls	r1, r3, #30
 8002da4:	d4f7      	bmi.n	8002d96 <HAL_RCC_OscConfig+0x2b2>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	e701      	b.n	8002bae <HAL_RCC_OscConfig+0xca>
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	42470000 	.word	0x42470000
 8002db4:	40007000 	.word	0x40007000
 8002db8:	42470060 	.word	0x42470060
 8002dbc:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc0:	2801      	cmp	r0, #1
 8002dc2:	f43f af46 	beq.w	8002c52 <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8002dc6:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc8:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	4291      	cmp	r1, r2
 8002dd0:	f47f af61 	bne.w	8002c96 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd4:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd6:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	4291      	cmp	r1, r2
 8002ddc:	f47f af5b 	bne.w	8002c96 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002de2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002de6:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002dec:	f47f af53 	bne.w	8002c96 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002df2:	0852      	lsrs	r2, r2, #1
 8002df4:	3a01      	subs	r2, #1
 8002df6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfa:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002dfe:	f47f af4a 	bne.w	8002c96 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e04:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e08:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002e0c:	bf14      	ite	ne
 8002e0e:	2001      	movne	r0, #1
 8002e10:	2000      	moveq	r0, #0
 8002e12:	e71e      	b.n	8002c52 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCC_OscConfig+0x3c4>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e24:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e26:	e769      	b.n	8002cfc <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <HAL_RCC_OscConfig+0x3c4>)
 8002e2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	e6f0      	b.n	8002c16 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002e34:	2001      	movs	r0, #1
}
 8002e36:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x3c4>)
 8002e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e3c:	f042 0204 	orr.w	r2, r2, #4
 8002e40:	671a      	str	r2, [r3, #112]	; 0x70
 8002e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4a:	e78a      	b.n	8002d62 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f828 	bl	8001ea0 <HAL_GetTick>
 8002e50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e005      	b.n	8002e60 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7ff f824 	bl	8001ea0 <HAL_GetTick>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	2802      	cmp	r0, #2
 8002e5c:	f63f af78 	bhi.w	8002d50 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	0199      	lsls	r1, r3, #6
 8002e64:	d4f6      	bmi.n	8002e54 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e66:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8002e6a:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8002e6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e70:	4333      	orrs	r3, r6
 8002e72:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e76:	0852      	lsrs	r2, r2, #1
 8002e78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e7c:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002e7e:	490b      	ldr	r1, [pc, #44]	; (8002eac <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	4e09      	ldr	r6, [pc, #36]	; (8002ea8 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002e86:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e88:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e8a:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f808 	bl	8001ea0 <HAL_GetTick>
 8002e90:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	e005      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7ff f804 	bl	8001ea0 <HAL_GetTick>
 8002e98:	1b00      	subs	r0, r0, r4
 8002e9a:	2802      	cmp	r0, #2
 8002e9c:	f63f af58 	bhi.w	8002d50 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea0:	6833      	ldr	r3, [r6, #0]
 8002ea2:	019a      	lsls	r2, r3, #6
 8002ea4:	d5f6      	bpl.n	8002e94 <HAL_RCC_OscConfig+0x3b0>
 8002ea6:	e6d3      	b.n	8002c50 <HAL_RCC_OscConfig+0x16c>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470060 	.word	0x42470060

08002eb0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb0:	4917      	ldr	r1, [pc, #92]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8002eb2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb4:	688b      	ldr	r3, [r1, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d01b      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x46>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d117      	bne.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec4:	684b      	ldr	r3, [r1, #4]
 8002ec6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ece:	d114      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed0:	6849      	ldr	r1, [r1, #4]
 8002ed2:	4810      	ldr	r0, [pc, #64]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x64>)
 8002ed4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ed8:	fba1 0100 	umull	r0, r1, r1, r0
 8002edc:	f7fd f9d8 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x60>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ee8:	3301      	adds	r3, #1
 8002eea:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002eec:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ef0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002ef2:	4808      	ldr	r0, [pc, #32]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002ef4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef6:	4808      	ldr	r0, [pc, #32]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002ef8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efa:	684b      	ldr	r3, [r1, #4]
 8002efc:	4806      	ldr	r0, [pc, #24]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x68>)
 8002efe:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002f02:	fba3 0100 	umull	r0, r1, r3, r0
 8002f06:	2300      	movs	r3, #0
 8002f08:	f7fd f9c2 	bl	8000290 <__aeabi_uldivmod>
 8002f0c:	e7e8      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x30>
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	017d7840 	.word	0x017d7840

08002f1c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f000 8087 	beq.w	8003030 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f22:	4a48      	ldr	r2, [pc, #288]	; (8003044 <HAL_RCC_ClockConfig+0x128>)
 8002f24:	6813      	ldr	r3, [r2, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	428b      	cmp	r3, r1
{
 8002f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f30:	460d      	mov	r5, r1
 8002f32:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f34:	d209      	bcs.n	8002f4a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	b2cb      	uxtb	r3, r1
 8002f38:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	6813      	ldr	r3, [r2, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	428b      	cmp	r3, r1
 8002f42:	d002      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002f44:	2001      	movs	r0, #1
}
 8002f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	0798      	lsls	r0, r3, #30
 8002f4e:	d514      	bpl.n	8002f7a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	0759      	lsls	r1, r3, #29
 8002f52:	d504      	bpl.n	8002f5e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f54:	493c      	ldr	r1, [pc, #240]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 8002f56:	688a      	ldr	r2, [r1, #8]
 8002f58:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002f5c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	071a      	lsls	r2, r3, #28
 8002f60:	d504      	bpl.n	8002f6c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f62:	4939      	ldr	r1, [pc, #228]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 8002f64:	688a      	ldr	r2, [r1, #8]
 8002f66:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002f6a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4936      	ldr	r1, [pc, #216]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 8002f6e:	68a0      	ldr	r0, [r4, #8]
 8002f70:	688a      	ldr	r2, [r1, #8]
 8002f72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f76:	4302      	orrs	r2, r0
 8002f78:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	07df      	lsls	r7, r3, #31
 8002f7c:	d521      	bpl.n	8002fc2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	6862      	ldr	r2, [r4, #4]
 8002f80:	2a01      	cmp	r2, #1
 8002f82:	d057      	beq.n	8003034 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f84:	1e93      	subs	r3, r2, #2
 8002f86:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f88:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8c:	d94d      	bls.n	800302a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	0799      	lsls	r1, r3, #30
 8002f90:	d5d8      	bpl.n	8002f44 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4e2d      	ldr	r6, [pc, #180]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 8002f94:	68b3      	ldr	r3, [r6, #8]
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002f9e:	f7fe ff7f 	bl	8001ea0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002fa6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa8:	e004      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002faa:	f7fe ff79 	bl	8001ea0 <HAL_GetTick>
 8002fae:	1bc0      	subs	r0, r0, r7
 8002fb0:	4540      	cmp	r0, r8
 8002fb2:	d844      	bhi.n	800303e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb4:	68b3      	ldr	r3, [r6, #8]
 8002fb6:	6862      	ldr	r2, [r4, #4]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fc0:	d1f3      	bne.n	8002faa <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc2:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_RCC_ClockConfig+0x128>)
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	42ab      	cmp	r3, r5
 8002fcc:	d906      	bls.n	8002fdc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	b2eb      	uxtb	r3, r5
 8002fd0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	42ab      	cmp	r3, r5
 8002fda:	d1b3      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	075a      	lsls	r2, r3, #29
 8002fe0:	d506      	bpl.n	8002ff0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe2:	4919      	ldr	r1, [pc, #100]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 8002fe4:	68e0      	ldr	r0, [r4, #12]
 8002fe6:	688a      	ldr	r2, [r1, #8]
 8002fe8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002fec:	4302      	orrs	r2, r0
 8002fee:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	071b      	lsls	r3, r3, #28
 8002ff2:	d507      	bpl.n	8003004 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 8002ff6:	6921      	ldr	r1, [r4, #16]
 8002ff8:	6893      	ldr	r3, [r2, #8]
 8002ffa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ffe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003002:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003004:	f7ff ff54 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8003008:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 800300a:	4c10      	ldr	r4, [pc, #64]	; (800304c <HAL_RCC_ClockConfig+0x130>)
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	4910      	ldr	r1, [pc, #64]	; (8003050 <HAL_RCC_ClockConfig+0x134>)
 8003010:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003014:	4603      	mov	r3, r0
 8003016:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003018:	480e      	ldr	r0, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800301c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003020:	f7fe fef4 	bl	8001e0c <HAL_InitTick>
  return HAL_OK;
 8003024:	2000      	movs	r0, #0
}
 8003026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302a:	0198      	lsls	r0, r3, #6
 800302c:	d4b1      	bmi.n	8002f92 <HAL_RCC_ClockConfig+0x76>
 800302e:	e789      	b.n	8002f44 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
}
 8003032:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <HAL_RCC_ClockConfig+0x12c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	039e      	lsls	r6, r3, #14
 800303a:	d4aa      	bmi.n	8002f92 <HAL_RCC_ClockConfig+0x76>
 800303c:	e782      	b.n	8002f44 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800303e:	2003      	movs	r0, #3
 8003040:	e781      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2a>
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00
 8003048:	40023800 	.word	0x40023800
 800304c:	08005014 	.word	0x08005014
 8003050:	2000004c 	.word	0x2000004c
 8003054:	20000054 	.word	0x20000054

08003058 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_RCC_GetPCLK1Freq+0x14>)
 800305a:	4a05      	ldr	r2, [pc, #20]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x18>)
 800305c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800305e:	4905      	ldr	r1, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003060:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003064:	6808      	ldr	r0, [r1, #0]
 8003066:	5cd3      	ldrb	r3, [r2, r3]
}
 8003068:	40d8      	lsrs	r0, r3
 800306a:	4770      	bx	lr
 800306c:	40023800 	.word	0x40023800
 8003070:	08005024 	.word	0x08005024
 8003074:	2000004c 	.word	0x2000004c

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <HAL_RCC_GetPCLK2Freq+0x14>)
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x18>)
 800307c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800307e:	4905      	ldr	r1, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003080:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003084:	6808      	ldr	r0, [r1, #0]
 8003086:	5cd3      	ldrb	r3, [r2, r3]
}
 8003088:	40d8      	lsrs	r0, r3
 800308a:	4770      	bx	lr
 800308c:	40023800 	.word	0x40023800
 8003090:	08005024 	.word	0x08005024
 8003094:	2000004c 	.word	0x2000004c

08003098 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003098:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800309c:	2b01      	cmp	r3, #1
 800309e:	d127      	bne.n	80030f0 <HAL_TIM_Base_Start_IT+0x58>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a0:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	4915      	ldr	r1, [pc, #84]	; (80030f8 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	2202      	movs	r2, #2
 80030a6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030aa:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ac:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b4:	d011      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x42>
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d00e      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x42>
 80030bc:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <HAL_TIM_Base_Start_IT+0x64>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00b      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x42>
 80030c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d007      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x42>
 80030ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x42>
 80030d2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d104      	bne.n	80030e4 <HAL_TIM_Base_Start_IT+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e0:	2a06      	cmp	r2, #6
 80030e2:	d007      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ec:	2000      	movs	r0, #0
 80030ee:	4770      	bx	lr
    return HAL_ERROR;
 80030f0:	2001      	movs	r0, #1
 80030f2:	4770      	bx	lr
  return HAL_OK;
 80030f4:	2000      	movs	r0, #0
}
 80030f6:	4770      	bx	lr
 80030f8:	40010000 	.word	0x40010000
 80030fc:	40000400 	.word	0x40000400

08003100 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003100:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d075      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0xf4>
 8003108:	4602      	mov	r2, r0
{
 800310a:	b4f0      	push	{r4, r5, r6, r7}

  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	2302      	movs	r3, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800310e:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003114:	2001      	movs	r0, #1
 8003116:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800311a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800311c:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311e:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 8003122:	f025 0577 	bic.w	r5, r5, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8003126:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003128:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800312a:	d065      	beq.n	80031f8 <HAL_TIM_ConfigClockSource+0xf8>
 800312c:	d824      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x78>
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d07c      	beq.n	800322c <HAL_TIM_ConfigClockSource+0x12c>
 8003132:	d94b      	bls.n	80031cc <HAL_TIM_ConfigClockSource+0xcc>
 8003134:	2b50      	cmp	r3, #80	; 0x50
 8003136:	d117      	bne.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003138:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800313a:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313c:	6848      	ldr	r0, [r1, #4]
 800313e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003140:	f026 0601 	bic.w	r6, r6, #1
 8003144:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003146:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003148:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800314c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003150:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003152:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003156:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003158:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800315a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003160:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003164:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003168:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800316a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800316c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003170:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003174:	bcf0      	pop	{r4, r5, r6, r7}
 8003176:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317c:	d038      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0xf0>
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d110      	bne.n	80031a6 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003184:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003188:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800318a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800318c:	432b      	orrs	r3, r5
 800318e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003192:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003196:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003198:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800319a:	68a3      	ldr	r3, [r4, #8]
 800319c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a0:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2000      	movs	r0, #0
      break;
 80031a4:	e7e0      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80031a6:	2b70      	cmp	r3, #112	; 0x70
 80031a8:	d1de      	bne.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031aa:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80031ae:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80031b0:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b2:	432b      	orrs	r3, r5
 80031b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031bc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80031be:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80031c0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80031c6:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2000      	movs	r0, #0
      break;
 80031ca:	e7cd      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d002      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xd6>
 80031d0:	d90a      	bls.n	80031e8 <HAL_TIM_ConfigClockSource+0xe8>
 80031d2:	2b30      	cmp	r3, #48	; 0x30
 80031d4:	d1c8      	bne.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80031d6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031dc:	430b      	orrs	r3, r1
 80031de:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80031e2:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2000      	movs	r0, #0
}
 80031e6:	e7bf      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80031e8:	f033 0110 	bics.w	r1, r3, #16
 80031ec:	d1bc      	bne.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
 80031ee:	e7f2      	b.n	80031d6 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80031f0:	2000      	movs	r0, #0
 80031f2:	e7b9      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 80031f4:	2002      	movs	r0, #2
}
 80031f6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031fa:	684d      	ldr	r5, [r1, #4]
 80031fc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031fe:	f020 0010 	bic.w	r0, r0, #16
 8003202:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003204:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8003206:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003208:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800320c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003210:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003214:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003218:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800321a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800321c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003222:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003226:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2000      	movs	r0, #0
}
 800322a:	e79d      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 800322c:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003230:	6848      	ldr	r0, [r1, #4]
 8003232:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003234:	f026 0601 	bic.w	r6, r6, #1
 8003238:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003244:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003246:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800324a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800324c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800324e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003254:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003258:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2000      	movs	r0, #0
}
 800325c:	e784      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x68>
 800325e:	bf00      	nop

08003260 <HAL_TIM_OC_DelayElapsedCallback>:
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop

08003264 <HAL_TIM_IC_CaptureCallback>:
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop

0800326c <HAL_TIM_TriggerCallback>:
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003270:	6803      	ldr	r3, [r0, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	0791      	lsls	r1, r2, #30
{
 8003276:	b510      	push	{r4, lr}
 8003278:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800327a:	d502      	bpl.n	8003282 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	0792      	lsls	r2, r2, #30
 8003280:	d45f      	bmi.n	8003342 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	0750      	lsls	r0, r2, #29
 8003286:	d502      	bpl.n	800328e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	0751      	lsls	r1, r2, #29
 800328c:	d446      	bmi.n	800331c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	0712      	lsls	r2, r2, #28
 8003292:	d502      	bpl.n	800329a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	0710      	lsls	r0, r2, #28
 8003298:	d42e      	bmi.n	80032f8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	06d2      	lsls	r2, r2, #27
 800329e:	d502      	bpl.n	80032a6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	06d0      	lsls	r0, r2, #27
 80032a4:	d418      	bmi.n	80032d8 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	07d1      	lsls	r1, r2, #31
 80032aa:	d502      	bpl.n	80032b2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	07d2      	lsls	r2, r2, #31
 80032b0:	d45d      	bmi.n	800336e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	0610      	lsls	r0, r2, #24
 80032b6:	d502      	bpl.n	80032be <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	0611      	lsls	r1, r2, #24
 80032bc:	d45f      	bmi.n	800337e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	0652      	lsls	r2, r2, #25
 80032c2:	d502      	bpl.n	80032ca <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	0650      	lsls	r0, r2, #25
 80032c8:	d461      	bmi.n	800338e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	0691      	lsls	r1, r2, #26
 80032ce:	d502      	bpl.n	80032d6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	0692      	lsls	r2, r2, #26
 80032d4:	d443      	bmi.n	800335e <HAL_TIM_IRQHandler+0xee>
}
 80032d6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032d8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032dc:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032de:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80032e8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ea:	d064      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80032ec:	f7ff ffba 	bl	8003264 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f0:	2200      	movs	r2, #0
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	7722      	strb	r2, [r4, #28]
 80032f6:	e7d6      	b.n	80032a6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032f8:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032fc:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032fe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003300:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003308:	d152      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	f7ff ffa9 	bl	8003260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330e:	4620      	mov	r0, r4
 8003310:	f7ff ffaa 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003314:	2200      	movs	r2, #0
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	7722      	strb	r2, [r4, #28]
 800331a:	e7be      	b.n	800329a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800331c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003320:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003322:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003324:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800332c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800332e:	d13c      	bne.n	80033aa <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003330:	f7ff ff96 	bl	8003260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	4620      	mov	r0, r4
 8003336:	f7ff ff97 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	2200      	movs	r2, #0
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	7722      	strb	r2, [r4, #28]
 8003340:	e7a5      	b.n	800328e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003342:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003346:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003348:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	079b      	lsls	r3, r3, #30
 8003350:	d025      	beq.n	800339e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003352:	f7ff ff87 	bl	8003264 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	2200      	movs	r2, #0
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	7722      	strb	r2, [r4, #28]
 800335c:	e791      	b.n	8003282 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800335e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003362:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003364:	611a      	str	r2, [r3, #16]
}
 8003366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800336a:	f000 b8e5 	b.w	8003538 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800336e:	f06f 0201 	mvn.w	r2, #1
 8003372:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003374:	4620      	mov	r0, r4
 8003376:	f7fe fbb3 	bl	8001ae0 <HAL_TIM_PeriodElapsedCallback>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	e799      	b.n	80032b2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800337e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003382:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003384:	4620      	mov	r0, r4
 8003386:	f000 f8d9 	bl	800353c <HAL_TIMEx_BreakCallback>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	e797      	b.n	80032be <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800338e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003392:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003394:	4620      	mov	r0, r4
 8003396:	f7ff ff69 	bl	800326c <HAL_TIM_TriggerCallback>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	e795      	b.n	80032ca <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	f7ff ff5f 	bl	8003260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7ff ff60 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
 80033a8:	e7d5      	b.n	8003356 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80033aa:	f7ff ff5b 	bl	8003264 <HAL_TIM_IC_CaptureCallback>
 80033ae:	e7c4      	b.n	800333a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80033b0:	f7ff ff58 	bl	8003264 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e7ae      	b.n	8003314 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	f7ff ff53 	bl	8003260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7ff ff54 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
 80033c0:	e796      	b.n	80032f0 <HAL_TIM_IRQHandler+0x80>
 80033c2:	bf00      	nop

080033c4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	4a27      	ldr	r2, [pc, #156]	; (8003464 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 80033c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	4290      	cmp	r0, r2
{
 80033ca:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033cc:	d033      	beq.n	8003436 <TIM_Base_SetConfig+0x72>
 80033ce:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033d2:	d01b      	beq.n	800340c <TIM_Base_SetConfig+0x48>
 80033d4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80033d8:	4290      	cmp	r0, r2
 80033da:	d017      	beq.n	800340c <TIM_Base_SetConfig+0x48>
 80033dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033e0:	4290      	cmp	r0, r2
 80033e2:	d013      	beq.n	800340c <TIM_Base_SetConfig+0x48>
 80033e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033e8:	4290      	cmp	r0, r2
 80033ea:	d00f      	beq.n	800340c <TIM_Base_SetConfig+0x48>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ec:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80033f0:	4290      	cmp	r0, r2
 80033f2:	d00f      	beq.n	8003414 <TIM_Base_SetConfig+0x50>
 80033f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f8:	4290      	cmp	r0, r2
 80033fa:	d00b      	beq.n	8003414 <TIM_Base_SetConfig+0x50>
 80033fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003400:	4290      	cmp	r0, r2
 8003402:	d007      	beq.n	8003414 <TIM_Base_SetConfig+0x50>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003404:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003406:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003408:	680a      	ldr	r2, [r1, #0]
 800340a:	e00a      	b.n	8003422 <TIM_Base_SetConfig+0x5e>
    tmpcr1 |= Structure->CounterMode;
 800340c:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003412:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003414:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003416:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003418:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800341a:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003420:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003426:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003428:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800342a:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800342e:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003430:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8003432:	6143      	str	r3, [r0, #20]
}
 8003434:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003436:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003438:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800343a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003440:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003446:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800344e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003450:	688b      	ldr	r3, [r1, #8]
 8003452:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003454:	680b      	ldr	r3, [r1, #0]
 8003456:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003458:	690b      	ldr	r3, [r1, #16]
 800345a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800345c:	2301      	movs	r3, #1
}
 800345e:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8003460:	6143      	str	r3, [r0, #20]
}
 8003462:	4770      	bx	lr
 8003464:	40010000 	.word	0x40010000

08003468 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003468:	b350      	cbz	r0, 80034c0 <HAL_TIM_Base_Init+0x58>
{
 800346a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800346c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003470:	4604      	mov	r4, r0
 8003472:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003476:	b1f3      	cbz	r3, 80034b6 <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347a:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	f851 0b04 	ldr.w	r0, [r1], #4
 8003484:	f7ff ff9e 	bl	80033c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003488:	2301      	movs	r3, #1
 800348a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003492:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003496:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800349a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80034aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80034ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80034b2:	2000      	movs	r0, #0
}
 80034b4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80034b6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80034ba:	f7fe fb5d 	bl	8001b78 <HAL_TIM_Base_MspInit>
 80034be:	e7db      	b.n	8003478 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80034c0:	2001      	movs	r0, #1
}
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d02e      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034cc:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80034ce:	2202      	movs	r2, #2
{
 80034d0:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80034d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80034d6:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d8:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034da:	4d15      	ldr	r5, [pc, #84]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80034dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e0:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e2:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 80034e4:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80034e6:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e8:	d011      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d00e      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80034f0:	4a10      	ldr	r2, [pc, #64]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80034f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80034fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8003506:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800350a:	4293      	cmp	r3, r2
 800350c:	d104      	bne.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350e:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003510:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003514:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003516:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003518:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800351a:	2201      	movs	r2, #1
 800351c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003520:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003524:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8003526:	4618      	mov	r0, r3
}
 8003528:	4770      	bx	lr
  __HAL_LOCK(htim);
 800352a:	2002      	movs	r0, #2
}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000
 8003534:	40000400 	.word	0x40000400

08003538 <HAL_TIMEx_CommutCallback>:
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop

0800353c <HAL_TIMEx_BreakCallback>:
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop

08003540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003540:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	f102 030c 	add.w	r3, r2, #12
 8003546:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	f102 0c0c 	add.w	ip, r2, #12
 8003552:	e84c 3100 	strex	r1, r3, [ip]
 8003556:	2900      	cmp	r1, #0
 8003558:	d1f3      	bne.n	8003542 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	f102 0314 	add.w	r3, r2, #20
 800355e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003562:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	f102 0c14 	add.w	ip, r2, #20
 800356a:	e84c 3100 	strex	r1, r3, [ip]
 800356e:	2900      	cmp	r1, #0
 8003570:	d1f3      	bne.n	800355a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003572:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003574:	2b01      	cmp	r3, #1
 8003576:	d005      	beq.n	8003584 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003578:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800357c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003580:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003582:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	f102 030c 	add.w	r3, r2, #12
 8003588:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	f102 0c0c 	add.w	ip, r2, #12
 8003594:	e84c 3100 	strex	r1, r3, [ip]
 8003598:	2900      	cmp	r1, #0
 800359a:	d1f3      	bne.n	8003584 <UART_EndRxTransfer+0x44>
 800359c:	e7ec      	b.n	8003578 <UART_EndRxTransfer+0x38>
 800359e:	bf00      	nop

080035a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	4604      	mov	r4, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a4:	4833      	ldr	r0, [pc, #204]	; (8003674 <UART_SetConfig+0xd4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	68e5      	ldr	r5, [r4, #12]
 80035aa:	6911      	ldr	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ac:	68a3      	ldr	r3, [r4, #8]
 80035ae:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80035b4:	4329      	orrs	r1, r5
 80035b6:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035b8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80035ba:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035bc:	4333      	orrs	r3, r6
 80035be:	432b      	orrs	r3, r5
 80035c0:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80035c2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80035c6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ca:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 80035cc:	430b      	orrs	r3, r1
 80035ce:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035d0:	6953      	ldr	r3, [r2, #20]
 80035d2:	69a1      	ldr	r1, [r4, #24]
 80035d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d8:	430b      	orrs	r3, r1
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035da:	4282      	cmp	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035de:	d029      	beq.n	8003634 <UART_SetConfig+0x94>
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <UART_SetConfig+0xd8>)
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d026      	beq.n	8003634 <UART_SetConfig+0x94>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035e6:	f7ff fd37 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ea:	69e3      	ldr	r3, [r4, #28]
 80035ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f0:	d126      	bne.n	8003640 <UART_SetConfig+0xa0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035f2:	6862      	ldr	r2, [r4, #4]
 80035f4:	4d21      	ldr	r5, [pc, #132]	; (800367c <UART_SetConfig+0xdc>)
 80035f6:	1892      	adds	r2, r2, r2
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	f04f 0119 	mov.w	r1, #25
 8003600:	415b      	adcs	r3, r3
 8003602:	fba0 0101 	umull	r0, r1, r0, r1
 8003606:	f7fc fe43 	bl	8000290 <__aeabi_uldivmod>
 800360a:	fba5 3200 	umull	r3, r2, r5, r0
 800360e:	0951      	lsrs	r1, r2, #5
 8003610:	2264      	movs	r2, #100	; 0x64
 8003612:	fb02 0311 	mls	r3, r2, r1, r0
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	fba5 2303 	umull	r2, r3, r5, r3
 800361e:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	6824      	ldr	r4, [r4, #0]
 8003626:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800362a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800362e:	4413      	add	r3, r2
 8003630:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003632:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003634:	f7ff fd20 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003638:	69e3      	ldr	r3, [r4, #28]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d0d8      	beq.n	80035f2 <UART_SetConfig+0x52>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003640:	6863      	ldr	r3, [r4, #4]
 8003642:	4d0e      	ldr	r5, [pc, #56]	; (800367c <UART_SetConfig+0xdc>)
 8003644:	2119      	movs	r1, #25
 8003646:	009a      	lsls	r2, r3, #2
 8003648:	fba0 0101 	umull	r0, r1, r0, r1
 800364c:	0f9b      	lsrs	r3, r3, #30
 800364e:	f7fc fe1f 	bl	8000290 <__aeabi_uldivmod>
 8003652:	fba5 3100 	umull	r3, r1, r5, r0
 8003656:	0949      	lsrs	r1, r1, #5
 8003658:	2264      	movs	r2, #100	; 0x64
 800365a:	fb02 0311 	mls	r3, r2, r1, r0
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	3332      	adds	r3, #50	; 0x32
 8003662:	6824      	ldr	r4, [r4, #0]
 8003664:	fba5 2303 	umull	r2, r3, r5, r3
 8003668:	0109      	lsls	r1, r1, #4
 800366a:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800366e:	60a3      	str	r3, [r4, #8]
}
 8003670:	bd70      	pop	{r4, r5, r6, pc}
 8003672:	bf00      	nop
 8003674:	40011000 	.word	0x40011000
 8003678:	40011400 	.word	0x40011400
 800367c:	51eb851f 	.word	0x51eb851f

08003680 <HAL_UART_Init>:
  if (huart == NULL)
 8003680:	b360      	cbz	r0, 80036dc <HAL_UART_Init+0x5c>
{
 8003682:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003684:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003688:	4604      	mov	r4, r0
 800368a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800368e:	b303      	cbz	r3, 80036d2 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8003690:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003692:	2324      	movs	r3, #36	; 0x24
 8003694:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003698:	68d3      	ldr	r3, [r2, #12]
 800369a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800369e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80036a0:	4620      	mov	r0, r4
 80036a2:	f7ff ff7d 	bl	80035a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80036b8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80036bc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80036be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c4:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036ca:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80036ce:	4628      	mov	r0, r5
}
 80036d0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80036d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80036d6:	f7fe fa6f 	bl	8001bb8 <HAL_UART_MspInit>
 80036da:	e7d9      	b.n	8003690 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80036dc:	2001      	movs	r0, #1
}
 80036de:	4770      	bx	lr

080036e0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d123      	bne.n	8003730 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 80036e8:	b301      	cbz	r1, 800372c <HAL_UART_Receive_IT+0x4c>
 80036ea:	b1fa      	cbz	r2, 800372c <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 80036ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d01d      	beq.n	8003730 <HAL_UART_Receive_IT+0x50>
{
 80036f4:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	2300      	movs	r3, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036f8:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fa:	6303      	str	r3, [r0, #48]	; 0x30
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fc:	2522      	movs	r5, #34	; 0x22
  huart->RxXferCount = Size;
 80036fe:	85c2      	strh	r2, [r0, #46]	; 0x2e
  __HAL_UNLOCK(huart);
 8003700:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003706:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800370a:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 800370c:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800370e:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8003712:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003714:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003716:	6962      	ldr	r2, [r4, #20]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800371e:	68e2      	ldr	r2, [r4, #12]
 8003720:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003724:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003726:	60e2      	str	r2, [r4, #12]
}
 8003728:	bc30      	pop	{r4, r5}
 800372a:	4770      	bx	lr
      return HAL_ERROR;
 800372c:	2001      	movs	r0, #1
 800372e:	4770      	bx	lr
    return HAL_BUSY;
 8003730:	2002      	movs	r0, #2
}
 8003732:	4770      	bx	lr

08003734 <HAL_UART_Transmit_DMA>:
{
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003738:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800373c:	2820      	cmp	r0, #32
 800373e:	d133      	bne.n	80037a8 <HAL_UART_Transmit_DMA+0x74>
    if ((pData == NULL) || (Size == 0U))
 8003740:	2900      	cmp	r1, #0
 8003742:	d02f      	beq.n	80037a4 <HAL_UART_Transmit_DMA+0x70>
 8003744:	b372      	cbz	r2, 80037a4 <HAL_UART_Transmit_DMA+0x70>
    __HAL_LOCK(huart);
 8003746:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800374a:	2801      	cmp	r0, #1
 800374c:	d02c      	beq.n	80037a8 <HAL_UART_Transmit_DMA+0x74>
    huart->TxXferCount = Size;
 800374e:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8003750:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003752:	6b60      	ldr	r0, [r4, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003754:	6826      	ldr	r6, [r4, #0]
    huart->pTxBuffPtr = pData;
 8003756:	6221      	str	r1, [r4, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	2500      	movs	r5, #0
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800375a:	4613      	mov	r3, r2
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375c:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	6425      	str	r5, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8003760:	2701      	movs	r7, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_UART_Transmit_DMA+0x78>)
    __HAL_LOCK(huart);
 8003768:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800376c:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800376e:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <HAL_UART_Transmit_DMA+0x7c>)
 8003770:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003772:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <HAL_UART_Transmit_DMA+0x80>)
 8003774:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8003776:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003778:	1d32      	adds	r2, r6, #4
 800377a:	f7fe fcb7 	bl	80020ec <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8003784:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8003786:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	f102 0314 	add.w	r3, r2, #20
 800378e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	f102 0114 	add.w	r1, r2, #20
 800379a:	e841 3000 	strex	r0, r3, [r1]
 800379e:	2800      	cmp	r0, #0
 80037a0:	d1f3      	bne.n	800378a <HAL_UART_Transmit_DMA+0x56>
}
 80037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
}
 80037a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80037a8:	2002      	movs	r0, #2
}
 80037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ac:	08003855 	.word	0x08003855
 80037b0:	080038a5 	.word	0x080038a5
 80037b4:	080038b5 	.word	0x080038b5

080037b8 <HAL_UART_DMAStop>:
{
 80037b8:	b510      	push	{r4, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037ba:	6803      	ldr	r3, [r0, #0]
 80037bc:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037be:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80037c2:	2a21      	cmp	r2, #33	; 0x21
{
 80037c4:	4604      	mov	r4, r0
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037c6:	d006      	beq.n	80037d6 <HAL_UART_DMAStop+0x1e>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037c8:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037ca:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80037ce:	2a22      	cmp	r2, #34	; 0x22
 80037d0:	d028      	beq.n	8003824 <HAL_UART_DMAStop+0x6c>
}
 80037d2:	2000      	movs	r0, #0
 80037d4:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037d6:	0609      	lsls	r1, r1, #24
 80037d8:	d5f6      	bpl.n	80037c8 <HAL_UART_DMAStop+0x10>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	f103 0214 	add.w	r2, r3, #20
 80037de:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	f103 0014 	add.w	r0, r3, #20
 80037ea:	e840 2100 	strex	r1, r2, [r0]
 80037ee:	2900      	cmp	r1, #0
 80037f0:	d1f3      	bne.n	80037da <HAL_UART_DMAStop+0x22>
    if (huart->hdmatx != NULL)
 80037f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80037f4:	b110      	cbz	r0, 80037fc <HAL_UART_DMAStop+0x44>
      HAL_DMA_Abort(huart->hdmatx);
 80037f6:	f7fe fcb7 	bl	8002168 <HAL_DMA_Abort>
 80037fa:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	f103 020c 	add.w	r2, r3, #12
 8003800:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003804:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	f103 000c 	add.w	r0, r3, #12
 800380c:	e840 2100 	strex	r1, r2, [r0]
 8003810:	2900      	cmp	r1, #0
 8003812:	d1f3      	bne.n	80037fc <HAL_UART_DMAStop+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8003814:	2220      	movs	r2, #32
 8003816:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800381a:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800381c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003820:	2a22      	cmp	r2, #34	; 0x22
 8003822:	d1d6      	bne.n	80037d2 <HAL_UART_DMAStop+0x1a>
 8003824:	064a      	lsls	r2, r1, #25
 8003826:	d5d4      	bpl.n	80037d2 <HAL_UART_DMAStop+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	f103 0214 	add.w	r2, r3, #20
 800382c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	f103 0014 	add.w	r0, r3, #20
 8003838:	e840 2100 	strex	r1, r2, [r0]
 800383c:	2900      	cmp	r1, #0
 800383e:	d1f3      	bne.n	8003828 <HAL_UART_DMAStop+0x70>
    if (huart->hdmarx != NULL)
 8003840:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003842:	b108      	cbz	r0, 8003848 <HAL_UART_DMAStop+0x90>
      HAL_DMA_Abort(huart->hdmarx);
 8003844:	f7fe fc90 	bl	8002168 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8003848:	4620      	mov	r0, r4
 800384a:	f7ff fe79 	bl	8003540 <UART_EndRxTransfer>
}
 800384e:	2000      	movs	r0, #0
 8003850:	bd10      	pop	{r4, pc}
 8003852:	bf00      	nop

08003854 <UART_DMATransmitCplt>:
{
 8003854:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003856:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003858:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003860:	d11a      	bne.n	8003898 <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 8003862:	6802      	ldr	r2, [r0, #0]
 8003864:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	f102 0314 	add.w	r3, r2, #20
 800386a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800386e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	f102 0014 	add.w	r0, r2, #20
 8003876:	e840 3100 	strex	r1, r3, [r0]
 800387a:	2900      	cmp	r1, #0
 800387c:	d1f3      	bne.n	8003866 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	f102 030c 	add.w	r3, r2, #12
 8003882:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	f102 000c 	add.w	r0, r2, #12
 800388e:	e840 3100 	strex	r1, r3, [r0]
 8003892:	2900      	cmp	r1, #0
 8003894:	d1f3      	bne.n	800387e <UART_DMATransmitCplt+0x2a>
}
 8003896:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003898:	f7fe f914 	bl	8001ac4 <HAL_UART_TxCpltCallback>
}
 800389c:	bd08      	pop	{r3, pc}
 800389e:	bf00      	nop

080038a0 <HAL_UART_TxHalfCpltCallback>:
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop

080038a4 <UART_DMATxHalfCplt>:
{
 80038a4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80038a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80038a8:	f7ff fffa 	bl	80038a0 <HAL_UART_TxHalfCpltCallback>
}
 80038ac:	bd08      	pop	{r3, pc}
 80038ae:	bf00      	nop

080038b0 <HAL_UART_RxHalfCpltCallback>:
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop

080038b4 <UART_DMAError>:
{
 80038b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80038b8:	6802      	ldr	r2, [r0, #0]
 80038ba:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038c0:	2b21      	cmp	r3, #33	; 0x21
 80038c2:	d00b      	beq.n	80038dc <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038c4:	6952      	ldr	r2, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038c6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80038ca:	2b22      	cmp	r3, #34	; 0x22
 80038cc:	d01e      	beq.n	800390c <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80038d0:	f043 0310 	orr.w	r3, r3, #16
 80038d4:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80038d6:	f7fe f8e1 	bl	8001a9c <HAL_UART_ErrorCallback>
}
 80038da:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038dc:	0609      	lsls	r1, r1, #24
 80038de:	d5f1      	bpl.n	80038c4 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	f102 030c 	add.w	r3, r2, #12
 80038e8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	f102 0c0c 	add.w	ip, r2, #12
 80038f4:	e84c 3100 	strex	r1, r3, [ip]
 80038f8:	2900      	cmp	r1, #0
 80038fa:	d1f3      	bne.n	80038e4 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 80038fc:	2320      	movs	r3, #32
 80038fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003902:	6952      	ldr	r2, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003904:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003908:	2b22      	cmp	r3, #34	; 0x22
 800390a:	d1e0      	bne.n	80038ce <UART_DMAError+0x1a>
 800390c:	0653      	lsls	r3, r2, #25
 800390e:	d5de      	bpl.n	80038ce <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003914:	f7ff fe14 	bl	8003540 <UART_EndRxTransfer>
 8003918:	e7d9      	b.n	80038ce <UART_DMAError+0x1a>
 800391a:	bf00      	nop

0800391c <UART_DMAAbortOnError>:
{
 800391c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003920:	2300      	movs	r3, #0
 8003922:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003924:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003926:	f7fe f8b9 	bl	8001a9c <HAL_UART_ErrorCallback>
}
 800392a:	bd08      	pop	{r3, pc}

0800392c <HAL_UARTEx_RxEventCallback>:
}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop

08003930 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	6883      	ldr	r3, [r0, #8]
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003936:	d044      	beq.n	80039c2 <UART_Receive_IT.part.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003938:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800393a:	2b00      	cmp	r3, #0
 800393c:	d038      	beq.n	80039b0 <UART_Receive_IT.part.0+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800393e:	6803      	ldr	r3, [r0, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003946:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003948:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800394a:	3301      	adds	r3, #1
 800394c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800394e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003950:	3b01      	subs	r3, #1
 8003952:	b29b      	uxth	r3, r3
 8003954:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003956:	2b00      	cmp	r3, #0
 8003958:	d131      	bne.n	80039be <UART_Receive_IT.part.0+0x8e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800395a:	6802      	ldr	r2, [r0, #0]
 800395c:	68d1      	ldr	r1, [r2, #12]
 800395e:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003962:	b510      	push	{r4, lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003964:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003966:	68d1      	ldr	r1, [r2, #12]
 8003968:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800396c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800396e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003970:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003972:	f021 0101 	bic.w	r1, r1, #1
 8003976:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003978:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800397e:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003980:	b082      	sub	sp, #8
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003982:	d129      	bne.n	80039d8 <UART_Receive_IT.part.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003984:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	f102 030c 	add.w	r3, r2, #12
 800398a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	f102 040c 	add.w	r4, r2, #12
 8003996:	e844 3100 	strex	r1, r3, [r4]
 800399a:	2900      	cmp	r1, #0
 800399c:	d1f3      	bne.n	8003986 <UART_Receive_IT.part.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800399e:	6813      	ldr	r3, [r2, #0]
 80039a0:	06db      	lsls	r3, r3, #27
 80039a2:	d423      	bmi.n	80039ec <UART_Receive_IT.part.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039a4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80039a6:	f7ff ffc1 	bl	800392c <HAL_UARTEx_RxEventCallback>
}
 80039aa:	2000      	movs	r0, #0
 80039ac:	b002      	add	sp, #8
 80039ae:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039b0:	6903      	ldr	r3, [r0, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1c3      	bne.n	800393e <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039b6:	6803      	ldr	r3, [r0, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	7013      	strb	r3, [r2, #0]
 80039bc:	e7c4      	b.n	8003948 <UART_Receive_IT.part.0+0x18>
}
 80039be:	2000      	movs	r0, #0
 80039c0:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c2:	6903      	ldr	r3, [r0, #16]
 80039c4:	b96b      	cbnz	r3, 80039e2 <UART_Receive_IT.part.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c6:	6802      	ldr	r2, [r0, #0]
 80039c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80039ca:	6852      	ldr	r2, [r2, #4]
 80039cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d0:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80039d4:	6283      	str	r3, [r0, #40]	; 0x28
 80039d6:	e7ba      	b.n	800394e <UART_Receive_IT.part.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 80039d8:	f7fe f83e 	bl	8001a58 <HAL_UART_RxCpltCallback>
}
 80039dc:	2000      	movs	r0, #0
 80039de:	b002      	add	sp, #8
 80039e0:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039e2:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	7013      	strb	r3, [r2, #0]
 80039ea:	e7ad      	b.n	8003948 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ec:	9101      	str	r1, [sp, #4]
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	6853      	ldr	r3, [r2, #4]
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	9b01      	ldr	r3, [sp, #4]
 80039f8:	e7d4      	b.n	80039a4 <UART_Receive_IT.part.0+0x74>
 80039fa:	bf00      	nop

080039fc <HAL_UART_IRQHandler>:
{
 80039fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039fe:	6803      	ldr	r3, [r0, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a02:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a04:	695e      	ldr	r6, [r3, #20]
  if (errorflags == RESET)
 8003a06:	f012 0f0f 	tst.w	r2, #15
{
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a0e:	461d      	mov	r5, r3
  if (errorflags == RESET)
 8003a10:	d16e      	bne.n	8003af0 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a12:	0693      	lsls	r3, r2, #26
 8003a14:	d502      	bpl.n	8003a1c <HAL_UART_IRQHandler+0x20>
 8003a16:	068e      	lsls	r6, r1, #26
 8003a18:	f100 80b1 	bmi.w	8003b7e <HAL_UART_IRQHandler+0x182>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00b      	beq.n	8003a3a <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a22:	0616      	lsls	r6, r2, #24
 8003a24:	d502      	bpl.n	8003a2c <HAL_UART_IRQHandler+0x30>
 8003a26:	0608      	lsls	r0, r1, #24
 8003a28:	f100 80b3 	bmi.w	8003b92 <HAL_UART_IRQHandler+0x196>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a2c:	0652      	lsls	r2, r2, #25
 8003a2e:	d502      	bpl.n	8003a36 <HAL_UART_IRQHandler+0x3a>
 8003a30:	064b      	lsls	r3, r1, #25
 8003a32:	f100 80cc 	bmi.w	8003bce <HAL_UART_IRQHandler+0x1d2>
}
 8003a36:	b002      	add	sp, #8
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a3a:	06d6      	lsls	r6, r2, #27
 8003a3c:	d5f1      	bpl.n	8003a22 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a3e:	06c8      	lsls	r0, r1, #27
 8003a40:	d5ef      	bpl.n	8003a22 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a42:	2300      	movs	r3, #0
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	682b      	ldr	r3, [r5, #0]
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	686b      	ldr	r3, [r5, #4]
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	696b      	ldr	r3, [r5, #20]
 8003a52:	065b      	lsls	r3, r3, #25
 8003a54:	f140 80eb 	bpl.w	8003c2e <HAL_UART_IRQHandler+0x232>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a58:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a5a:	6803      	ldr	r3, [r0, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0e8      	beq.n	8003a36 <HAL_UART_IRQHandler+0x3a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a64:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d9e5      	bls.n	8003a36 <HAL_UART_IRQHandler+0x3a>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a6a:	69c1      	ldr	r1, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8003a6c:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a6e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003a72:	d036      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	f105 030c 	add.w	r3, r5, #12
 8003a78:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	f105 010c 	add.w	r1, r5, #12
 8003a84:	e841 3200 	strex	r2, r3, [r1]
 8003a88:	2a00      	cmp	r2, #0
 8003a8a:	d1f3      	bne.n	8003a74 <HAL_UART_IRQHandler+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	f105 0314 	add.w	r3, r5, #20
 8003a90:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a94:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	f105 0114 	add.w	r1, r5, #20
 8003a9c:	e841 3200 	strex	r2, r3, [r1]
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	d1f3      	bne.n	8003a8c <HAL_UART_IRQHandler+0x90>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	f105 0314 	add.w	r3, r5, #20
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	f105 0114 	add.w	r1, r5, #20
 8003ab4:	e841 3200 	strex	r2, r3, [r1]
 8003ab8:	2a00      	cmp	r2, #0
 8003aba:	d1f3      	bne.n	8003aa4 <HAL_UART_IRQHandler+0xa8>
          huart->RxState = HAL_UART_STATE_READY;
 8003abc:	2320      	movs	r3, #32
 8003abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	f105 030c 	add.w	r3, r5, #12
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003acc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	f105 010c 	add.w	r1, r5, #12
 8003ad4:	e841 3200 	strex	r2, r3, [r1]
 8003ad8:	2a00      	cmp	r2, #0
 8003ada:	d1f3      	bne.n	8003ac4 <HAL_UART_IRQHandler+0xc8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003adc:	f7fe fb44 	bl	8002168 <HAL_DMA_Abort>
 8003ae0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003ae4:	1ad2      	subs	r2, r2, r3
 8003ae6:	b291      	uxth	r1, r2
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f7ff ff1f 	bl	800392c <HAL_UARTEx_RxEventCallback>
 8003aee:	e7a2      	b.n	8003a36 <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003af0:	f006 0601 	and.w	r6, r6, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003af4:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8003af8:	4330      	orrs	r0, r6
 8003afa:	d08f      	beq.n	8003a1c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003afc:	07d0      	lsls	r0, r2, #31
 8003afe:	d505      	bpl.n	8003b0c <HAL_UART_IRQHandler+0x110>
 8003b00:	05cd      	lsls	r5, r1, #23
 8003b02:	d503      	bpl.n	8003b0c <HAL_UART_IRQHandler+0x110>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b06:	f040 0001 	orr.w	r0, r0, #1
 8003b0a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b0c:	0750      	lsls	r0, r2, #29
 8003b0e:	d531      	bpl.n	8003b74 <HAL_UART_IRQHandler+0x178>
 8003b10:	b14e      	cbz	r6, 8003b26 <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b12:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b14:	0795      	lsls	r5, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b16:	f040 0002 	orr.w	r0, r0, #2
 8003b1a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b1c:	d503      	bpl.n	8003b26 <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b1e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b20:	f040 0004 	orr.w	r0, r0, #4
 8003b24:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b26:	0715      	lsls	r5, r2, #28
 8003b28:	d507      	bpl.n	8003b3a <HAL_UART_IRQHandler+0x13e>
 8003b2a:	f001 0020 	and.w	r0, r1, #32
 8003b2e:	4330      	orrs	r0, r6
 8003b30:	d003      	beq.n	8003b3a <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b32:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b34:	f040 0008 	orr.w	r0, r0, #8
 8003b38:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	f43f af7a 	beq.w	8003a36 <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b42:	0690      	lsls	r0, r2, #26
 8003b44:	d509      	bpl.n	8003b5a <HAL_UART_IRQHandler+0x15e>
 8003b46:	068a      	lsls	r2, r1, #26
 8003b48:	d507      	bpl.n	8003b5a <HAL_UART_IRQHandler+0x15e>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b4a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003b4e:	2a22      	cmp	r2, #34	; 0x22
 8003b50:	d103      	bne.n	8003b5a <HAL_UART_IRQHandler+0x15e>
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff feec 	bl	8003930 <UART_Receive_IT.part.0>
 8003b58:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5a:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b5c:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b62:	f005 0508 	and.w	r5, r5, #8
 8003b66:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8003b68:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b6a:	d13b      	bne.n	8003be4 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 8003b6c:	f7fd ff96 	bl	8001a9c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	6425      	str	r5, [r4, #64]	; 0x40
 8003b72:	e760      	b.n	8003a36 <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b74:	0790      	lsls	r0, r2, #30
 8003b76:	d5d6      	bpl.n	8003b26 <HAL_UART_IRQHandler+0x12a>
 8003b78:	2e00      	cmp	r6, #0
 8003b7a:	d0d4      	beq.n	8003b26 <HAL_UART_IRQHandler+0x12a>
 8003b7c:	e7cf      	b.n	8003b1e <HAL_UART_IRQHandler+0x122>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b7e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003b82:	2b22      	cmp	r3, #34	; 0x22
 8003b84:	f47f af57 	bne.w	8003a36 <HAL_UART_IRQHandler+0x3a>
}
 8003b88:	b002      	add	sp, #8
 8003b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b8e:	f7ff becf 	b.w	8003930 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b92:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b96:	2b21      	cmp	r3, #33	; 0x21
 8003b98:	f47f af4d 	bne.w	8003a36 <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9c:	68a3      	ldr	r3, [r4, #8]
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba2:	d07d      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x2a4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ba4:	6a23      	ldr	r3, [r4, #32]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	6222      	str	r2, [r4, #32]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	606b      	str	r3, [r5, #4]
    if (--huart->TxXferCount == 0U)
 8003bae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f47f af3d 	bne.w	8003a36 <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bbc:	68eb      	ldr	r3, [r5, #12]
 8003bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc2:	60eb      	str	r3, [r5, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bc4:	68eb      	ldr	r3, [r5, #12]
 8003bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bca:	60eb      	str	r3, [r5, #12]
 8003bcc:	e733      	b.n	8003a36 <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bce:	68eb      	ldr	r3, [r5, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003bd0:	2220      	movs	r2, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd6:	60eb      	str	r3, [r5, #12]
  HAL_UART_TxCpltCallback(huart);
 8003bd8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003bda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003bde:	f7fd ff71 	bl	8001ac4 <HAL_UART_TxCpltCallback>
    return;
 8003be2:	e728      	b.n	8003a36 <HAL_UART_IRQHandler+0x3a>
        UART_EndRxTransfer(huart);
 8003be4:	f7ff fcac 	bl	8003540 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	6825      	ldr	r5, [r4, #0]
 8003bea:	696b      	ldr	r3, [r5, #20]
 8003bec:	065b      	lsls	r3, r3, #25
 8003bee:	d51a      	bpl.n	8003c26 <HAL_UART_IRQHandler+0x22a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	f105 0314 	add.w	r3, r5, #20
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	f105 0114 	add.w	r1, r5, #20
 8003c00:	e841 3200 	strex	r2, r3, [r1]
 8003c04:	2a00      	cmp	r2, #0
 8003c06:	d1f3      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x1f4>
          if (huart->hdmarx != NULL)
 8003c08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c0a:	b160      	cbz	r0, 8003c26 <HAL_UART_IRQHandler+0x22a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HAL_UART_IRQHandler+0x2bc>)
 8003c0e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c10:	f7fe faf2 	bl	80021f8 <HAL_DMA_Abort_IT>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	f43f af0e 	beq.w	8003a36 <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8003c1e:	b002      	add	sp, #8
 8003c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c24:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7fd ff38 	bl	8001a9c <HAL_UART_ErrorCallback>
 8003c2c:	e703      	b.n	8003a36 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c2e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8003c30:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003c32:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c34:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f43f aefd 	beq.w	8003a36 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c3c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003c3e:	1a8a      	subs	r2, r1, r2
 8003c40:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8003c42:	2900      	cmp	r1, #0
 8003c44:	f43f aef7 	beq.w	8003a36 <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	f105 030c 	add.w	r3, r5, #12
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	f105 000c 	add.w	r0, r5, #12
 8003c58:	e840 3200 	strex	r2, r3, [r0]
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	d1f3      	bne.n	8003c48 <HAL_UART_IRQHandler+0x24c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	f105 0314 	add.w	r3, r5, #20
 8003c64:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	f105 0014 	add.w	r0, r5, #20
 8003c70:	e840 3200 	strex	r2, r3, [r0]
 8003c74:	2a00      	cmp	r2, #0
 8003c76:	d1f3      	bne.n	8003c60 <HAL_UART_IRQHandler+0x264>
        huart->RxState = HAL_UART_STATE_READY;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	f105 030c 	add.w	r3, r5, #12
 8003c84:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c88:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	f105 000c 	add.w	r0, r5, #12
 8003c90:	e840 3200 	strex	r2, r3, [r0]
 8003c94:	2a00      	cmp	r2, #0
 8003c96:	d1f3      	bne.n	8003c80 <HAL_UART_IRQHandler+0x284>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7ff fe47 	bl	800392c <HAL_UARTEx_RxEventCallback>
 8003c9e:	e6ca      	b.n	8003a36 <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca0:	6923      	ldr	r3, [r4, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f47f af7e 	bne.w	8003ba4 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ca8:	6a23      	ldr	r3, [r4, #32]
 8003caa:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb2:	606a      	str	r2, [r5, #4]
      huart->pTxBuffPtr += 2U;
 8003cb4:	6223      	str	r3, [r4, #32]
 8003cb6:	e77a      	b.n	8003bae <HAL_UART_IRQHandler+0x1b2>
 8003cb8:	0800391d 	.word	0x0800391d

08003cbc <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cbc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003cbe:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d002      	beq.n	8003ccc <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cc6:	f7ff fdf3 	bl	80038b0 <HAL_UART_RxHalfCpltCallback>
}
 8003cca:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ccc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003cce:	0849      	lsrs	r1, r1, #1
 8003cd0:	f7ff fe2c 	bl	800392c <HAL_UARTEx_RxEventCallback>
}
 8003cd4:	bd08      	pop	{r3, pc}
 8003cd6:	bf00      	nop

08003cd8 <UART_DMAReceiveCplt>:
{
 8003cd8:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003cda:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cdc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003ce4:	d12b      	bne.n	8003d3e <UART_DMAReceiveCplt+0x66>
    huart->RxXferCount = 0U;
 8003ce6:	6803      	ldr	r3, [r0, #0]
 8003ce8:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	f103 020c 	add.w	r2, r3, #12
 8003cee:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	f103 0c0c 	add.w	ip, r3, #12
 8003cfa:	e84c 2100 	strex	r1, r2, [ip]
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d1f3      	bne.n	8003cea <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	f103 0214 	add.w	r2, r3, #20
 8003d06:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	f103 0c14 	add.w	ip, r3, #20
 8003d12:	e84c 2100 	strex	r1, r2, [ip]
 8003d16:	2900      	cmp	r1, #0
 8003d18:	d1f3      	bne.n	8003d02 <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	f103 0214 	add.w	r2, r3, #20
 8003d1e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	f103 0c14 	add.w	ip, r3, #20
 8003d2a:	e84c 2100 	strex	r1, r2, [ip]
 8003d2e:	2900      	cmp	r1, #0
 8003d30:	d1f3      	bne.n	8003d1a <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 8003d32:	2220      	movs	r2, #32
 8003d34:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d38:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003d3a:	2a01      	cmp	r2, #1
 8003d3c:	d005      	beq.n	8003d4a <UART_DMAReceiveCplt+0x72>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d00f      	beq.n	8003d64 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8003d44:	f7fd fe88 	bl	8001a58 <HAL_UART_RxCpltCallback>
}
 8003d48:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	f103 020c 	add.w	r2, r3, #12
 8003d4e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d52:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	f103 0c0c 	add.w	ip, r3, #12
 8003d5a:	e84c 2100 	strex	r1, r2, [ip]
 8003d5e:	2900      	cmp	r1, #0
 8003d60:	d1f3      	bne.n	8003d4a <UART_DMAReceiveCplt+0x72>
 8003d62:	e7ec      	b.n	8003d3e <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d64:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003d66:	f7ff fde1 	bl	800392c <HAL_UARTEx_RxEventCallback>
}
 8003d6a:	bd08      	pop	{r3, pc}

08003d6c <HAL_UART_GetState>:
  temp1 = huart->gState;
 8003d6c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  temp2 = huart->RxState;
 8003d70:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 8003d74:	4310      	orrs	r0, r2
 8003d76:	4770      	bx	lr

08003d78 <UART_Start_Receive_DMA>:
{
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	4604      	mov	r4, r0
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d7c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d7e:	6826      	ldr	r6, [r4, #0]
  huart->pRxBuffPtr = pData;
 8003d80:	62a1      	str	r1, [r4, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d82:	85a2      	strh	r2, [r4, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	2500      	movs	r5, #0
{
 8003d86:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d88:	f04f 0c22 	mov.w	ip, #34	; 0x22
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	1d31      	adds	r1, r6, #4
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d90:	4e1d      	ldr	r6, [pc, #116]	; (8003e08 <UART_Start_Receive_DMA+0x90>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	6425      	str	r5, [r4, #64]	; 0x40
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d94:	4f1d      	ldr	r7, [pc, #116]	; (8003e0c <UART_Start_Receive_DMA+0x94>)
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d96:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d9a:	6406      	str	r6, [r0, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d9c:	4e1c      	ldr	r6, [pc, #112]	; (8003e10 <UART_Start_Receive_DMA+0x98>)
  huart->hdmarx->XferAbortCallback = NULL;
 8003d9e:	6505      	str	r5, [r0, #80]	; 0x50
{
 8003da0:	b083      	sub	sp, #12
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003da2:	63c7      	str	r7, [r0, #60]	; 0x3c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003da4:	64c6      	str	r6, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003da6:	f7fe f9a1 	bl	80020ec <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	9501      	str	r5, [sp, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	9201      	str	r2, [sp, #4]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	9201      	str	r2, [sp, #4]
 8003db6:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 8003db8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	f103 020c 	add.w	r2, r3, #12
 8003dc0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	f103 000c 	add.w	r0, r3, #12
 8003dcc:	e840 2100 	strex	r1, r2, [r0]
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	d1f3      	bne.n	8003dbc <UART_Start_Receive_DMA+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	f103 0214 	add.w	r2, r3, #20
 8003dd8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	f103 0014 	add.w	r0, r3, #20
 8003de4:	e840 2100 	strex	r1, r2, [r0]
 8003de8:	2900      	cmp	r1, #0
 8003dea:	d1f3      	bne.n	8003dd4 <UART_Start_Receive_DMA+0x5c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	f103 0214 	add.w	r2, r3, #20
 8003df0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	f103 0114 	add.w	r1, r3, #20
 8003dfc:	e841 2000 	strex	r0, r2, [r1]
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d1f3      	bne.n	8003dec <UART_Start_Receive_DMA+0x74>
}
 8003e04:	b003      	add	sp, #12
 8003e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e08:	08003cbd 	.word	0x08003cbd
 8003e0c:	08003cd9 	.word	0x08003cd9
 8003e10:	080038b5 	.word	0x080038b5

08003e14 <HAL_UART_Receive_DMA>:
{
 8003e14:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e16:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8003e1a:	2e20      	cmp	r6, #32
 8003e1c:	d110      	bne.n	8003e40 <HAL_UART_Receive_DMA+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8003e1e:	b161      	cbz	r1, 8003e3a <HAL_UART_Receive_DMA+0x26>
 8003e20:	b15a      	cbz	r2, 8003e3a <HAL_UART_Receive_DMA+0x26>
    __HAL_LOCK(huart);
 8003e22:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8003e26:	2c01      	cmp	r4, #1
 8003e28:	d00a      	beq.n	8003e40 <HAL_UART_Receive_DMA+0x2c>
 8003e2a:	2501      	movs	r5, #1
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8003e2e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	6304      	str	r4, [r0, #48]	; 0x30
}
 8003e34:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e36:	f7ff bf9f 	b.w	8003d78 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8003e3a:	2001      	movs	r0, #1
}
 8003e3c:	bc70      	pop	{r4, r5, r6}
 8003e3e:	4770      	bx	lr
    return HAL_BUSY;
 8003e40:	2002      	movs	r0, #2
}
 8003e42:	bc70      	pop	{r4, r5, r6}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop

08003e48 <atoi>:
 8003e48:	220a      	movs	r2, #10
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	f000 b9e6 	b.w	800421c <strtol>

08003e50 <atol>:
 8003e50:	220a      	movs	r2, #10
 8003e52:	2100      	movs	r1, #0
 8003e54:	f000 b9e2 	b.w	800421c <strtol>

08003e58 <calloc>:
 8003e58:	4b02      	ldr	r3, [pc, #8]	; (8003e64 <calloc+0xc>)
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	f000 b84a 	b.w	8003ef8 <_calloc_r>
 8003e64:	20000058 	.word	0x20000058

08003e68 <__errno>:
 8003e68:	4b01      	ldr	r3, [pc, #4]	; (8003e70 <__errno+0x8>)
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000058 	.word	0x20000058

08003e74 <__libc_init_array>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	4d0d      	ldr	r5, [pc, #52]	; (8003eac <__libc_init_array+0x38>)
 8003e78:	4c0d      	ldr	r4, [pc, #52]	; (8003eb0 <__libc_init_array+0x3c>)
 8003e7a:	1b64      	subs	r4, r4, r5
 8003e7c:	10a4      	asrs	r4, r4, #2
 8003e7e:	2600      	movs	r6, #0
 8003e80:	42a6      	cmp	r6, r4
 8003e82:	d109      	bne.n	8003e98 <__libc_init_array+0x24>
 8003e84:	4d0b      	ldr	r5, [pc, #44]	; (8003eb4 <__libc_init_array+0x40>)
 8003e86:	4c0c      	ldr	r4, [pc, #48]	; (8003eb8 <__libc_init_array+0x44>)
 8003e88:	f000 fd52 	bl	8004930 <_init>
 8003e8c:	1b64      	subs	r4, r4, r5
 8003e8e:	10a4      	asrs	r4, r4, #2
 8003e90:	2600      	movs	r6, #0
 8003e92:	42a6      	cmp	r6, r4
 8003e94:	d105      	bne.n	8003ea2 <__libc_init_array+0x2e>
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9c:	4798      	blx	r3
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7ee      	b.n	8003e80 <__libc_init_array+0xc>
 8003ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea6:	4798      	blx	r3
 8003ea8:	3601      	adds	r6, #1
 8003eaa:	e7f2      	b.n	8003e92 <__libc_init_array+0x1e>
 8003eac:	08005170 	.word	0x08005170
 8003eb0:	08005170 	.word	0x08005170
 8003eb4:	08005170 	.word	0x08005170
 8003eb8:	08005174 	.word	0x08005174

08003ebc <free>:
 8003ebc:	4b02      	ldr	r3, [pc, #8]	; (8003ec8 <free+0xc>)
 8003ebe:	4601      	mov	r1, r0
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	f000 b829 	b.w	8003f18 <_free_r>
 8003ec6:	bf00      	nop
 8003ec8:	20000058 	.word	0x20000058

08003ecc <memcpy>:
 8003ecc:	440a      	add	r2, r1
 8003ece:	4291      	cmp	r1, r2
 8003ed0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ed4:	d100      	bne.n	8003ed8 <memcpy+0xc>
 8003ed6:	4770      	bx	lr
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee2:	4291      	cmp	r1, r2
 8003ee4:	d1f9      	bne.n	8003eda <memcpy+0xe>
 8003ee6:	bd10      	pop	{r4, pc}

08003ee8 <memset>:
 8003ee8:	4402      	add	r2, r0
 8003eea:	4603      	mov	r3, r0
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d100      	bne.n	8003ef2 <memset+0xa>
 8003ef0:	4770      	bx	lr
 8003ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef6:	e7f9      	b.n	8003eec <memset+0x4>

08003ef8 <_calloc_r>:
 8003ef8:	b513      	push	{r0, r1, r4, lr}
 8003efa:	434a      	muls	r2, r1
 8003efc:	4611      	mov	r1, r2
 8003efe:	9201      	str	r2, [sp, #4]
 8003f00:	f000 f85a 	bl	8003fb8 <_malloc_r>
 8003f04:	4604      	mov	r4, r0
 8003f06:	b118      	cbz	r0, 8003f10 <_calloc_r+0x18>
 8003f08:	9a01      	ldr	r2, [sp, #4]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	f7ff ffec 	bl	8003ee8 <memset>
 8003f10:	4620      	mov	r0, r4
 8003f12:	b002      	add	sp, #8
 8003f14:	bd10      	pop	{r4, pc}
	...

08003f18 <_free_r>:
 8003f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	d048      	beq.n	8003fb0 <_free_r+0x98>
 8003f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f22:	9001      	str	r0, [sp, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f1a1 0404 	sub.w	r4, r1, #4
 8003f2a:	bfb8      	it	lt
 8003f2c:	18e4      	addlt	r4, r4, r3
 8003f2e:	f000 f9b9 	bl	80042a4 <__malloc_lock>
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <_free_r+0x9c>)
 8003f34:	9801      	ldr	r0, [sp, #4]
 8003f36:	6813      	ldr	r3, [r2, #0]
 8003f38:	4615      	mov	r5, r2
 8003f3a:	b933      	cbnz	r3, 8003f4a <_free_r+0x32>
 8003f3c:	6063      	str	r3, [r4, #4]
 8003f3e:	6014      	str	r4, [r2, #0]
 8003f40:	b003      	add	sp, #12
 8003f42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f46:	f000 b9b3 	b.w	80042b0 <__malloc_unlock>
 8003f4a:	42a3      	cmp	r3, r4
 8003f4c:	d90b      	bls.n	8003f66 <_free_r+0x4e>
 8003f4e:	6821      	ldr	r1, [r4, #0]
 8003f50:	1862      	adds	r2, r4, r1
 8003f52:	4293      	cmp	r3, r2
 8003f54:	bf04      	itt	eq
 8003f56:	681a      	ldreq	r2, [r3, #0]
 8003f58:	685b      	ldreq	r3, [r3, #4]
 8003f5a:	6063      	str	r3, [r4, #4]
 8003f5c:	bf04      	itt	eq
 8003f5e:	1852      	addeq	r2, r2, r1
 8003f60:	6022      	streq	r2, [r4, #0]
 8003f62:	602c      	str	r4, [r5, #0]
 8003f64:	e7ec      	b.n	8003f40 <_free_r+0x28>
 8003f66:	461a      	mov	r2, r3
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b10b      	cbz	r3, 8003f70 <_free_r+0x58>
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d9fa      	bls.n	8003f66 <_free_r+0x4e>
 8003f70:	6811      	ldr	r1, [r2, #0]
 8003f72:	1855      	adds	r5, r2, r1
 8003f74:	42a5      	cmp	r5, r4
 8003f76:	d10b      	bne.n	8003f90 <_free_r+0x78>
 8003f78:	6824      	ldr	r4, [r4, #0]
 8003f7a:	4421      	add	r1, r4
 8003f7c:	1854      	adds	r4, r2, r1
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	d1dd      	bne.n	8003f40 <_free_r+0x28>
 8003f84:	681c      	ldr	r4, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	6053      	str	r3, [r2, #4]
 8003f8a:	4421      	add	r1, r4
 8003f8c:	6011      	str	r1, [r2, #0]
 8003f8e:	e7d7      	b.n	8003f40 <_free_r+0x28>
 8003f90:	d902      	bls.n	8003f98 <_free_r+0x80>
 8003f92:	230c      	movs	r3, #12
 8003f94:	6003      	str	r3, [r0, #0]
 8003f96:	e7d3      	b.n	8003f40 <_free_r+0x28>
 8003f98:	6825      	ldr	r5, [r4, #0]
 8003f9a:	1961      	adds	r1, r4, r5
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf04      	itt	eq
 8003fa0:	6819      	ldreq	r1, [r3, #0]
 8003fa2:	685b      	ldreq	r3, [r3, #4]
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	bf04      	itt	eq
 8003fa8:	1949      	addeq	r1, r1, r5
 8003faa:	6021      	streq	r1, [r4, #0]
 8003fac:	6054      	str	r4, [r2, #4]
 8003fae:	e7c7      	b.n	8003f40 <_free_r+0x28>
 8003fb0:	b003      	add	sp, #12
 8003fb2:	bd30      	pop	{r4, r5, pc}
 8003fb4:	20000574 	.word	0x20000574

08003fb8 <_malloc_r>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	1ccd      	adds	r5, r1, #3
 8003fbc:	f025 0503 	bic.w	r5, r5, #3
 8003fc0:	3508      	adds	r5, #8
 8003fc2:	2d0c      	cmp	r5, #12
 8003fc4:	bf38      	it	cc
 8003fc6:	250c      	movcc	r5, #12
 8003fc8:	2d00      	cmp	r5, #0
 8003fca:	4606      	mov	r6, r0
 8003fcc:	db01      	blt.n	8003fd2 <_malloc_r+0x1a>
 8003fce:	42a9      	cmp	r1, r5
 8003fd0:	d903      	bls.n	8003fda <_malloc_r+0x22>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	6033      	str	r3, [r6, #0]
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fda:	f000 f963 	bl	80042a4 <__malloc_lock>
 8003fde:	4921      	ldr	r1, [pc, #132]	; (8004064 <_malloc_r+0xac>)
 8003fe0:	680a      	ldr	r2, [r1, #0]
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	b99c      	cbnz	r4, 800400e <_malloc_r+0x56>
 8003fe6:	4f20      	ldr	r7, [pc, #128]	; (8004068 <_malloc_r+0xb0>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	b923      	cbnz	r3, 8003ff6 <_malloc_r+0x3e>
 8003fec:	4621      	mov	r1, r4
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f000 f83c 	bl	800406c <_sbrk_r>
 8003ff4:	6038      	str	r0, [r7, #0]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f837 	bl	800406c <_sbrk_r>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	d123      	bne.n	800404a <_malloc_r+0x92>
 8004002:	230c      	movs	r3, #12
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	4630      	mov	r0, r6
 8004008:	f000 f952 	bl	80042b0 <__malloc_unlock>
 800400c:	e7e3      	b.n	8003fd6 <_malloc_r+0x1e>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	1b5b      	subs	r3, r3, r5
 8004012:	d417      	bmi.n	8004044 <_malloc_r+0x8c>
 8004014:	2b0b      	cmp	r3, #11
 8004016:	d903      	bls.n	8004020 <_malloc_r+0x68>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	441c      	add	r4, r3
 800401c:	6025      	str	r5, [r4, #0]
 800401e:	e004      	b.n	800402a <_malloc_r+0x72>
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	42a2      	cmp	r2, r4
 8004024:	bf0c      	ite	eq
 8004026:	600b      	streq	r3, [r1, #0]
 8004028:	6053      	strne	r3, [r2, #4]
 800402a:	4630      	mov	r0, r6
 800402c:	f000 f940 	bl	80042b0 <__malloc_unlock>
 8004030:	f104 000b 	add.w	r0, r4, #11
 8004034:	1d23      	adds	r3, r4, #4
 8004036:	f020 0007 	bic.w	r0, r0, #7
 800403a:	1ac2      	subs	r2, r0, r3
 800403c:	d0cc      	beq.n	8003fd8 <_malloc_r+0x20>
 800403e:	1a1b      	subs	r3, r3, r0
 8004040:	50a3      	str	r3, [r4, r2]
 8004042:	e7c9      	b.n	8003fd8 <_malloc_r+0x20>
 8004044:	4622      	mov	r2, r4
 8004046:	6864      	ldr	r4, [r4, #4]
 8004048:	e7cc      	b.n	8003fe4 <_malloc_r+0x2c>
 800404a:	1cc4      	adds	r4, r0, #3
 800404c:	f024 0403 	bic.w	r4, r4, #3
 8004050:	42a0      	cmp	r0, r4
 8004052:	d0e3      	beq.n	800401c <_malloc_r+0x64>
 8004054:	1a21      	subs	r1, r4, r0
 8004056:	4630      	mov	r0, r6
 8004058:	f000 f808 	bl	800406c <_sbrk_r>
 800405c:	3001      	adds	r0, #1
 800405e:	d1dd      	bne.n	800401c <_malloc_r+0x64>
 8004060:	e7cf      	b.n	8004002 <_malloc_r+0x4a>
 8004062:	bf00      	nop
 8004064:	20000574 	.word	0x20000574
 8004068:	20000578 	.word	0x20000578

0800406c <_sbrk_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4d06      	ldr	r5, [pc, #24]	; (8004088 <_sbrk_r+0x1c>)
 8004070:	2300      	movs	r3, #0
 8004072:	4604      	mov	r4, r0
 8004074:	4608      	mov	r0, r1
 8004076:	602b      	str	r3, [r5, #0]
 8004078:	f7fd fe72 	bl	8001d60 <_sbrk>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_sbrk_r+0x1a>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_sbrk_r+0x1a>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	20000fd8 	.word	0x20000fd8

0800408c <siprintf>:
 800408c:	b40e      	push	{r1, r2, r3}
 800408e:	b500      	push	{lr}
 8004090:	b09c      	sub	sp, #112	; 0x70
 8004092:	ab1d      	add	r3, sp, #116	; 0x74
 8004094:	9002      	str	r0, [sp, #8]
 8004096:	9006      	str	r0, [sp, #24]
 8004098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800409c:	4809      	ldr	r0, [pc, #36]	; (80040c4 <siprintf+0x38>)
 800409e:	9107      	str	r1, [sp, #28]
 80040a0:	9104      	str	r1, [sp, #16]
 80040a2:	4909      	ldr	r1, [pc, #36]	; (80040c8 <siprintf+0x3c>)
 80040a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040a8:	9105      	str	r1, [sp, #20]
 80040aa:	6800      	ldr	r0, [r0, #0]
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	a902      	add	r1, sp, #8
 80040b0:	f000 f960 	bl	8004374 <_svfiprintf_r>
 80040b4:	9b02      	ldr	r3, [sp, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	b01c      	add	sp, #112	; 0x70
 80040bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80040c0:	b003      	add	sp, #12
 80040c2:	4770      	bx	lr
 80040c4:	20000058 	.word	0x20000058
 80040c8:	ffff0208 	.word	0xffff0208

080040cc <strchr>:
 80040cc:	b2c9      	uxtb	r1, r1
 80040ce:	4603      	mov	r3, r0
 80040d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040d4:	b11a      	cbz	r2, 80040de <strchr+0x12>
 80040d6:	428a      	cmp	r2, r1
 80040d8:	d1f9      	bne.n	80040ce <strchr+0x2>
 80040da:	4618      	mov	r0, r3
 80040dc:	4770      	bx	lr
 80040de:	2900      	cmp	r1, #0
 80040e0:	bf18      	it	ne
 80040e2:	2300      	movne	r3, #0
 80040e4:	e7f9      	b.n	80040da <strchr+0xe>

080040e6 <strstr>:
 80040e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e8:	780c      	ldrb	r4, [r1, #0]
 80040ea:	b164      	cbz	r4, 8004106 <strstr+0x20>
 80040ec:	4603      	mov	r3, r0
 80040ee:	781a      	ldrb	r2, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	1c5e      	adds	r6, r3, #1
 80040f4:	b90a      	cbnz	r2, 80040fa <strstr+0x14>
 80040f6:	4610      	mov	r0, r2
 80040f8:	e005      	b.n	8004106 <strstr+0x20>
 80040fa:	4294      	cmp	r4, r2
 80040fc:	d108      	bne.n	8004110 <strstr+0x2a>
 80040fe:	460d      	mov	r5, r1
 8004100:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004104:	b902      	cbnz	r2, 8004108 <strstr+0x22>
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800410c:	4297      	cmp	r7, r2
 800410e:	d0f7      	beq.n	8004100 <strstr+0x1a>
 8004110:	4633      	mov	r3, r6
 8004112:	e7ec      	b.n	80040ee <strstr+0x8>

08004114 <_strtol_l.isra.0>:
 8004114:	2b01      	cmp	r3, #1
 8004116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800411a:	d001      	beq.n	8004120 <_strtol_l.isra.0+0xc>
 800411c:	2b24      	cmp	r3, #36	; 0x24
 800411e:	d906      	bls.n	800412e <_strtol_l.isra.0+0x1a>
 8004120:	f7ff fea2 	bl	8003e68 <__errno>
 8004124:	2316      	movs	r3, #22
 8004126:	6003      	str	r3, [r0, #0]
 8004128:	2000      	movs	r0, #0
 800412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412e:	4f3a      	ldr	r7, [pc, #232]	; (8004218 <_strtol_l.isra.0+0x104>)
 8004130:	468e      	mov	lr, r1
 8004132:	4676      	mov	r6, lr
 8004134:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004138:	5de5      	ldrb	r5, [r4, r7]
 800413a:	f015 0508 	ands.w	r5, r5, #8
 800413e:	d1f8      	bne.n	8004132 <_strtol_l.isra.0+0x1e>
 8004140:	2c2d      	cmp	r4, #45	; 0x2d
 8004142:	d134      	bne.n	80041ae <_strtol_l.isra.0+0x9a>
 8004144:	f89e 4000 	ldrb.w	r4, [lr]
 8004148:	f04f 0801 	mov.w	r8, #1
 800414c:	f106 0e02 	add.w	lr, r6, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d05c      	beq.n	800420e <_strtol_l.isra.0+0xfa>
 8004154:	2b10      	cmp	r3, #16
 8004156:	d10c      	bne.n	8004172 <_strtol_l.isra.0+0x5e>
 8004158:	2c30      	cmp	r4, #48	; 0x30
 800415a:	d10a      	bne.n	8004172 <_strtol_l.isra.0+0x5e>
 800415c:	f89e 4000 	ldrb.w	r4, [lr]
 8004160:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004164:	2c58      	cmp	r4, #88	; 0x58
 8004166:	d14d      	bne.n	8004204 <_strtol_l.isra.0+0xf0>
 8004168:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800416c:	2310      	movs	r3, #16
 800416e:	f10e 0e02 	add.w	lr, lr, #2
 8004172:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004176:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800417a:	2600      	movs	r6, #0
 800417c:	fbbc f9f3 	udiv	r9, ip, r3
 8004180:	4635      	mov	r5, r6
 8004182:	fb03 ca19 	mls	sl, r3, r9, ip
 8004186:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800418a:	2f09      	cmp	r7, #9
 800418c:	d818      	bhi.n	80041c0 <_strtol_l.isra.0+0xac>
 800418e:	463c      	mov	r4, r7
 8004190:	42a3      	cmp	r3, r4
 8004192:	dd24      	ble.n	80041de <_strtol_l.isra.0+0xca>
 8004194:	2e00      	cmp	r6, #0
 8004196:	db1f      	blt.n	80041d8 <_strtol_l.isra.0+0xc4>
 8004198:	45a9      	cmp	r9, r5
 800419a:	d31d      	bcc.n	80041d8 <_strtol_l.isra.0+0xc4>
 800419c:	d101      	bne.n	80041a2 <_strtol_l.isra.0+0x8e>
 800419e:	45a2      	cmp	sl, r4
 80041a0:	db1a      	blt.n	80041d8 <_strtol_l.isra.0+0xc4>
 80041a2:	fb05 4503 	mla	r5, r5, r3, r4
 80041a6:	2601      	movs	r6, #1
 80041a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80041ac:	e7eb      	b.n	8004186 <_strtol_l.isra.0+0x72>
 80041ae:	2c2b      	cmp	r4, #43	; 0x2b
 80041b0:	bf08      	it	eq
 80041b2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80041b6:	46a8      	mov	r8, r5
 80041b8:	bf08      	it	eq
 80041ba:	f106 0e02 	addeq.w	lr, r6, #2
 80041be:	e7c7      	b.n	8004150 <_strtol_l.isra.0+0x3c>
 80041c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80041c4:	2f19      	cmp	r7, #25
 80041c6:	d801      	bhi.n	80041cc <_strtol_l.isra.0+0xb8>
 80041c8:	3c37      	subs	r4, #55	; 0x37
 80041ca:	e7e1      	b.n	8004190 <_strtol_l.isra.0+0x7c>
 80041cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80041d0:	2f19      	cmp	r7, #25
 80041d2:	d804      	bhi.n	80041de <_strtol_l.isra.0+0xca>
 80041d4:	3c57      	subs	r4, #87	; 0x57
 80041d6:	e7db      	b.n	8004190 <_strtol_l.isra.0+0x7c>
 80041d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80041dc:	e7e4      	b.n	80041a8 <_strtol_l.isra.0+0x94>
 80041de:	2e00      	cmp	r6, #0
 80041e0:	da05      	bge.n	80041ee <_strtol_l.isra.0+0xda>
 80041e2:	2322      	movs	r3, #34	; 0x22
 80041e4:	6003      	str	r3, [r0, #0]
 80041e6:	4665      	mov	r5, ip
 80041e8:	b942      	cbnz	r2, 80041fc <_strtol_l.isra.0+0xe8>
 80041ea:	4628      	mov	r0, r5
 80041ec:	e79d      	b.n	800412a <_strtol_l.isra.0+0x16>
 80041ee:	f1b8 0f00 	cmp.w	r8, #0
 80041f2:	d000      	beq.n	80041f6 <_strtol_l.isra.0+0xe2>
 80041f4:	426d      	negs	r5, r5
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	d0f7      	beq.n	80041ea <_strtol_l.isra.0+0xd6>
 80041fa:	b10e      	cbz	r6, 8004200 <_strtol_l.isra.0+0xec>
 80041fc:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	e7f2      	b.n	80041ea <_strtol_l.isra.0+0xd6>
 8004204:	2430      	movs	r4, #48	; 0x30
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1b3      	bne.n	8004172 <_strtol_l.isra.0+0x5e>
 800420a:	2308      	movs	r3, #8
 800420c:	e7b1      	b.n	8004172 <_strtol_l.isra.0+0x5e>
 800420e:	2c30      	cmp	r4, #48	; 0x30
 8004210:	d0a4      	beq.n	800415c <_strtol_l.isra.0+0x48>
 8004212:	230a      	movs	r3, #10
 8004214:	e7ad      	b.n	8004172 <_strtol_l.isra.0+0x5e>
 8004216:	bf00      	nop
 8004218:	08005035 	.word	0x08005035

0800421c <strtol>:
 800421c:	4613      	mov	r3, r2
 800421e:	460a      	mov	r2, r1
 8004220:	4601      	mov	r1, r0
 8004222:	4802      	ldr	r0, [pc, #8]	; (800422c <strtol+0x10>)
 8004224:	6800      	ldr	r0, [r0, #0]
 8004226:	f7ff bf75 	b.w	8004114 <_strtol_l.isra.0>
 800422a:	bf00      	nop
 800422c:	20000058 	.word	0x20000058

08004230 <_vsniprintf_r>:
 8004230:	b530      	push	{r4, r5, lr}
 8004232:	1e14      	subs	r4, r2, #0
 8004234:	4605      	mov	r5, r0
 8004236:	b09b      	sub	sp, #108	; 0x6c
 8004238:	4618      	mov	r0, r3
 800423a:	da05      	bge.n	8004248 <_vsniprintf_r+0x18>
 800423c:	238b      	movs	r3, #139	; 0x8b
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004244:	b01b      	add	sp, #108	; 0x6c
 8004246:	bd30      	pop	{r4, r5, pc}
 8004248:	f44f 7302 	mov.w	r3, #520	; 0x208
 800424c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004250:	bf14      	ite	ne
 8004252:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004256:	4623      	moveq	r3, r4
 8004258:	9302      	str	r3, [sp, #8]
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004260:	9100      	str	r1, [sp, #0]
 8004262:	9104      	str	r1, [sp, #16]
 8004264:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004268:	4602      	mov	r2, r0
 800426a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800426c:	4669      	mov	r1, sp
 800426e:	4628      	mov	r0, r5
 8004270:	f000 f880 	bl	8004374 <_svfiprintf_r>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	bfbc      	itt	lt
 8004278:	238b      	movlt	r3, #139	; 0x8b
 800427a:	602b      	strlt	r3, [r5, #0]
 800427c:	2c00      	cmp	r4, #0
 800427e:	d0e1      	beq.n	8004244 <_vsniprintf_r+0x14>
 8004280:	9b00      	ldr	r3, [sp, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e7dd      	b.n	8004244 <_vsniprintf_r+0x14>

08004288 <vsniprintf>:
 8004288:	b507      	push	{r0, r1, r2, lr}
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	460a      	mov	r2, r1
 8004290:	4601      	mov	r1, r0
 8004292:	4803      	ldr	r0, [pc, #12]	; (80042a0 <vsniprintf+0x18>)
 8004294:	6800      	ldr	r0, [r0, #0]
 8004296:	f7ff ffcb 	bl	8004230 <_vsniprintf_r>
 800429a:	b003      	add	sp, #12
 800429c:	f85d fb04 	ldr.w	pc, [sp], #4
 80042a0:	20000058 	.word	0x20000058

080042a4 <__malloc_lock>:
 80042a4:	4801      	ldr	r0, [pc, #4]	; (80042ac <__malloc_lock+0x8>)
 80042a6:	f000 baf9 	b.w	800489c <__retarget_lock_acquire_recursive>
 80042aa:	bf00      	nop
 80042ac:	20000fe0 	.word	0x20000fe0

080042b0 <__malloc_unlock>:
 80042b0:	4801      	ldr	r0, [pc, #4]	; (80042b8 <__malloc_unlock+0x8>)
 80042b2:	f000 baf4 	b.w	800489e <__retarget_lock_release_recursive>
 80042b6:	bf00      	nop
 80042b8:	20000fe0 	.word	0x20000fe0

080042bc <__ssputs_r>:
 80042bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c0:	688e      	ldr	r6, [r1, #8]
 80042c2:	429e      	cmp	r6, r3
 80042c4:	4682      	mov	sl, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	4690      	mov	r8, r2
 80042ca:	461f      	mov	r7, r3
 80042cc:	d838      	bhi.n	8004340 <__ssputs_r+0x84>
 80042ce:	898a      	ldrh	r2, [r1, #12]
 80042d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042d4:	d032      	beq.n	800433c <__ssputs_r+0x80>
 80042d6:	6825      	ldr	r5, [r4, #0]
 80042d8:	6909      	ldr	r1, [r1, #16]
 80042da:	eba5 0901 	sub.w	r9, r5, r1
 80042de:	6965      	ldr	r5, [r4, #20]
 80042e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042e8:	3301      	adds	r3, #1
 80042ea:	444b      	add	r3, r9
 80042ec:	106d      	asrs	r5, r5, #1
 80042ee:	429d      	cmp	r5, r3
 80042f0:	bf38      	it	cc
 80042f2:	461d      	movcc	r5, r3
 80042f4:	0553      	lsls	r3, r2, #21
 80042f6:	d531      	bpl.n	800435c <__ssputs_r+0xa0>
 80042f8:	4629      	mov	r1, r5
 80042fa:	f7ff fe5d 	bl	8003fb8 <_malloc_r>
 80042fe:	4606      	mov	r6, r0
 8004300:	b950      	cbnz	r0, 8004318 <__ssputs_r+0x5c>
 8004302:	230c      	movs	r3, #12
 8004304:	f8ca 3000 	str.w	r3, [sl]
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430e:	81a3      	strh	r3, [r4, #12]
 8004310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	6921      	ldr	r1, [r4, #16]
 800431a:	464a      	mov	r2, r9
 800431c:	f7ff fdd6 	bl	8003ecc <memcpy>
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432a:	81a3      	strh	r3, [r4, #12]
 800432c:	6126      	str	r6, [r4, #16]
 800432e:	6165      	str	r5, [r4, #20]
 8004330:	444e      	add	r6, r9
 8004332:	eba5 0509 	sub.w	r5, r5, r9
 8004336:	6026      	str	r6, [r4, #0]
 8004338:	60a5      	str	r5, [r4, #8]
 800433a:	463e      	mov	r6, r7
 800433c:	42be      	cmp	r6, r7
 800433e:	d900      	bls.n	8004342 <__ssputs_r+0x86>
 8004340:	463e      	mov	r6, r7
 8004342:	4632      	mov	r2, r6
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	4641      	mov	r1, r8
 8004348:	f000 faaa 	bl	80048a0 <memmove>
 800434c:	68a3      	ldr	r3, [r4, #8]
 800434e:	6822      	ldr	r2, [r4, #0]
 8004350:	1b9b      	subs	r3, r3, r6
 8004352:	4432      	add	r2, r6
 8004354:	60a3      	str	r3, [r4, #8]
 8004356:	6022      	str	r2, [r4, #0]
 8004358:	2000      	movs	r0, #0
 800435a:	e7db      	b.n	8004314 <__ssputs_r+0x58>
 800435c:	462a      	mov	r2, r5
 800435e:	f000 fab9 	bl	80048d4 <_realloc_r>
 8004362:	4606      	mov	r6, r0
 8004364:	2800      	cmp	r0, #0
 8004366:	d1e1      	bne.n	800432c <__ssputs_r+0x70>
 8004368:	6921      	ldr	r1, [r4, #16]
 800436a:	4650      	mov	r0, sl
 800436c:	f7ff fdd4 	bl	8003f18 <_free_r>
 8004370:	e7c7      	b.n	8004302 <__ssputs_r+0x46>
	...

08004374 <_svfiprintf_r>:
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	4698      	mov	r8, r3
 800437a:	898b      	ldrh	r3, [r1, #12]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	b09d      	sub	sp, #116	; 0x74
 8004380:	4607      	mov	r7, r0
 8004382:	460d      	mov	r5, r1
 8004384:	4614      	mov	r4, r2
 8004386:	d50e      	bpl.n	80043a6 <_svfiprintf_r+0x32>
 8004388:	690b      	ldr	r3, [r1, #16]
 800438a:	b963      	cbnz	r3, 80043a6 <_svfiprintf_r+0x32>
 800438c:	2140      	movs	r1, #64	; 0x40
 800438e:	f7ff fe13 	bl	8003fb8 <_malloc_r>
 8004392:	6028      	str	r0, [r5, #0]
 8004394:	6128      	str	r0, [r5, #16]
 8004396:	b920      	cbnz	r0, 80043a2 <_svfiprintf_r+0x2e>
 8004398:	230c      	movs	r3, #12
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a0:	e0d1      	b.n	8004546 <_svfiprintf_r+0x1d2>
 80043a2:	2340      	movs	r3, #64	; 0x40
 80043a4:	616b      	str	r3, [r5, #20]
 80043a6:	2300      	movs	r3, #0
 80043a8:	9309      	str	r3, [sp, #36]	; 0x24
 80043aa:	2320      	movs	r3, #32
 80043ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043b4:	2330      	movs	r3, #48	; 0x30
 80043b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004560 <_svfiprintf_r+0x1ec>
 80043ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043be:	f04f 0901 	mov.w	r9, #1
 80043c2:	4623      	mov	r3, r4
 80043c4:	469a      	mov	sl, r3
 80043c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ca:	b10a      	cbz	r2, 80043d0 <_svfiprintf_r+0x5c>
 80043cc:	2a25      	cmp	r2, #37	; 0x25
 80043ce:	d1f9      	bne.n	80043c4 <_svfiprintf_r+0x50>
 80043d0:	ebba 0b04 	subs.w	fp, sl, r4
 80043d4:	d00b      	beq.n	80043ee <_svfiprintf_r+0x7a>
 80043d6:	465b      	mov	r3, fp
 80043d8:	4622      	mov	r2, r4
 80043da:	4629      	mov	r1, r5
 80043dc:	4638      	mov	r0, r7
 80043de:	f7ff ff6d 	bl	80042bc <__ssputs_r>
 80043e2:	3001      	adds	r0, #1
 80043e4:	f000 80aa 	beq.w	800453c <_svfiprintf_r+0x1c8>
 80043e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043ea:	445a      	add	r2, fp
 80043ec:	9209      	str	r2, [sp, #36]	; 0x24
 80043ee:	f89a 3000 	ldrb.w	r3, [sl]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80a2 	beq.w	800453c <_svfiprintf_r+0x1c8>
 80043f8:	2300      	movs	r3, #0
 80043fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004402:	f10a 0a01 	add.w	sl, sl, #1
 8004406:	9304      	str	r3, [sp, #16]
 8004408:	9307      	str	r3, [sp, #28]
 800440a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800440e:	931a      	str	r3, [sp, #104]	; 0x68
 8004410:	4654      	mov	r4, sl
 8004412:	2205      	movs	r2, #5
 8004414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004418:	4851      	ldr	r0, [pc, #324]	; (8004560 <_svfiprintf_r+0x1ec>)
 800441a:	f7fb fee9 	bl	80001f0 <memchr>
 800441e:	9a04      	ldr	r2, [sp, #16]
 8004420:	b9d8      	cbnz	r0, 800445a <_svfiprintf_r+0xe6>
 8004422:	06d0      	lsls	r0, r2, #27
 8004424:	bf44      	itt	mi
 8004426:	2320      	movmi	r3, #32
 8004428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800442c:	0711      	lsls	r1, r2, #28
 800442e:	bf44      	itt	mi
 8004430:	232b      	movmi	r3, #43	; 0x2b
 8004432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004436:	f89a 3000 	ldrb.w	r3, [sl]
 800443a:	2b2a      	cmp	r3, #42	; 0x2a
 800443c:	d015      	beq.n	800446a <_svfiprintf_r+0xf6>
 800443e:	9a07      	ldr	r2, [sp, #28]
 8004440:	4654      	mov	r4, sl
 8004442:	2000      	movs	r0, #0
 8004444:	f04f 0c0a 	mov.w	ip, #10
 8004448:	4621      	mov	r1, r4
 800444a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800444e:	3b30      	subs	r3, #48	; 0x30
 8004450:	2b09      	cmp	r3, #9
 8004452:	d94e      	bls.n	80044f2 <_svfiprintf_r+0x17e>
 8004454:	b1b0      	cbz	r0, 8004484 <_svfiprintf_r+0x110>
 8004456:	9207      	str	r2, [sp, #28]
 8004458:	e014      	b.n	8004484 <_svfiprintf_r+0x110>
 800445a:	eba0 0308 	sub.w	r3, r0, r8
 800445e:	fa09 f303 	lsl.w	r3, r9, r3
 8004462:	4313      	orrs	r3, r2
 8004464:	9304      	str	r3, [sp, #16]
 8004466:	46a2      	mov	sl, r4
 8004468:	e7d2      	b.n	8004410 <_svfiprintf_r+0x9c>
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	1d19      	adds	r1, r3, #4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	9103      	str	r1, [sp, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	bfbb      	ittet	lt
 8004476:	425b      	neglt	r3, r3
 8004478:	f042 0202 	orrlt.w	r2, r2, #2
 800447c:	9307      	strge	r3, [sp, #28]
 800447e:	9307      	strlt	r3, [sp, #28]
 8004480:	bfb8      	it	lt
 8004482:	9204      	strlt	r2, [sp, #16]
 8004484:	7823      	ldrb	r3, [r4, #0]
 8004486:	2b2e      	cmp	r3, #46	; 0x2e
 8004488:	d10c      	bne.n	80044a4 <_svfiprintf_r+0x130>
 800448a:	7863      	ldrb	r3, [r4, #1]
 800448c:	2b2a      	cmp	r3, #42	; 0x2a
 800448e:	d135      	bne.n	80044fc <_svfiprintf_r+0x188>
 8004490:	9b03      	ldr	r3, [sp, #12]
 8004492:	1d1a      	adds	r2, r3, #4
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	9203      	str	r2, [sp, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	bfb8      	it	lt
 800449c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044a0:	3402      	adds	r4, #2
 80044a2:	9305      	str	r3, [sp, #20]
 80044a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004570 <_svfiprintf_r+0x1fc>
 80044a8:	7821      	ldrb	r1, [r4, #0]
 80044aa:	2203      	movs	r2, #3
 80044ac:	4650      	mov	r0, sl
 80044ae:	f7fb fe9f 	bl	80001f0 <memchr>
 80044b2:	b140      	cbz	r0, 80044c6 <_svfiprintf_r+0x152>
 80044b4:	2340      	movs	r3, #64	; 0x40
 80044b6:	eba0 000a 	sub.w	r0, r0, sl
 80044ba:	fa03 f000 	lsl.w	r0, r3, r0
 80044be:	9b04      	ldr	r3, [sp, #16]
 80044c0:	4303      	orrs	r3, r0
 80044c2:	3401      	adds	r4, #1
 80044c4:	9304      	str	r3, [sp, #16]
 80044c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ca:	4826      	ldr	r0, [pc, #152]	; (8004564 <_svfiprintf_r+0x1f0>)
 80044cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044d0:	2206      	movs	r2, #6
 80044d2:	f7fb fe8d 	bl	80001f0 <memchr>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d038      	beq.n	800454c <_svfiprintf_r+0x1d8>
 80044da:	4b23      	ldr	r3, [pc, #140]	; (8004568 <_svfiprintf_r+0x1f4>)
 80044dc:	bb1b      	cbnz	r3, 8004526 <_svfiprintf_r+0x1b2>
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	3307      	adds	r3, #7
 80044e2:	f023 0307 	bic.w	r3, r3, #7
 80044e6:	3308      	adds	r3, #8
 80044e8:	9303      	str	r3, [sp, #12]
 80044ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ec:	4433      	add	r3, r6
 80044ee:	9309      	str	r3, [sp, #36]	; 0x24
 80044f0:	e767      	b.n	80043c2 <_svfiprintf_r+0x4e>
 80044f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80044f6:	460c      	mov	r4, r1
 80044f8:	2001      	movs	r0, #1
 80044fa:	e7a5      	b.n	8004448 <_svfiprintf_r+0xd4>
 80044fc:	2300      	movs	r3, #0
 80044fe:	3401      	adds	r4, #1
 8004500:	9305      	str	r3, [sp, #20]
 8004502:	4619      	mov	r1, r3
 8004504:	f04f 0c0a 	mov.w	ip, #10
 8004508:	4620      	mov	r0, r4
 800450a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800450e:	3a30      	subs	r2, #48	; 0x30
 8004510:	2a09      	cmp	r2, #9
 8004512:	d903      	bls.n	800451c <_svfiprintf_r+0x1a8>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0c5      	beq.n	80044a4 <_svfiprintf_r+0x130>
 8004518:	9105      	str	r1, [sp, #20]
 800451a:	e7c3      	b.n	80044a4 <_svfiprintf_r+0x130>
 800451c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004520:	4604      	mov	r4, r0
 8004522:	2301      	movs	r3, #1
 8004524:	e7f0      	b.n	8004508 <_svfiprintf_r+0x194>
 8004526:	ab03      	add	r3, sp, #12
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	462a      	mov	r2, r5
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <_svfiprintf_r+0x1f8>)
 800452e:	a904      	add	r1, sp, #16
 8004530:	4638      	mov	r0, r7
 8004532:	f3af 8000 	nop.w
 8004536:	1c42      	adds	r2, r0, #1
 8004538:	4606      	mov	r6, r0
 800453a:	d1d6      	bne.n	80044ea <_svfiprintf_r+0x176>
 800453c:	89ab      	ldrh	r3, [r5, #12]
 800453e:	065b      	lsls	r3, r3, #25
 8004540:	f53f af2c 	bmi.w	800439c <_svfiprintf_r+0x28>
 8004544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004546:	b01d      	add	sp, #116	; 0x74
 8004548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454c:	ab03      	add	r3, sp, #12
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	462a      	mov	r2, r5
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <_svfiprintf_r+0x1f8>)
 8004554:	a904      	add	r1, sp, #16
 8004556:	4638      	mov	r0, r7
 8004558:	f000 f87a 	bl	8004650 <_printf_i>
 800455c:	e7eb      	b.n	8004536 <_svfiprintf_r+0x1c2>
 800455e:	bf00      	nop
 8004560:	08005135 	.word	0x08005135
 8004564:	0800513f 	.word	0x0800513f
 8004568:	00000000 	.word	0x00000000
 800456c:	080042bd 	.word	0x080042bd
 8004570:	0800513b 	.word	0x0800513b

08004574 <_printf_common>:
 8004574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004578:	4616      	mov	r6, r2
 800457a:	4699      	mov	r9, r3
 800457c:	688a      	ldr	r2, [r1, #8]
 800457e:	690b      	ldr	r3, [r1, #16]
 8004580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004584:	4293      	cmp	r3, r2
 8004586:	bfb8      	it	lt
 8004588:	4613      	movlt	r3, r2
 800458a:	6033      	str	r3, [r6, #0]
 800458c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004590:	4607      	mov	r7, r0
 8004592:	460c      	mov	r4, r1
 8004594:	b10a      	cbz	r2, 800459a <_printf_common+0x26>
 8004596:	3301      	adds	r3, #1
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	0699      	lsls	r1, r3, #26
 800459e:	bf42      	ittt	mi
 80045a0:	6833      	ldrmi	r3, [r6, #0]
 80045a2:	3302      	addmi	r3, #2
 80045a4:	6033      	strmi	r3, [r6, #0]
 80045a6:	6825      	ldr	r5, [r4, #0]
 80045a8:	f015 0506 	ands.w	r5, r5, #6
 80045ac:	d106      	bne.n	80045bc <_printf_common+0x48>
 80045ae:	f104 0a19 	add.w	sl, r4, #25
 80045b2:	68e3      	ldr	r3, [r4, #12]
 80045b4:	6832      	ldr	r2, [r6, #0]
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	42ab      	cmp	r3, r5
 80045ba:	dc26      	bgt.n	800460a <_printf_common+0x96>
 80045bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045c0:	1e13      	subs	r3, r2, #0
 80045c2:	6822      	ldr	r2, [r4, #0]
 80045c4:	bf18      	it	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	0692      	lsls	r2, r2, #26
 80045ca:	d42b      	bmi.n	8004624 <_printf_common+0xb0>
 80045cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045d0:	4649      	mov	r1, r9
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c0      	blx	r8
 80045d6:	3001      	adds	r0, #1
 80045d8:	d01e      	beq.n	8004618 <_printf_common+0xa4>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	68e5      	ldr	r5, [r4, #12]
 80045de:	6832      	ldr	r2, [r6, #0]
 80045e0:	f003 0306 	and.w	r3, r3, #6
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	bf08      	it	eq
 80045e8:	1aad      	subeq	r5, r5, r2
 80045ea:	68a3      	ldr	r3, [r4, #8]
 80045ec:	6922      	ldr	r2, [r4, #16]
 80045ee:	bf0c      	ite	eq
 80045f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f4:	2500      	movne	r5, #0
 80045f6:	4293      	cmp	r3, r2
 80045f8:	bfc4      	itt	gt
 80045fa:	1a9b      	subgt	r3, r3, r2
 80045fc:	18ed      	addgt	r5, r5, r3
 80045fe:	2600      	movs	r6, #0
 8004600:	341a      	adds	r4, #26
 8004602:	42b5      	cmp	r5, r6
 8004604:	d11a      	bne.n	800463c <_printf_common+0xc8>
 8004606:	2000      	movs	r0, #0
 8004608:	e008      	b.n	800461c <_printf_common+0xa8>
 800460a:	2301      	movs	r3, #1
 800460c:	4652      	mov	r2, sl
 800460e:	4649      	mov	r1, r9
 8004610:	4638      	mov	r0, r7
 8004612:	47c0      	blx	r8
 8004614:	3001      	adds	r0, #1
 8004616:	d103      	bne.n	8004620 <_printf_common+0xac>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800461c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004620:	3501      	adds	r5, #1
 8004622:	e7c6      	b.n	80045b2 <_printf_common+0x3e>
 8004624:	18e1      	adds	r1, r4, r3
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	2030      	movs	r0, #48	; 0x30
 800462a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800462e:	4422      	add	r2, r4
 8004630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004638:	3302      	adds	r3, #2
 800463a:	e7c7      	b.n	80045cc <_printf_common+0x58>
 800463c:	2301      	movs	r3, #1
 800463e:	4622      	mov	r2, r4
 8004640:	4649      	mov	r1, r9
 8004642:	4638      	mov	r0, r7
 8004644:	47c0      	blx	r8
 8004646:	3001      	adds	r0, #1
 8004648:	d0e6      	beq.n	8004618 <_printf_common+0xa4>
 800464a:	3601      	adds	r6, #1
 800464c:	e7d9      	b.n	8004602 <_printf_common+0x8e>
	...

08004650 <_printf_i>:
 8004650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	460c      	mov	r4, r1
 8004656:	4691      	mov	r9, r2
 8004658:	7e27      	ldrb	r7, [r4, #24]
 800465a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800465c:	2f78      	cmp	r7, #120	; 0x78
 800465e:	4680      	mov	r8, r0
 8004660:	469a      	mov	sl, r3
 8004662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004666:	d807      	bhi.n	8004678 <_printf_i+0x28>
 8004668:	2f62      	cmp	r7, #98	; 0x62
 800466a:	d80a      	bhi.n	8004682 <_printf_i+0x32>
 800466c:	2f00      	cmp	r7, #0
 800466e:	f000 80d8 	beq.w	8004822 <_printf_i+0x1d2>
 8004672:	2f58      	cmp	r7, #88	; 0x58
 8004674:	f000 80a3 	beq.w	80047be <_printf_i+0x16e>
 8004678:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800467c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004680:	e03a      	b.n	80046f8 <_printf_i+0xa8>
 8004682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004686:	2b15      	cmp	r3, #21
 8004688:	d8f6      	bhi.n	8004678 <_printf_i+0x28>
 800468a:	a001      	add	r0, pc, #4	; (adr r0, 8004690 <_printf_i+0x40>)
 800468c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004690:	080046e9 	.word	0x080046e9
 8004694:	080046fd 	.word	0x080046fd
 8004698:	08004679 	.word	0x08004679
 800469c:	08004679 	.word	0x08004679
 80046a0:	08004679 	.word	0x08004679
 80046a4:	08004679 	.word	0x08004679
 80046a8:	080046fd 	.word	0x080046fd
 80046ac:	08004679 	.word	0x08004679
 80046b0:	08004679 	.word	0x08004679
 80046b4:	08004679 	.word	0x08004679
 80046b8:	08004679 	.word	0x08004679
 80046bc:	08004809 	.word	0x08004809
 80046c0:	0800472d 	.word	0x0800472d
 80046c4:	080047eb 	.word	0x080047eb
 80046c8:	08004679 	.word	0x08004679
 80046cc:	08004679 	.word	0x08004679
 80046d0:	0800482b 	.word	0x0800482b
 80046d4:	08004679 	.word	0x08004679
 80046d8:	0800472d 	.word	0x0800472d
 80046dc:	08004679 	.word	0x08004679
 80046e0:	08004679 	.word	0x08004679
 80046e4:	080047f3 	.word	0x080047f3
 80046e8:	680b      	ldr	r3, [r1, #0]
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	600a      	str	r2, [r1, #0]
 80046f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0a3      	b.n	8004844 <_printf_i+0x1f4>
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	6808      	ldr	r0, [r1, #0]
 8004700:	062e      	lsls	r6, r5, #24
 8004702:	f100 0304 	add.w	r3, r0, #4
 8004706:	d50a      	bpl.n	800471e <_printf_i+0xce>
 8004708:	6805      	ldr	r5, [r0, #0]
 800470a:	600b      	str	r3, [r1, #0]
 800470c:	2d00      	cmp	r5, #0
 800470e:	da03      	bge.n	8004718 <_printf_i+0xc8>
 8004710:	232d      	movs	r3, #45	; 0x2d
 8004712:	426d      	negs	r5, r5
 8004714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004718:	485e      	ldr	r0, [pc, #376]	; (8004894 <_printf_i+0x244>)
 800471a:	230a      	movs	r3, #10
 800471c:	e019      	b.n	8004752 <_printf_i+0x102>
 800471e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004722:	6805      	ldr	r5, [r0, #0]
 8004724:	600b      	str	r3, [r1, #0]
 8004726:	bf18      	it	ne
 8004728:	b22d      	sxthne	r5, r5
 800472a:	e7ef      	b.n	800470c <_printf_i+0xbc>
 800472c:	680b      	ldr	r3, [r1, #0]
 800472e:	6825      	ldr	r5, [r4, #0]
 8004730:	1d18      	adds	r0, r3, #4
 8004732:	6008      	str	r0, [r1, #0]
 8004734:	0628      	lsls	r0, r5, #24
 8004736:	d501      	bpl.n	800473c <_printf_i+0xec>
 8004738:	681d      	ldr	r5, [r3, #0]
 800473a:	e002      	b.n	8004742 <_printf_i+0xf2>
 800473c:	0669      	lsls	r1, r5, #25
 800473e:	d5fb      	bpl.n	8004738 <_printf_i+0xe8>
 8004740:	881d      	ldrh	r5, [r3, #0]
 8004742:	4854      	ldr	r0, [pc, #336]	; (8004894 <_printf_i+0x244>)
 8004744:	2f6f      	cmp	r7, #111	; 0x6f
 8004746:	bf0c      	ite	eq
 8004748:	2308      	moveq	r3, #8
 800474a:	230a      	movne	r3, #10
 800474c:	2100      	movs	r1, #0
 800474e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004752:	6866      	ldr	r6, [r4, #4]
 8004754:	60a6      	str	r6, [r4, #8]
 8004756:	2e00      	cmp	r6, #0
 8004758:	bfa2      	ittt	ge
 800475a:	6821      	ldrge	r1, [r4, #0]
 800475c:	f021 0104 	bicge.w	r1, r1, #4
 8004760:	6021      	strge	r1, [r4, #0]
 8004762:	b90d      	cbnz	r5, 8004768 <_printf_i+0x118>
 8004764:	2e00      	cmp	r6, #0
 8004766:	d04d      	beq.n	8004804 <_printf_i+0x1b4>
 8004768:	4616      	mov	r6, r2
 800476a:	fbb5 f1f3 	udiv	r1, r5, r3
 800476e:	fb03 5711 	mls	r7, r3, r1, r5
 8004772:	5dc7      	ldrb	r7, [r0, r7]
 8004774:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004778:	462f      	mov	r7, r5
 800477a:	42bb      	cmp	r3, r7
 800477c:	460d      	mov	r5, r1
 800477e:	d9f4      	bls.n	800476a <_printf_i+0x11a>
 8004780:	2b08      	cmp	r3, #8
 8004782:	d10b      	bne.n	800479c <_printf_i+0x14c>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	07df      	lsls	r7, r3, #31
 8004788:	d508      	bpl.n	800479c <_printf_i+0x14c>
 800478a:	6923      	ldr	r3, [r4, #16]
 800478c:	6861      	ldr	r1, [r4, #4]
 800478e:	4299      	cmp	r1, r3
 8004790:	bfde      	ittt	le
 8004792:	2330      	movle	r3, #48	; 0x30
 8004794:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004798:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800479c:	1b92      	subs	r2, r2, r6
 800479e:	6122      	str	r2, [r4, #16]
 80047a0:	f8cd a000 	str.w	sl, [sp]
 80047a4:	464b      	mov	r3, r9
 80047a6:	aa03      	add	r2, sp, #12
 80047a8:	4621      	mov	r1, r4
 80047aa:	4640      	mov	r0, r8
 80047ac:	f7ff fee2 	bl	8004574 <_printf_common>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d14c      	bne.n	800484e <_printf_i+0x1fe>
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047b8:	b004      	add	sp, #16
 80047ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047be:	4835      	ldr	r0, [pc, #212]	; (8004894 <_printf_i+0x244>)
 80047c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	680e      	ldr	r6, [r1, #0]
 80047c8:	061f      	lsls	r7, r3, #24
 80047ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80047ce:	600e      	str	r6, [r1, #0]
 80047d0:	d514      	bpl.n	80047fc <_printf_i+0x1ac>
 80047d2:	07d9      	lsls	r1, r3, #31
 80047d4:	bf44      	itt	mi
 80047d6:	f043 0320 	orrmi.w	r3, r3, #32
 80047da:	6023      	strmi	r3, [r4, #0]
 80047dc:	b91d      	cbnz	r5, 80047e6 <_printf_i+0x196>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	f023 0320 	bic.w	r3, r3, #32
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	2310      	movs	r3, #16
 80047e8:	e7b0      	b.n	800474c <_printf_i+0xfc>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	f043 0320 	orr.w	r3, r3, #32
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	2378      	movs	r3, #120	; 0x78
 80047f4:	4828      	ldr	r0, [pc, #160]	; (8004898 <_printf_i+0x248>)
 80047f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047fa:	e7e3      	b.n	80047c4 <_printf_i+0x174>
 80047fc:	065e      	lsls	r6, r3, #25
 80047fe:	bf48      	it	mi
 8004800:	b2ad      	uxthmi	r5, r5
 8004802:	e7e6      	b.n	80047d2 <_printf_i+0x182>
 8004804:	4616      	mov	r6, r2
 8004806:	e7bb      	b.n	8004780 <_printf_i+0x130>
 8004808:	680b      	ldr	r3, [r1, #0]
 800480a:	6826      	ldr	r6, [r4, #0]
 800480c:	6960      	ldr	r0, [r4, #20]
 800480e:	1d1d      	adds	r5, r3, #4
 8004810:	600d      	str	r5, [r1, #0]
 8004812:	0635      	lsls	r5, r6, #24
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	d501      	bpl.n	800481c <_printf_i+0x1cc>
 8004818:	6018      	str	r0, [r3, #0]
 800481a:	e002      	b.n	8004822 <_printf_i+0x1d2>
 800481c:	0671      	lsls	r1, r6, #25
 800481e:	d5fb      	bpl.n	8004818 <_printf_i+0x1c8>
 8004820:	8018      	strh	r0, [r3, #0]
 8004822:	2300      	movs	r3, #0
 8004824:	6123      	str	r3, [r4, #16]
 8004826:	4616      	mov	r6, r2
 8004828:	e7ba      	b.n	80047a0 <_printf_i+0x150>
 800482a:	680b      	ldr	r3, [r1, #0]
 800482c:	1d1a      	adds	r2, r3, #4
 800482e:	600a      	str	r2, [r1, #0]
 8004830:	681e      	ldr	r6, [r3, #0]
 8004832:	6862      	ldr	r2, [r4, #4]
 8004834:	2100      	movs	r1, #0
 8004836:	4630      	mov	r0, r6
 8004838:	f7fb fcda 	bl	80001f0 <memchr>
 800483c:	b108      	cbz	r0, 8004842 <_printf_i+0x1f2>
 800483e:	1b80      	subs	r0, r0, r6
 8004840:	6060      	str	r0, [r4, #4]
 8004842:	6863      	ldr	r3, [r4, #4]
 8004844:	6123      	str	r3, [r4, #16]
 8004846:	2300      	movs	r3, #0
 8004848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484c:	e7a8      	b.n	80047a0 <_printf_i+0x150>
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	4632      	mov	r2, r6
 8004852:	4649      	mov	r1, r9
 8004854:	4640      	mov	r0, r8
 8004856:	47d0      	blx	sl
 8004858:	3001      	adds	r0, #1
 800485a:	d0ab      	beq.n	80047b4 <_printf_i+0x164>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	079b      	lsls	r3, r3, #30
 8004860:	d413      	bmi.n	800488a <_printf_i+0x23a>
 8004862:	68e0      	ldr	r0, [r4, #12]
 8004864:	9b03      	ldr	r3, [sp, #12]
 8004866:	4298      	cmp	r0, r3
 8004868:	bfb8      	it	lt
 800486a:	4618      	movlt	r0, r3
 800486c:	e7a4      	b.n	80047b8 <_printf_i+0x168>
 800486e:	2301      	movs	r3, #1
 8004870:	4632      	mov	r2, r6
 8004872:	4649      	mov	r1, r9
 8004874:	4640      	mov	r0, r8
 8004876:	47d0      	blx	sl
 8004878:	3001      	adds	r0, #1
 800487a:	d09b      	beq.n	80047b4 <_printf_i+0x164>
 800487c:	3501      	adds	r5, #1
 800487e:	68e3      	ldr	r3, [r4, #12]
 8004880:	9903      	ldr	r1, [sp, #12]
 8004882:	1a5b      	subs	r3, r3, r1
 8004884:	42ab      	cmp	r3, r5
 8004886:	dcf2      	bgt.n	800486e <_printf_i+0x21e>
 8004888:	e7eb      	b.n	8004862 <_printf_i+0x212>
 800488a:	2500      	movs	r5, #0
 800488c:	f104 0619 	add.w	r6, r4, #25
 8004890:	e7f5      	b.n	800487e <_printf_i+0x22e>
 8004892:	bf00      	nop
 8004894:	08005146 	.word	0x08005146
 8004898:	08005157 	.word	0x08005157

0800489c <__retarget_lock_acquire_recursive>:
 800489c:	4770      	bx	lr

0800489e <__retarget_lock_release_recursive>:
 800489e:	4770      	bx	lr

080048a0 <memmove>:
 80048a0:	4288      	cmp	r0, r1
 80048a2:	b510      	push	{r4, lr}
 80048a4:	eb01 0402 	add.w	r4, r1, r2
 80048a8:	d902      	bls.n	80048b0 <memmove+0x10>
 80048aa:	4284      	cmp	r4, r0
 80048ac:	4623      	mov	r3, r4
 80048ae:	d807      	bhi.n	80048c0 <memmove+0x20>
 80048b0:	1e43      	subs	r3, r0, #1
 80048b2:	42a1      	cmp	r1, r4
 80048b4:	d008      	beq.n	80048c8 <memmove+0x28>
 80048b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048be:	e7f8      	b.n	80048b2 <memmove+0x12>
 80048c0:	4402      	add	r2, r0
 80048c2:	4601      	mov	r1, r0
 80048c4:	428a      	cmp	r2, r1
 80048c6:	d100      	bne.n	80048ca <memmove+0x2a>
 80048c8:	bd10      	pop	{r4, pc}
 80048ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048d2:	e7f7      	b.n	80048c4 <memmove+0x24>

080048d4 <_realloc_r>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	4607      	mov	r7, r0
 80048d8:	4614      	mov	r4, r2
 80048da:	460e      	mov	r6, r1
 80048dc:	b921      	cbnz	r1, 80048e8 <_realloc_r+0x14>
 80048de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048e2:	4611      	mov	r1, r2
 80048e4:	f7ff bb68 	b.w	8003fb8 <_malloc_r>
 80048e8:	b922      	cbnz	r2, 80048f4 <_realloc_r+0x20>
 80048ea:	f7ff fb15 	bl	8003f18 <_free_r>
 80048ee:	4625      	mov	r5, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f4:	f000 f814 	bl	8004920 <_malloc_usable_size_r>
 80048f8:	42a0      	cmp	r0, r4
 80048fa:	d20f      	bcs.n	800491c <_realloc_r+0x48>
 80048fc:	4621      	mov	r1, r4
 80048fe:	4638      	mov	r0, r7
 8004900:	f7ff fb5a 	bl	8003fb8 <_malloc_r>
 8004904:	4605      	mov	r5, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d0f2      	beq.n	80048f0 <_realloc_r+0x1c>
 800490a:	4631      	mov	r1, r6
 800490c:	4622      	mov	r2, r4
 800490e:	f7ff fadd 	bl	8003ecc <memcpy>
 8004912:	4631      	mov	r1, r6
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff faff 	bl	8003f18 <_free_r>
 800491a:	e7e9      	b.n	80048f0 <_realloc_r+0x1c>
 800491c:	4635      	mov	r5, r6
 800491e:	e7e7      	b.n	80048f0 <_realloc_r+0x1c>

08004920 <_malloc_usable_size_r>:
 8004920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004924:	1f18      	subs	r0, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfbc      	itt	lt
 800492a:	580b      	ldrlt	r3, [r1, r0]
 800492c:	18c0      	addlt	r0, r0, r3
 800492e:	4770      	bx	lr

08004930 <_init>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr

0800493c <_fini>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr
